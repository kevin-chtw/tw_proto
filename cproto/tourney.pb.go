// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.3
// source: tourney.proto

package cproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TourneyReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Req           *anypb.Any             `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TourneyReq) Reset() {
	*x = TourneyReq{}
	mi := &file_tourney_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TourneyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourneyReq) ProtoMessage() {}

func (x *TourneyReq) ProtoReflect() protoreflect.Message {
	mi := &file_tourney_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourneyReq.ProtoReflect.Descriptor instead.
func (*TourneyReq) Descriptor() ([]byte, []int) {
	return file_tourney_proto_rawDescGZIP(), []int{0}
}

func (x *TourneyReq) GetReq() *anypb.Any {
	if x != nil {
		return x.Req
	}
	return nil
}

type TourneyAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ack           *anypb.Any             `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TourneyAck) Reset() {
	*x = TourneyAck{}
	mi := &file_tourney_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TourneyAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TourneyAck) ProtoMessage() {}

func (x *TourneyAck) ProtoReflect() protoreflect.Message {
	mi := &file_tourney_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TourneyAck.ProtoReflect.Descriptor instead.
func (*TourneyAck) Descriptor() ([]byte, []int) {
	return file_tourney_proto_rawDescGZIP(), []int{1}
}

func (x *TourneyAck) GetAck() *anypb.Any {
	if x != nil {
		return x.Ack
	}
	return nil
}

type TouneyListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameType      string                 `protobuf:"bytes,1,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TouneyListReq) Reset() {
	*x = TouneyListReq{}
	mi := &file_tourney_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TouneyListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouneyListReq) ProtoMessage() {}

func (x *TouneyListReq) ProtoReflect() protoreflect.Message {
	mi := &file_tourney_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouneyListReq.ProtoReflect.Descriptor instead.
func (*TouneyListReq) Descriptor() ([]byte, []int) {
	return file_tourney_proto_rawDescGZIP(), []int{2}
}

func (x *TouneyListReq) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

type TouneyListAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tounreys      []*TounreyInfo         `protobuf:"bytes,1,rep,name=tounreys,proto3" json:"tounreys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TouneyListAck) Reset() {
	*x = TouneyListAck{}
	mi := &file_tourney_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TouneyListAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TouneyListAck) ProtoMessage() {}

func (x *TouneyListAck) ProtoReflect() protoreflect.Message {
	mi := &file_tourney_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TouneyListAck.ProtoReflect.Descriptor instead.
func (*TouneyListAck) Descriptor() ([]byte, []int) {
	return file_tourney_proto_rawDescGZIP(), []int{3}
}

func (x *TouneyListAck) GetTounreys() []*TounreyInfo {
	if x != nil {
		return x.Tounreys
	}
	return nil
}

type TounreyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           //比赛ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                        //比赛名称
	GameType      string                 `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`                //游戏类型
	MatchType     string                 `protobuf:"bytes,4,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`             //比赛类型
	Serverid      string                 `protobuf:"bytes,5,opt,name=serverid,proto3" json:"serverid,omitempty"`                                //服务器ID
	Online        int32                  `protobuf:"varint,6,opt,name=online,proto3" json:"online,omitempty"`                                   //在线人数
	SignCondition string                 `protobuf:"bytes,7,opt,name=sign_condition,json=signCondition,proto3" json:"sign_condition,omitempty"` //报名条件
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TounreyInfo) Reset() {
	*x = TounreyInfo{}
	mi := &file_tourney_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TounreyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TounreyInfo) ProtoMessage() {}

func (x *TounreyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tourney_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TounreyInfo.ProtoReflect.Descriptor instead.
func (*TounreyInfo) Descriptor() ([]byte, []int) {
	return file_tourney_proto_rawDescGZIP(), []int{4}
}

func (x *TounreyInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TounreyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TounreyInfo) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *TounreyInfo) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

func (x *TounreyInfo) GetServerid() string {
	if x != nil {
		return x.Serverid
	}
	return ""
}

func (x *TounreyInfo) GetOnline() int32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *TounreyInfo) GetSignCondition() string {
	if x != nil {
		return x.SignCondition
	}
	return ""
}

var File_tourney_proto protoreflect.FileDescriptor

const file_tourney_proto_rawDesc = "" +
	"\n" +
	"\rtourney.proto\x12\x06cproto\x1a\x19google/protobuf/any.proto\"4\n" +
	"\n" +
	"TourneyReq\x12&\n" +
	"\x03req\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x03req\"4\n" +
	"\n" +
	"TourneyAck\x12&\n" +
	"\x03ack\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\x03ack\",\n" +
	"\rTouneyListReq\x12\x1b\n" +
	"\tgame_type\x18\x01 \x01(\tR\bgameType\"@\n" +
	"\rTouneyListAck\x12/\n" +
	"\btounreys\x18\x01 \x03(\v2\x13.cproto.TounreyInfoR\btounreys\"\xc8\x01\n" +
	"\vTounreyInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1b\n" +
	"\tgame_type\x18\x03 \x01(\tR\bgameType\x12\x1d\n" +
	"\n" +
	"match_type\x18\x04 \x01(\tR\tmatchType\x12\x1a\n" +
	"\bserverid\x18\x05 \x01(\tR\bserverid\x12\x16\n" +
	"\x06online\x18\x06 \x01(\x05R\x06online\x12%\n" +
	"\x0esign_condition\x18\a \x01(\tR\rsignConditionB\vZ\t../cprotob\x06proto3"

var (
	file_tourney_proto_rawDescOnce sync.Once
	file_tourney_proto_rawDescData []byte
)

func file_tourney_proto_rawDescGZIP() []byte {
	file_tourney_proto_rawDescOnce.Do(func() {
		file_tourney_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tourney_proto_rawDesc), len(file_tourney_proto_rawDesc)))
	})
	return file_tourney_proto_rawDescData
}

var file_tourney_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tourney_proto_goTypes = []any{
	(*TourneyReq)(nil),    // 0: cproto.TourneyReq
	(*TourneyAck)(nil),    // 1: cproto.TourneyAck
	(*TouneyListReq)(nil), // 2: cproto.TouneyListReq
	(*TouneyListAck)(nil), // 3: cproto.TouneyListAck
	(*TounreyInfo)(nil),   // 4: cproto.TounreyInfo
	(*anypb.Any)(nil),     // 5: google.protobuf.Any
}
var file_tourney_proto_depIdxs = []int32{
	5, // 0: cproto.TourneyReq.req:type_name -> google.protobuf.Any
	5, // 1: cproto.TourneyAck.ack:type_name -> google.protobuf.Any
	4, // 2: cproto.TouneyListAck.tounreys:type_name -> cproto.TounreyInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_tourney_proto_init() }
func file_tourney_proto_init() {
	if File_tourney_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tourney_proto_rawDesc), len(file_tourney_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tourney_proto_goTypes,
		DependencyIndexes: file_tourney_proto_depIdxs,
		MessageInfos:      file_tourney_proto_msgTypes,
	}.Build()
	File_tourney_proto = out.File
	file_tourney_proto_goTypes = nil
	file_tourney_proto_depIdxs = nil
}
