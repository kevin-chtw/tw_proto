// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tourney.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tourney_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tourney_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tourney_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tourney_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tourney_2eproto;
namespace cproto {
class TouneyListAck;
struct TouneyListAckDefaultTypeInternal;
extern TouneyListAckDefaultTypeInternal _TouneyListAck_default_instance_;
class TouneyListReq;
struct TouneyListReqDefaultTypeInternal;
extern TouneyListReqDefaultTypeInternal _TouneyListReq_default_instance_;
class TounreyInfo;
struct TounreyInfoDefaultTypeInternal;
extern TounreyInfoDefaultTypeInternal _TounreyInfo_default_instance_;
class TourneyAck;
struct TourneyAckDefaultTypeInternal;
extern TourneyAckDefaultTypeInternal _TourneyAck_default_instance_;
class TourneyReq;
struct TourneyReqDefaultTypeInternal;
extern TourneyReqDefaultTypeInternal _TourneyReq_default_instance_;
}  // namespace cproto
PROTOBUF_NAMESPACE_OPEN
template<> ::cproto::TouneyListAck* Arena::CreateMaybeMessage<::cproto::TouneyListAck>(Arena*);
template<> ::cproto::TouneyListReq* Arena::CreateMaybeMessage<::cproto::TouneyListReq>(Arena*);
template<> ::cproto::TounreyInfo* Arena::CreateMaybeMessage<::cproto::TounreyInfo>(Arena*);
template<> ::cproto::TourneyAck* Arena::CreateMaybeMessage<::cproto::TourneyAck>(Arena*);
template<> ::cproto::TourneyReq* Arena::CreateMaybeMessage<::cproto::TourneyReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cproto {

// ===================================================================

class TourneyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TourneyReq) */ {
 public:
  inline TourneyReq() : TourneyReq(nullptr) {}
  ~TourneyReq() override;
  explicit constexpr TourneyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TourneyReq(const TourneyReq& from);
  TourneyReq(TourneyReq&& from) noexcept
    : TourneyReq() {
    *this = ::std::move(from);
  }

  inline TourneyReq& operator=(const TourneyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TourneyReq& operator=(TourneyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TourneyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TourneyReq* internal_default_instance() {
    return reinterpret_cast<const TourneyReq*>(
               &_TourneyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TourneyReq& a, TourneyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TourneyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TourneyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TourneyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TourneyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TourneyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TourneyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TourneyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TourneyReq";
  }
  protected:
  explicit TourneyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // .google.protobuf.Any req = 1;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::PROTOBUF_NAMESPACE_ID::Any& req() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_req();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_req();
  void set_allocated_req(::PROTOBUF_NAMESPACE_ID::Any* req);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_req() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::PROTOBUF_NAMESPACE_ID::Any* req);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_req();

  // @@protoc_insertion_point(class_scope:cproto.TourneyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Any* req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tourney_2eproto;
};
// -------------------------------------------------------------------

class TourneyAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TourneyAck) */ {
 public:
  inline TourneyAck() : TourneyAck(nullptr) {}
  ~TourneyAck() override;
  explicit constexpr TourneyAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TourneyAck(const TourneyAck& from);
  TourneyAck(TourneyAck&& from) noexcept
    : TourneyAck() {
    *this = ::std::move(from);
  }

  inline TourneyAck& operator=(const TourneyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TourneyAck& operator=(TourneyAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TourneyAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const TourneyAck* internal_default_instance() {
    return reinterpret_cast<const TourneyAck*>(
               &_TourneyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TourneyAck& a, TourneyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TourneyAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TourneyAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TourneyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TourneyAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TourneyAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TourneyAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TourneyAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TourneyAck";
  }
  protected:
  explicit TourneyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFieldNumber = 1,
  };
  // .google.protobuf.Any ack = 1;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  const ::PROTOBUF_NAMESPACE_ID::Any& ack() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_ack();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_ack();
  void set_allocated_ack(::PROTOBUF_NAMESPACE_ID::Any* ack);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_ack() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_ack();
  public:
  void unsafe_arena_set_allocated_ack(
      ::PROTOBUF_NAMESPACE_ID::Any* ack);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_ack();

  // @@protoc_insertion_point(class_scope:cproto.TourneyAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Any* ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tourney_2eproto;
};
// -------------------------------------------------------------------

class TouneyListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TouneyListReq) */ {
 public:
  inline TouneyListReq() : TouneyListReq(nullptr) {}
  ~TouneyListReq() override;
  explicit constexpr TouneyListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TouneyListReq(const TouneyListReq& from);
  TouneyListReq(TouneyListReq&& from) noexcept
    : TouneyListReq() {
    *this = ::std::move(from);
  }

  inline TouneyListReq& operator=(const TouneyListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TouneyListReq& operator=(TouneyListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TouneyListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TouneyListReq* internal_default_instance() {
    return reinterpret_cast<const TouneyListReq*>(
               &_TouneyListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TouneyListReq& a, TouneyListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TouneyListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TouneyListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TouneyListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TouneyListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TouneyListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TouneyListReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TouneyListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TouneyListReq";
  }
  protected:
  explicit TouneyListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTypeFieldNumber = 1,
  };
  // string game_type = 1;
  void clear_game_type();
  const std::string& game_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_type();
  PROTOBUF_NODISCARD std::string* release_game_type();
  void set_allocated_game_type(std::string* game_type);
  private:
  const std::string& _internal_game_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_type(const std::string& value);
  std::string* _internal_mutable_game_type();
  public:

  // @@protoc_insertion_point(class_scope:cproto.TouneyListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tourney_2eproto;
};
// -------------------------------------------------------------------

class TouneyListAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TouneyListAck) */ {
 public:
  inline TouneyListAck() : TouneyListAck(nullptr) {}
  ~TouneyListAck() override;
  explicit constexpr TouneyListAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TouneyListAck(const TouneyListAck& from);
  TouneyListAck(TouneyListAck&& from) noexcept
    : TouneyListAck() {
    *this = ::std::move(from);
  }

  inline TouneyListAck& operator=(const TouneyListAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TouneyListAck& operator=(TouneyListAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TouneyListAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const TouneyListAck* internal_default_instance() {
    return reinterpret_cast<const TouneyListAck*>(
               &_TouneyListAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TouneyListAck& a, TouneyListAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TouneyListAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TouneyListAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TouneyListAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TouneyListAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TouneyListAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TouneyListAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TouneyListAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TouneyListAck";
  }
  protected:
  explicit TouneyListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTounreysFieldNumber = 1,
  };
  // repeated .cproto.TounreyInfo tounreys = 1;
  int tounreys_size() const;
  private:
  int _internal_tounreys_size() const;
  public:
  void clear_tounreys();
  ::cproto::TounreyInfo* mutable_tounreys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cproto::TounreyInfo >*
      mutable_tounreys();
  private:
  const ::cproto::TounreyInfo& _internal_tounreys(int index) const;
  ::cproto::TounreyInfo* _internal_add_tounreys();
  public:
  const ::cproto::TounreyInfo& tounreys(int index) const;
  ::cproto::TounreyInfo* add_tounreys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cproto::TounreyInfo >&
      tounreys() const;

  // @@protoc_insertion_point(class_scope:cproto.TouneyListAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cproto::TounreyInfo > tounreys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tourney_2eproto;
};
// -------------------------------------------------------------------

class TounreyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TounreyInfo) */ {
 public:
  inline TounreyInfo() : TounreyInfo(nullptr) {}
  ~TounreyInfo() override;
  explicit constexpr TounreyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TounreyInfo(const TounreyInfo& from);
  TounreyInfo(TounreyInfo&& from) noexcept
    : TounreyInfo() {
    *this = ::std::move(from);
  }

  inline TounreyInfo& operator=(const TounreyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TounreyInfo& operator=(TounreyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TounreyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TounreyInfo* internal_default_instance() {
    return reinterpret_cast<const TounreyInfo*>(
               &_TounreyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TounreyInfo& a, TounreyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TounreyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TounreyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TounreyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TounreyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TounreyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TounreyInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TounreyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TounreyInfo";
  }
  protected:
  explicit TounreyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kGameTypeFieldNumber = 3,
    kMatchTypeFieldNumber = 4,
    kServeridFieldNumber = 5,
    kSignConditionFieldNumber = 7,
    kIdFieldNumber = 1,
    kOnlineFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string game_type = 3;
  void clear_game_type();
  const std::string& game_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_type();
  PROTOBUF_NODISCARD std::string* release_game_type();
  void set_allocated_game_type(std::string* game_type);
  private:
  const std::string& _internal_game_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_type(const std::string& value);
  std::string* _internal_mutable_game_type();
  public:

  // string match_type = 4;
  void clear_match_type();
  const std::string& match_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_match_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_match_type();
  PROTOBUF_NODISCARD std::string* release_match_type();
  void set_allocated_match_type(std::string* match_type);
  private:
  const std::string& _internal_match_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_match_type(const std::string& value);
  std::string* _internal_mutable_match_type();
  public:

  // string serverid = 5;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // string sign_condition = 7;
  void clear_sign_condition();
  const std::string& sign_condition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign_condition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign_condition();
  PROTOBUF_NODISCARD std::string* release_sign_condition();
  void set_allocated_sign_condition(std::string* sign_condition);
  private:
  const std::string& _internal_sign_condition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign_condition(const std::string& value);
  std::string* _internal_mutable_sign_condition();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 online = 6;
  void clear_online();
  int32_t online() const;
  void set_online(int32_t value);
  private:
  int32_t _internal_online() const;
  void _internal_set_online(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.TounreyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_condition_;
  int32_t id_;
  int32_t online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tourney_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TourneyReq

// .google.protobuf.Any req = 1;
inline bool TourneyReq::_internal_has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline bool TourneyReq::has_req() const {
  return _internal_has_req();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TourneyReq::_internal_req() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = req_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TourneyReq::req() const {
  // @@protoc_insertion_point(field_get:cproto.TourneyReq.req)
  return _internal_req();
}
inline void TourneyReq::unsafe_arena_set_allocated_req(
    ::PROTOBUF_NAMESPACE_ID::Any* req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.TourneyReq.req)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyReq::release_req() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = req_;
  req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyReq::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:cproto.TourneyReq.req)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyReq::_internal_mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    req_ = p;
  }
  return req_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyReq::mutable_req() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_req();
  // @@protoc_insertion_point(field_mutable:cproto.TourneyReq.req)
  return _msg;
}
inline void TourneyReq::set_allocated_req(::PROTOBUF_NAMESPACE_ID::Any* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req));
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:cproto.TourneyReq.req)
}

// -------------------------------------------------------------------

// TourneyAck

// .google.protobuf.Any ack = 1;
inline bool TourneyAck::_internal_has_ack() const {
  return this != internal_default_instance() && ack_ != nullptr;
}
inline bool TourneyAck::has_ack() const {
  return _internal_has_ack();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TourneyAck::_internal_ack() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = ack_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TourneyAck::ack() const {
  // @@protoc_insertion_point(field_get:cproto.TourneyAck.ack)
  return _internal_ack();
}
inline void TourneyAck::unsafe_arena_set_allocated_ack(
    ::PROTOBUF_NAMESPACE_ID::Any* ack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack_);
  }
  ack_ = ack;
  if (ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.TourneyAck.ack)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyAck::release_ack() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = ack_;
  ack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyAck::unsafe_arena_release_ack() {
  // @@protoc_insertion_point(field_release:cproto.TourneyAck.ack)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = ack_;
  ack_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyAck::_internal_mutable_ack() {
  
  if (ack_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    ack_ = p;
  }
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TourneyAck::mutable_ack() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_ack();
  // @@protoc_insertion_point(field_mutable:cproto.TourneyAck.ack)
  return _msg;
}
inline void TourneyAck::set_allocated_ack(::PROTOBUF_NAMESPACE_ID::Any* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack_);
  }
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack));
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    
  } else {
    
  }
  ack_ = ack;
  // @@protoc_insertion_point(field_set_allocated:cproto.TourneyAck.ack)
}

// -------------------------------------------------------------------

// TouneyListReq

// string game_type = 1;
inline void TouneyListReq::clear_game_type() {
  game_type_.ClearToEmpty();
}
inline const std::string& TouneyListReq::game_type() const {
  // @@protoc_insertion_point(field_get:cproto.TouneyListReq.game_type)
  return _internal_game_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TouneyListReq::set_game_type(ArgT0&& arg0, ArgT... args) {
 
 game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TouneyListReq.game_type)
}
inline std::string* TouneyListReq::mutable_game_type() {
  std::string* _s = _internal_mutable_game_type();
  // @@protoc_insertion_point(field_mutable:cproto.TouneyListReq.game_type)
  return _s;
}
inline const std::string& TouneyListReq::_internal_game_type() const {
  return game_type_.Get();
}
inline void TouneyListReq::_internal_set_game_type(const std::string& value) {
  
  game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TouneyListReq::_internal_mutable_game_type() {
  
  return game_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TouneyListReq::release_game_type() {
  // @@protoc_insertion_point(field_release:cproto.TouneyListReq.game_type)
  return game_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TouneyListReq::set_allocated_game_type(std::string* game_type) {
  if (game_type != nullptr) {
    
  } else {
    
  }
  game_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TouneyListReq.game_type)
}

// -------------------------------------------------------------------

// TouneyListAck

// repeated .cproto.TounreyInfo tounreys = 1;
inline int TouneyListAck::_internal_tounreys_size() const {
  return tounreys_.size();
}
inline int TouneyListAck::tounreys_size() const {
  return _internal_tounreys_size();
}
inline void TouneyListAck::clear_tounreys() {
  tounreys_.Clear();
}
inline ::cproto::TounreyInfo* TouneyListAck::mutable_tounreys(int index) {
  // @@protoc_insertion_point(field_mutable:cproto.TouneyListAck.tounreys)
  return tounreys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cproto::TounreyInfo >*
TouneyListAck::mutable_tounreys() {
  // @@protoc_insertion_point(field_mutable_list:cproto.TouneyListAck.tounreys)
  return &tounreys_;
}
inline const ::cproto::TounreyInfo& TouneyListAck::_internal_tounreys(int index) const {
  return tounreys_.Get(index);
}
inline const ::cproto::TounreyInfo& TouneyListAck::tounreys(int index) const {
  // @@protoc_insertion_point(field_get:cproto.TouneyListAck.tounreys)
  return _internal_tounreys(index);
}
inline ::cproto::TounreyInfo* TouneyListAck::_internal_add_tounreys() {
  return tounreys_.Add();
}
inline ::cproto::TounreyInfo* TouneyListAck::add_tounreys() {
  ::cproto::TounreyInfo* _add = _internal_add_tounreys();
  // @@protoc_insertion_point(field_add:cproto.TouneyListAck.tounreys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cproto::TounreyInfo >&
TouneyListAck::tounreys() const {
  // @@protoc_insertion_point(field_list:cproto.TouneyListAck.tounreys)
  return tounreys_;
}

// -------------------------------------------------------------------

// TounreyInfo

// int32 id = 1;
inline void TounreyInfo::clear_id() {
  id_ = 0;
}
inline int32_t TounreyInfo::_internal_id() const {
  return id_;
}
inline int32_t TounreyInfo::id() const {
  // @@protoc_insertion_point(field_get:cproto.TounreyInfo.id)
  return _internal_id();
}
inline void TounreyInfo::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void TounreyInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cproto.TounreyInfo.id)
}

// string name = 2;
inline void TounreyInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TounreyInfo::name() const {
  // @@protoc_insertion_point(field_get:cproto.TounreyInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TounreyInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TounreyInfo.name)
}
inline std::string* TounreyInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cproto.TounreyInfo.name)
  return _s;
}
inline const std::string& TounreyInfo::_internal_name() const {
  return name_.Get();
}
inline void TounreyInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TounreyInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TounreyInfo::release_name() {
  // @@protoc_insertion_point(field_release:cproto.TounreyInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TounreyInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TounreyInfo.name)
}

// string game_type = 3;
inline void TounreyInfo::clear_game_type() {
  game_type_.ClearToEmpty();
}
inline const std::string& TounreyInfo::game_type() const {
  // @@protoc_insertion_point(field_get:cproto.TounreyInfo.game_type)
  return _internal_game_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TounreyInfo::set_game_type(ArgT0&& arg0, ArgT... args) {
 
 game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TounreyInfo.game_type)
}
inline std::string* TounreyInfo::mutable_game_type() {
  std::string* _s = _internal_mutable_game_type();
  // @@protoc_insertion_point(field_mutable:cproto.TounreyInfo.game_type)
  return _s;
}
inline const std::string& TounreyInfo::_internal_game_type() const {
  return game_type_.Get();
}
inline void TounreyInfo::_internal_set_game_type(const std::string& value) {
  
  game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TounreyInfo::_internal_mutable_game_type() {
  
  return game_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TounreyInfo::release_game_type() {
  // @@protoc_insertion_point(field_release:cproto.TounreyInfo.game_type)
  return game_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TounreyInfo::set_allocated_game_type(std::string* game_type) {
  if (game_type != nullptr) {
    
  } else {
    
  }
  game_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (game_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TounreyInfo.game_type)
}

// string match_type = 4;
inline void TounreyInfo::clear_match_type() {
  match_type_.ClearToEmpty();
}
inline const std::string& TounreyInfo::match_type() const {
  // @@protoc_insertion_point(field_get:cproto.TounreyInfo.match_type)
  return _internal_match_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TounreyInfo::set_match_type(ArgT0&& arg0, ArgT... args) {
 
 match_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TounreyInfo.match_type)
}
inline std::string* TounreyInfo::mutable_match_type() {
  std::string* _s = _internal_mutable_match_type();
  // @@protoc_insertion_point(field_mutable:cproto.TounreyInfo.match_type)
  return _s;
}
inline const std::string& TounreyInfo::_internal_match_type() const {
  return match_type_.Get();
}
inline void TounreyInfo::_internal_set_match_type(const std::string& value) {
  
  match_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TounreyInfo::_internal_mutable_match_type() {
  
  return match_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TounreyInfo::release_match_type() {
  // @@protoc_insertion_point(field_release:cproto.TounreyInfo.match_type)
  return match_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TounreyInfo::set_allocated_match_type(std::string* match_type) {
  if (match_type != nullptr) {
    
  } else {
    
  }
  match_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (match_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    match_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TounreyInfo.match_type)
}

// string serverid = 5;
inline void TounreyInfo::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& TounreyInfo::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.TounreyInfo.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TounreyInfo::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TounreyInfo.serverid)
}
inline std::string* TounreyInfo::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.TounreyInfo.serverid)
  return _s;
}
inline const std::string& TounreyInfo::_internal_serverid() const {
  return serverid_.Get();
}
inline void TounreyInfo::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TounreyInfo::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TounreyInfo::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.TounreyInfo.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TounreyInfo::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TounreyInfo.serverid)
}

// int32 online = 6;
inline void TounreyInfo::clear_online() {
  online_ = 0;
}
inline int32_t TounreyInfo::_internal_online() const {
  return online_;
}
inline int32_t TounreyInfo::online() const {
  // @@protoc_insertion_point(field_get:cproto.TounreyInfo.online)
  return _internal_online();
}
inline void TounreyInfo::_internal_set_online(int32_t value) {
  
  online_ = value;
}
inline void TounreyInfo::set_online(int32_t value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:cproto.TounreyInfo.online)
}

// string sign_condition = 7;
inline void TounreyInfo::clear_sign_condition() {
  sign_condition_.ClearToEmpty();
}
inline const std::string& TounreyInfo::sign_condition() const {
  // @@protoc_insertion_point(field_get:cproto.TounreyInfo.sign_condition)
  return _internal_sign_condition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TounreyInfo::set_sign_condition(ArgT0&& arg0, ArgT... args) {
 
 sign_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TounreyInfo.sign_condition)
}
inline std::string* TounreyInfo::mutable_sign_condition() {
  std::string* _s = _internal_mutable_sign_condition();
  // @@protoc_insertion_point(field_mutable:cproto.TounreyInfo.sign_condition)
  return _s;
}
inline const std::string& TounreyInfo::_internal_sign_condition() const {
  return sign_condition_.Get();
}
inline void TounreyInfo::_internal_set_sign_condition(const std::string& value) {
  
  sign_condition_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TounreyInfo::_internal_mutable_sign_condition() {
  
  return sign_condition_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TounreyInfo::release_sign_condition() {
  // @@protoc_insertion_point(field_release:cproto.TounreyInfo.sign_condition)
  return sign_condition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TounreyInfo::set_allocated_sign_condition(std::string* sign_condition) {
  if (sign_condition != nullptr) {
    
  } else {
    
  }
  sign_condition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_condition,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sign_condition_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sign_condition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TounreyInfo.sign_condition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tourney_2eproto
