// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cproto {
constexpr GameReq::GameReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serverid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , matchid_(0)
  , tableid_(0){}
struct GameReqDefaultTypeInternal {
  constexpr GameReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameReqDefaultTypeInternal() {}
  union {
    GameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameReqDefaultTypeInternal _GameReq_default_instance_;
constexpr GameAck::GameAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serverid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ack_(nullptr)
  , matchid_(0)
  , tableid_(0){}
struct GameAckDefaultTypeInternal {
  constexpr GameAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameAckDefaultTypeInternal() {}
  union {
    GameAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameAckDefaultTypeInternal _GameAck_default_instance_;
constexpr EnterGameReq::EnterGameReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EnterGameReqDefaultTypeInternal {
  constexpr EnterGameReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnterGameReqDefaultTypeInternal() {}
  union {
    EnterGameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnterGameReqDefaultTypeInternal _EnterGameReq_default_instance_;
constexpr GameReadyReq::GameReadyReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ready_(false){}
struct GameReadyReqDefaultTypeInternal {
  constexpr GameReadyReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameReadyReqDefaultTypeInternal() {}
  union {
    GameReadyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameReadyReqDefaultTypeInternal _GameReadyReq_default_instance_;
constexpr GameDissolveReq::GameDissolveReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agree_(false){}
struct GameDissolveReqDefaultTypeInternal {
  constexpr GameDissolveReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameDissolveReqDefaultTypeInternal() {}
  union {
    GameDissolveReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameDissolveReqDefaultTypeInternal _GameDissolveReq_default_instance_;
constexpr EnterGameAck_FdpropertyEntry_DoNotUse::EnterGameAck_FdpropertyEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EnterGameAck_FdpropertyEntry_DoNotUseDefaultTypeInternal {
  constexpr EnterGameAck_FdpropertyEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnterGameAck_FdpropertyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EnterGameAck_FdpropertyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnterGameAck_FdpropertyEntry_DoNotUseDefaultTypeInternal _EnterGameAck_FdpropertyEntry_DoNotUse_default_instance_;
constexpr EnterGameAck::EnterGameAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fdproperty_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , property_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , score_base_(int64_t{0})
  , tableid_(0)
  , game_count_(0)
  , cur_game_count_(0)
  , player_count_(0){}
struct EnterGameAckDefaultTypeInternal {
  constexpr EnterGameAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnterGameAckDefaultTypeInternal() {}
  union {
    EnterGameAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnterGameAckDefaultTypeInternal _EnterGameAck_default_instance_;
constexpr TablePlayerAck::TablePlayerAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , diamond_(int64_t{0})
  , vip_(0)
  , seat_(0)
  , ready_(false){}
struct TablePlayerAckDefaultTypeInternal {
  constexpr TablePlayerAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TablePlayerAckDefaultTypeInternal() {}
  union {
    TablePlayerAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TablePlayerAckDefaultTypeInternal _TablePlayerAck_default_instance_;
constexpr TableMsgReq::TableMsgReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TableMsgReqDefaultTypeInternal {
  constexpr TableMsgReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableMsgReqDefaultTypeInternal() {}
  union {
    TableMsgReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableMsgReqDefaultTypeInternal _TableMsgReq_default_instance_;
constexpr TableMsgAck::TableMsgAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TableMsgAckDefaultTypeInternal {
  constexpr TableMsgAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableMsgAckDefaultTypeInternal() {}
  union {
    TableMsgAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableMsgAckDefaultTypeInternal _TableMsgAck_default_instance_;
constexpr GameReadyAck::GameReadyAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seat_(0)
  , ready_(false){}
struct GameReadyAckDefaultTypeInternal {
  constexpr GameReadyAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameReadyAckDefaultTypeInternal() {}
  union {
    GameReadyAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameReadyAckDefaultTypeInternal _GameReadyAck_default_instance_;
constexpr GameDissolveAck_AgreedEntry_DoNotUse::GameDissolveAck_AgreedEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GameDissolveAck_AgreedEntry_DoNotUseDefaultTypeInternal {
  constexpr GameDissolveAck_AgreedEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameDissolveAck_AgreedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GameDissolveAck_AgreedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameDissolveAck_AgreedEntry_DoNotUseDefaultTypeInternal _GameDissolveAck_AgreedEntry_DoNotUse_default_instance_;
constexpr GameDissolveAck::GameDissolveAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agreed_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , starttime_(int64_t{0})
  , endtime_(int64_t{0})
  , seat_(0){}
struct GameDissolveAckDefaultTypeInternal {
  constexpr GameDissolveAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameDissolveAckDefaultTypeInternal() {}
  union {
    GameDissolveAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameDissolveAckDefaultTypeInternal _GameDissolveAck_default_instance_;
constexpr GameDissolveResultAck::GameDissolveResultAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dissovle_(false){}
struct GameDissolveResultAckDefaultTypeInternal {
  constexpr GameDissolveResultAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameDissolveResultAckDefaultTypeInternal() {}
  union {
    GameDissolveResultAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameDissolveResultAckDefaultTypeInternal _GameDissolveResultAck_default_instance_;
constexpr GameBeginAck::GameBeginAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cur_game_count_(0){}
struct GameBeginAckDefaultTypeInternal {
  constexpr GameBeginAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameBeginAckDefaultTypeInternal() {}
  union {
    GameBeginAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameBeginAckDefaultTypeInternal _GameBeginAck_default_instance_;
constexpr GameOverAck::GameOverAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ready_()
  , cur_game_count_(0){}
struct GameOverAckDefaultTypeInternal {
  constexpr GameOverAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameOverAckDefaultTypeInternal() {}
  union {
    GameOverAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameOverAckDefaultTypeInternal _GameOverAck_default_instance_;
constexpr HisBeginAck::HisBeginAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HisBeginAckDefaultTypeInternal {
  constexpr HisBeginAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HisBeginAckDefaultTypeInternal() {}
  union {
    HisBeginAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HisBeginAckDefaultTypeInternal _HisBeginAck_default_instance_;
constexpr HisEndAck::HisEndAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HisEndAckDefaultTypeInternal {
  constexpr HisEndAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HisEndAckDefaultTypeInternal() {}
  union {
    HisEndAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HisEndAckDefaultTypeInternal _HisEndAck_default_instance_;
}  // namespace cproto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_2eproto = nullptr;

const uint32_t TableStruct_game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameReq, matchid_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameReq, tableid_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameReq, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameAck, serverid_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameAck, matchid_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameAck, tableid_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameAck, ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameReadyReq, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveReq, agree_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck_FdpropertyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck_FdpropertyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck_FdpropertyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck_FdpropertyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, tableid_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, score_base_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, game_count_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, cur_game_count_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, player_count_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, property_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, creator_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, desn_),
  PROTOBUF_FIELD_OFFSET(::cproto::EnterGameAck, fdproperty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, uid_),
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, nickname_),
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, avatar_),
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, vip_),
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, diamond_),
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, seat_),
  PROTOBUF_FIELD_OFFSET(::cproto::TablePlayerAck, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TableMsgReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TableMsgReq, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TableMsgAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TableMsgAck, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameReadyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameReadyAck, seat_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameReadyAck, ready_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck_AgreedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck_AgreedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck_AgreedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck_AgreedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck, starttime_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck, endtime_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck, seat_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveAck, agreed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveResultAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameDissolveResultAck, dissovle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameBeginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameBeginAck, cur_game_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::GameOverAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::GameOverAck, cur_game_count_),
  PROTOBUF_FIELD_OFFSET(::cproto::GameOverAck, ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::HisBeginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::HisEndAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cproto::GameReq)},
  { 10, -1, -1, sizeof(::cproto::GameAck)},
  { 20, -1, -1, sizeof(::cproto::EnterGameReq)},
  { 26, -1, -1, sizeof(::cproto::GameReadyReq)},
  { 33, -1, -1, sizeof(::cproto::GameDissolveReq)},
  { 40, 48, -1, sizeof(::cproto::EnterGameAck_FdpropertyEntry_DoNotUse)},
  { 50, -1, -1, sizeof(::cproto::EnterGameAck)},
  { 65, -1, -1, sizeof(::cproto::TablePlayerAck)},
  { 78, -1, -1, sizeof(::cproto::TableMsgReq)},
  { 85, -1, -1, sizeof(::cproto::TableMsgAck)},
  { 92, -1, -1, sizeof(::cproto::GameReadyAck)},
  { 100, 108, -1, sizeof(::cproto::GameDissolveAck_AgreedEntry_DoNotUse)},
  { 110, -1, -1, sizeof(::cproto::GameDissolveAck)},
  { 120, -1, -1, sizeof(::cproto::GameDissolveResultAck)},
  { 127, -1, -1, sizeof(::cproto::GameBeginAck)},
  { 134, -1, -1, sizeof(::cproto::GameOverAck)},
  { 142, -1, -1, sizeof(::cproto::HisBeginAck)},
  { 148, -1, -1, sizeof(::cproto::HisEndAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_EnterGameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameReadyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameDissolveReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_EnterGameAck_FdpropertyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_EnterGameAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TablePlayerAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TableMsgReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TableMsgAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameReadyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameDissolveAck_AgreedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameDissolveAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameDissolveResultAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameBeginAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_GameOverAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_HisBeginAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_HisEndAck_default_instance_),
};

const char descriptor_table_protodef_game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngame.proto\022\006cproto\032\031google/protobuf/an"
  "y.proto\"`\n\007GameReq\022\020\n\010serverid\030\001 \001(\t\022\017\n\007"
  "matchid\030\002 \001(\005\022\017\n\007tableid\030\003 \001(\005\022!\n\003req\030\004 "
  "\001(\0132\024.google.protobuf.Any\"`\n\007GameAck\022\020\n\010"
  "serverid\030\001 \001(\t\022\017\n\007matchid\030\002 \001(\005\022\017\n\007table"
  "id\030\003 \001(\005\022!\n\003ack\030\004 \001(\0132\024.google.protobuf."
  "Any\"\016\n\014EnterGameReq\"\035\n\014GameReadyReq\022\r\n\005r"
  "eady\030\001 \001(\010\" \n\017GameDissolveReq\022\r\n\005agree\030\001"
  " \001(\010\"\223\002\n\014EnterGameAck\022\017\n\007tableid\030\001 \001(\005\022\022"
  "\n\nscore_base\030\002 \001(\003\022\022\n\ngame_count\030\003 \001(\005\022\026"
  "\n\016cur_game_count\030\004 \001(\005\022\024\n\014player_count\030\005"
  " \001(\005\022\020\n\010property\030\006 \001(\t\022\017\n\007creator\030\007 \001(\t\022"
  "\014\n\004desn\030\010 \001(\t\0228\n\nfdproperty\030\t \003(\0132$.cpro"
  "to.EnterGameAck.FdpropertyEntry\0321\n\017Fdpro"
  "pertyEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\002"
  "8\001\"z\n\016TablePlayerAck\022\013\n\003uid\030\001 \001(\t\022\020\n\010nic"
  "kname\030\002 \001(\t\022\016\n\006avatar\030\003 \001(\t\022\013\n\003vip\030\004 \001(\005"
  "\022\017\n\007diamond\030\005 \001(\003\022\014\n\004seat\030\006 \001(\005\022\r\n\005ready"
  "\030\007 \001(\010\"\032\n\013TableMsgReq\022\013\n\003msg\030\001 \001(\014\"\032\n\013Ta"
  "bleMsgAck\022\013\n\003msg\030\001 \001(\014\"+\n\014GameReadyAck\022\014"
  "\n\004seat\030\001 \001(\005\022\r\n\005ready\030\002 \001(\010\"\247\001\n\017GameDiss"
  "olveAck\022\021\n\tstarttime\030\001 \001(\003\022\017\n\007endtime\030\002 "
  "\001(\003\022\014\n\004seat\030\003 \001(\005\0223\n\006agreed\030\004 \003(\0132#.cpro"
  "to.GameDissolveAck.AgreedEntry\032-\n\013Agreed"
  "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\010:\0028\001\")\n"
  "\025GameDissolveResultAck\022\020\n\010dissovle\030\001 \001(\010"
  "\"&\n\014GameBeginAck\022\026\n\016cur_game_count\030\001 \001(\005"
  "\"4\n\013GameOverAck\022\026\n\016cur_game_count\030\001 \001(\005\022"
  "\r\n\005ready\030\002 \003(\010\"\r\n\013HisBeginAck\"\013\n\tHisEndA"
  "ckB\013Z\t../cprotob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto = {
  false, false, 1183, descriptor_table_protodef_game_2eproto, "game.proto", 
  &descriptor_table_game_2eproto_once, descriptor_table_game_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_game_2eproto::offsets,
  file_level_metadata_game_2eproto, file_level_enum_descriptors_game_2eproto, file_level_service_descriptors_game_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_game_2eproto_getter() {
  return &descriptor_table_game_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_2eproto(&descriptor_table_game_2eproto);
namespace cproto {

// ===================================================================

class GameReq::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& req(const GameReq* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
GameReq::_Internal::req(const GameReq* msg) {
  return *msg->req_;
}
void GameReq::clear_req() {
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
GameReq::GameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameReq)
}
GameReq::GameReq(const GameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.req_);
  } else {
    req_ = nullptr;
  }
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:cproto.GameReq)
}

inline void GameReq::SharedCtor() {
serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&req_)) + sizeof(tableid_));
}

GameReq::~GameReq() {
  // @@protoc_insertion_point(destructor:cproto.GameReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
}

void GameReq::ArenaDtor(void* object) {
  GameReq* _this = reinterpret_cast< GameReq* >(object);
  (void)_this;
}
void GameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(tableid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.GameReq.serverid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.GameReq.serverid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serverid(), target);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchid(), target);
  }

  // int32 tableid = 3;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tableid(), target);
  }

  // .google.protobuf.Any req = 4;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameReq)
  return target;
}

size_t GameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // .google.protobuf.Any req = 4;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  // int32 tableid = 3;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameReq::GetClassData() const { return &_class_data_; }

void GameReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameReq *>(to)->MergeFrom(
      static_cast<const GameReq &>(from));
}


void GameReq::MergeFrom(const GameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serverid().empty()) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_req());
  }
  if (from._internal_matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameReq::CopyFrom(const GameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReq::IsInitialized() const {
  return true;
}

void GameReq::InternalSwap(GameReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverid_, lhs_arena,
      &other->serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameReq, tableid_)
      + sizeof(GameReq::tableid_)
      - PROTOBUF_FIELD_OFFSET(GameReq, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[0]);
}

// ===================================================================

class GameAck::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& ack(const GameAck* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
GameAck::_Internal::ack(const GameAck* msg) {
  return *msg->ack_;
}
void GameAck::clear_ack() {
  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
}
GameAck::GameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameAck)
}
GameAck::GameAck(const GameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ack()) {
    ack_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.ack_);
  } else {
    ack_ = nullptr;
  }
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(tableid_));
  // @@protoc_insertion_point(copy_constructor:cproto.GameAck)
}

inline void GameAck::SharedCtor() {
serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ack_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tableid_) -
    reinterpret_cast<char*>(&ack_)) + sizeof(tableid_));
}

GameAck::~GameAck() {
  // @@protoc_insertion_point(destructor:cproto.GameAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ack_;
}

void GameAck::ArenaDtor(void* object) {
  GameAck* _this = reinterpret_cast< GameAck* >(object);
  (void)_this;
}
void GameAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tableid_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(tableid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.GameAck.serverid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tableid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any ack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.GameAck.serverid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serverid(), target);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchid(), target);
  }

  // int32 tableid = 3;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tableid(), target);
  }

  // .google.protobuf.Any ack = 4;
  if (this->_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameAck)
  return target;
}

size_t GameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // .google.protobuf.Any ack = 4;
  if (this->_internal_has_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ack_);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  // int32 tableid = 3;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameAck::GetClassData() const { return &_class_data_; }

void GameAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameAck *>(to)->MergeFrom(
      static_cast<const GameAck &>(from));
}


void GameAck::MergeFrom(const GameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serverid().empty()) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_has_ack()) {
    _internal_mutable_ack()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_ack());
  }
  if (from._internal_matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameAck::CopyFrom(const GameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAck::IsInitialized() const {
  return true;
}

void GameAck::InternalSwap(GameAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverid_, lhs_arena,
      &other->serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameAck, tableid_)
      + sizeof(GameAck::tableid_)
      - PROTOBUF_FIELD_OFFSET(GameAck, ack_)>(
          reinterpret_cast<char*>(&ack_),
          reinterpret_cast<char*>(&other->ack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[1]);
}

// ===================================================================

class EnterGameReq::_Internal {
 public:
};

EnterGameReq::EnterGameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.EnterGameReq)
}
EnterGameReq::EnterGameReq(const EnterGameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.EnterGameReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterGameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterGameReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EnterGameReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[2]);
}

// ===================================================================

class GameReadyReq::_Internal {
 public:
};

GameReadyReq::GameReadyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameReadyReq)
}
GameReadyReq::GameReadyReq(const GameReadyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ready_ = from.ready_;
  // @@protoc_insertion_point(copy_constructor:cproto.GameReadyReq)
}

inline void GameReadyReq::SharedCtor() {
ready_ = false;
}

GameReadyReq::~GameReadyReq() {
  // @@protoc_insertion_point(destructor:cproto.GameReadyReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameReadyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameReadyReq::ArenaDtor(void* object) {
  GameReadyReq* _this = reinterpret_cast< GameReadyReq* >(object);
  (void)_this;
}
void GameReadyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameReadyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameReadyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameReadyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameReadyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameReadyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameReadyReq)
  return target;
}

size_t GameReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameReadyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ready = 1;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameReadyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameReadyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameReadyReq::GetClassData() const { return &_class_data_; }

void GameReadyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameReadyReq *>(to)->MergeFrom(
      static_cast<const GameReadyReq &>(from));
}


void GameReadyReq::MergeFrom(const GameReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameReadyReq::CopyFrom(const GameReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReadyReq::IsInitialized() const {
  return true;
}

void GameReadyReq::InternalSwap(GameReadyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ready_, other->ready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameReadyReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[3]);
}

// ===================================================================

class GameDissolveReq::_Internal {
 public:
};

GameDissolveReq::GameDissolveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameDissolveReq)
}
GameDissolveReq::GameDissolveReq(const GameDissolveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agree_ = from.agree_;
  // @@protoc_insertion_point(copy_constructor:cproto.GameDissolveReq)
}

inline void GameDissolveReq::SharedCtor() {
agree_ = false;
}

GameDissolveReq::~GameDissolveReq() {
  // @@protoc_insertion_point(destructor:cproto.GameDissolveReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameDissolveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameDissolveReq::ArenaDtor(void* object) {
  GameDissolveReq* _this = reinterpret_cast< GameDissolveReq* >(object);
  (void)_this;
}
void GameDissolveReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameDissolveReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameDissolveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameDissolveReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agree_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameDissolveReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool agree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameDissolveReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameDissolveReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->_internal_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_agree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameDissolveReq)
  return target;
}

size_t GameDissolveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameDissolveReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool agree = 1;
  if (this->_internal_agree() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameDissolveReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameDissolveReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameDissolveReq::GetClassData() const { return &_class_data_; }

void GameDissolveReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameDissolveReq *>(to)->MergeFrom(
      static_cast<const GameDissolveReq &>(from));
}


void GameDissolveReq::MergeFrom(const GameDissolveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameDissolveReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_agree() != 0) {
    _internal_set_agree(from._internal_agree());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameDissolveReq::CopyFrom(const GameDissolveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameDissolveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDissolveReq::IsInitialized() const {
  return true;
}

void GameDissolveReq::InternalSwap(GameDissolveReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(agree_, other->agree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameDissolveReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[4]);
}

// ===================================================================

EnterGameAck_FdpropertyEntry_DoNotUse::EnterGameAck_FdpropertyEntry_DoNotUse() {}
EnterGameAck_FdpropertyEntry_DoNotUse::EnterGameAck_FdpropertyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EnterGameAck_FdpropertyEntry_DoNotUse::MergeFrom(const EnterGameAck_FdpropertyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EnterGameAck_FdpropertyEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[5]);
}

// ===================================================================

class EnterGameAck::_Internal {
 public:
};

EnterGameAck::EnterGameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fdproperty_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.EnterGameAck)
}
EnterGameAck::EnterGameAck(const EnterGameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fdproperty_.MergeFrom(from.fdproperty_);
  property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    property_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_property().empty()) {
    property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property(), 
      GetArenaForAllocation());
  }
  creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_creator(), 
      GetArenaForAllocation());
  }
  desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desn().empty()) {
    desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desn(), 
      GetArenaForAllocation());
  }
  ::memcpy(&score_base_, &from.score_base_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&score_base_)) + sizeof(player_count_));
  // @@protoc_insertion_point(copy_constructor:cproto.EnterGameAck)
}

inline void EnterGameAck::SharedCtor() {
property_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  property_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
creator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_base_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&score_base_)) + sizeof(player_count_));
}

EnterGameAck::~EnterGameAck() {
  // @@protoc_insertion_point(destructor:cproto.EnterGameAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnterGameAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  creator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EnterGameAck::ArenaDtor(void* object) {
  EnterGameAck* _this = reinterpret_cast< EnterGameAck* >(object);
  (void)_this;
  _this->fdproperty_. ~MapField();
}
inline void EnterGameAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &EnterGameAck::ArenaDtor);
  }
}
void EnterGameAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnterGameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.EnterGameAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fdproperty_.Clear();
  property_.ClearToEmpty();
  creator_.ClearToEmpty();
  desn_.ClearToEmpty();
  ::memset(&score_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_count_) -
      reinterpret_cast<char*>(&score_base_)) + sizeof(player_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterGameAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tableid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 score_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          score_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 game_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cur_game_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          cur_game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_property();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.EnterGameAck.property"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_creator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.EnterGameAck.creator"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_desn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.EnterGameAck.desn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> fdproperty = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fdproperty_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterGameAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.EnterGameAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  // int64 score_base = 2;
  if (this->_internal_score_base() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_score_base(), target);
  }

  // int32 game_count = 3;
  if (this->_internal_game_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_count(), target);
  }

  // int32 cur_game_count = 4;
  if (this->_internal_cur_game_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur_game_count(), target);
  }

  // int32 player_count = 5;
  if (this->_internal_player_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_player_count(), target);
  }

  // string property = 6;
  if (!this->_internal_property().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_property().data(), static_cast<int>(this->_internal_property().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.EnterGameAck.property");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_property(), target);
  }

  // string creator = 7;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.EnterGameAck.creator");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_creator(), target);
  }

  // string desn = 8;
  if (!this->_internal_desn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desn().data(), static_cast<int>(this->_internal_desn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.EnterGameAck.desn");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_desn(), target);
  }

  // map<string, int32> fdproperty = 9;
  if (!this->_internal_fdproperty().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "cproto.EnterGameAck.FdpropertyEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fdproperty().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fdproperty().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_fdproperty().begin();
          it != this->_internal_fdproperty().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EnterGameAck_FdpropertyEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_fdproperty().begin();
          it != this->_internal_fdproperty().end(); ++it) {
        target = EnterGameAck_FdpropertyEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.EnterGameAck)
  return target;
}

size_t EnterGameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.EnterGameAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> fdproperty = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fdproperty_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_fdproperty().begin();
      it != this->_internal_fdproperty().end(); ++it) {
    total_size += EnterGameAck_FdpropertyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string property = 6;
  if (!this->_internal_property().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_property());
  }

  // string creator = 7;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // string desn = 8;
  if (!this->_internal_desn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desn());
  }

  // int64 score_base = 2;
  if (this->_internal_score_base() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_score_base());
  }

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  // int32 game_count = 3;
  if (this->_internal_game_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_game_count());
  }

  // int32 cur_game_count = 4;
  if (this->_internal_cur_game_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cur_game_count());
  }

  // int32 player_count = 5;
  if (this->_internal_player_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_player_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterGameAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnterGameAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterGameAck::GetClassData() const { return &_class_data_; }

void EnterGameAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnterGameAck *>(to)->MergeFrom(
      static_cast<const EnterGameAck &>(from));
}


void EnterGameAck::MergeFrom(const EnterGameAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.EnterGameAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fdproperty_.MergeFrom(from.fdproperty_);
  if (!from._internal_property().empty()) {
    _internal_set_property(from._internal_property());
  }
  if (!from._internal_creator().empty()) {
    _internal_set_creator(from._internal_creator());
  }
  if (!from._internal_desn().empty()) {
    _internal_set_desn(from._internal_desn());
  }
  if (from._internal_score_base() != 0) {
    _internal_set_score_base(from._internal_score_base());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  if (from._internal_game_count() != 0) {
    _internal_set_game_count(from._internal_game_count());
  }
  if (from._internal_cur_game_count() != 0) {
    _internal_set_cur_game_count(from._internal_cur_game_count());
  }
  if (from._internal_player_count() != 0) {
    _internal_set_player_count(from._internal_player_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterGameAck::CopyFrom(const EnterGameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.EnterGameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameAck::IsInitialized() const {
  return true;
}

void EnterGameAck::InternalSwap(EnterGameAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fdproperty_.InternalSwap(&other->fdproperty_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_, lhs_arena,
      &other->property_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &creator_, lhs_arena,
      &other->creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desn_, lhs_arena,
      &other->desn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterGameAck, player_count_)
      + sizeof(EnterGameAck::player_count_)
      - PROTOBUF_FIELD_OFFSET(EnterGameAck, score_base_)>(
          reinterpret_cast<char*>(&score_base_),
          reinterpret_cast<char*>(&other->score_base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterGameAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[6]);
}

// ===================================================================

class TablePlayerAck::_Internal {
 public:
};

TablePlayerAck::TablePlayerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TablePlayerAck)
}
TablePlayerAck::TablePlayerAck(const TablePlayerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uid(), 
      GetArenaForAllocation());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  ::memcpy(&diamond_, &from.diamond_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&diamond_)) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:cproto.TablePlayerAck)
}

inline void TablePlayerAck::SharedCtor() {
uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&diamond_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&diamond_)) + sizeof(ready_));
}

TablePlayerAck::~TablePlayerAck() {
  // @@protoc_insertion_point(destructor:cproto.TablePlayerAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TablePlayerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TablePlayerAck::ArenaDtor(void* object) {
  TablePlayerAck* _this = reinterpret_cast< TablePlayerAck* >(object);
  (void)_this;
}
void TablePlayerAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TablePlayerAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TablePlayerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TablePlayerAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.ClearToEmpty();
  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  ::memset(&diamond_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&diamond_)) + sizeof(ready_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TablePlayerAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TablePlayerAck.uid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TablePlayerAck.nickname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string avatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TablePlayerAck.avatar"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 diamond = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          seat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ready = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TablePlayerAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TablePlayerAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TablePlayerAck.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TablePlayerAck.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string avatar = 3;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TablePlayerAck.avatar");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avatar(), target);
  }

  // int32 vip = 4;
  if (this->_internal_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vip(), target);
  }

  // int64 diamond = 5;
  if (this->_internal_diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_diamond(), target);
  }

  // int32 seat = 6;
  if (this->_internal_seat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_seat(), target);
  }

  // bool ready = 7;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TablePlayerAck)
  return target;
}

size_t TablePlayerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TablePlayerAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string avatar = 3;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // int64 diamond = 5;
  if (this->_internal_diamond() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_diamond());
  }

  // int32 vip = 4;
  if (this->_internal_vip() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_vip());
  }

  // int32 seat = 6;
  if (this->_internal_seat() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seat());
  }

  // bool ready = 7;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TablePlayerAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TablePlayerAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TablePlayerAck::GetClassData() const { return &_class_data_; }

void TablePlayerAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TablePlayerAck *>(to)->MergeFrom(
      static_cast<const TablePlayerAck &>(from));
}


void TablePlayerAck::MergeFrom(const TablePlayerAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TablePlayerAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _internal_set_uid(from._internal_uid());
  }
  if (!from._internal_nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from._internal_diamond() != 0) {
    _internal_set_diamond(from._internal_diamond());
  }
  if (from._internal_vip() != 0) {
    _internal_set_vip(from._internal_vip());
  }
  if (from._internal_seat() != 0) {
    _internal_set_seat(from._internal_seat());
  }
  if (from._internal_ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TablePlayerAck::CopyFrom(const TablePlayerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TablePlayerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TablePlayerAck::IsInitialized() const {
  return true;
}

void TablePlayerAck::InternalSwap(TablePlayerAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &uid_, lhs_arena,
      &other->uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, lhs_arena,
      &other->nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, lhs_arena,
      &other->avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TablePlayerAck, ready_)
      + sizeof(TablePlayerAck::ready_)
      - PROTOBUF_FIELD_OFFSET(TablePlayerAck, diamond_)>(
          reinterpret_cast<char*>(&diamond_),
          reinterpret_cast<char*>(&other->diamond_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TablePlayerAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[7]);
}

// ===================================================================

class TableMsgReq::_Internal {
 public:
};

TableMsgReq::TableMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TableMsgReq)
}
TableMsgReq::TableMsgReq(const TableMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cproto.TableMsgReq)
}

inline void TableMsgReq::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableMsgReq::~TableMsgReq() {
  // @@protoc_insertion_point(destructor:cproto.TableMsgReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableMsgReq::ArenaDtor(void* object) {
  TableMsgReq* _this = reinterpret_cast< TableMsgReq* >(object);
  (void)_this;
}
void TableMsgReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableMsgReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TableMsgReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableMsgReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableMsgReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TableMsgReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (!this->_internal_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TableMsgReq)
  return target;
}

size_t TableMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TableMsgReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableMsgReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableMsgReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableMsgReq::GetClassData() const { return &_class_data_; }

void TableMsgReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableMsgReq *>(to)->MergeFrom(
      static_cast<const TableMsgReq &>(from));
}


void TableMsgReq::MergeFrom(const TableMsgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TableMsgReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableMsgReq::CopyFrom(const TableMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TableMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMsgReq::IsInitialized() const {
  return true;
}

void TableMsgReq::InternalSwap(TableMsgReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TableMsgReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[8]);
}

// ===================================================================

class TableMsgAck::_Internal {
 public:
};

TableMsgAck::TableMsgAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TableMsgAck)
}
TableMsgAck::TableMsgAck(const TableMsgAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cproto.TableMsgAck)
}

inline void TableMsgAck::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableMsgAck::~TableMsgAck() {
  // @@protoc_insertion_point(destructor:cproto.TableMsgAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TableMsgAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TableMsgAck::ArenaDtor(void* object) {
  TableMsgAck* _this = reinterpret_cast< TableMsgAck* >(object);
  (void)_this;
}
void TableMsgAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableMsgAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableMsgAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TableMsgAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableMsgAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableMsgAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TableMsgAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (!this->_internal_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TableMsgAck)
  return target;
}

size_t TableMsgAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TableMsgAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableMsgAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TableMsgAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableMsgAck::GetClassData() const { return &_class_data_; }

void TableMsgAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TableMsgAck *>(to)->MergeFrom(
      static_cast<const TableMsgAck &>(from));
}


void TableMsgAck::MergeFrom(const TableMsgAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TableMsgAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableMsgAck::CopyFrom(const TableMsgAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TableMsgAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableMsgAck::IsInitialized() const {
  return true;
}

void TableMsgAck::InternalSwap(TableMsgAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TableMsgAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[9]);
}

// ===================================================================

class GameReadyAck::_Internal {
 public:
};

GameReadyAck::GameReadyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameReadyAck)
}
GameReadyAck::GameReadyAck(const GameReadyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seat_, &from.seat_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&seat_)) + sizeof(ready_));
  // @@protoc_insertion_point(copy_constructor:cproto.GameReadyAck)
}

inline void GameReadyAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ready_) -
    reinterpret_cast<char*>(&seat_)) + sizeof(ready_));
}

GameReadyAck::~GameReadyAck() {
  // @@protoc_insertion_point(destructor:cproto.GameReadyAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameReadyAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameReadyAck::ArenaDtor(void* object) {
  GameReadyAck* _this = reinterpret_cast< GameReadyAck* >(object);
  (void)_this;
}
void GameReadyAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameReadyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameReadyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameReadyAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ready_) -
      reinterpret_cast<char*>(&seat_)) + sizeof(ready_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameReadyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 seat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameReadyAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameReadyAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat = 1;
  if (this->_internal_seat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat(), target);
  }

  // bool ready = 2;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameReadyAck)
  return target;
}

size_t GameReadyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameReadyAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seat = 1;
  if (this->_internal_seat() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seat());
  }

  // bool ready = 2;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameReadyAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameReadyAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameReadyAck::GetClassData() const { return &_class_data_; }

void GameReadyAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameReadyAck *>(to)->MergeFrom(
      static_cast<const GameReadyAck &>(from));
}


void GameReadyAck::MergeFrom(const GameReadyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameReadyAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seat() != 0) {
    _internal_set_seat(from._internal_seat());
  }
  if (from._internal_ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameReadyAck::CopyFrom(const GameReadyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameReadyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReadyAck::IsInitialized() const {
  return true;
}

void GameReadyAck::InternalSwap(GameReadyAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameReadyAck, ready_)
      + sizeof(GameReadyAck::ready_)
      - PROTOBUF_FIELD_OFFSET(GameReadyAck, seat_)>(
          reinterpret_cast<char*>(&seat_),
          reinterpret_cast<char*>(&other->seat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameReadyAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[10]);
}

// ===================================================================

GameDissolveAck_AgreedEntry_DoNotUse::GameDissolveAck_AgreedEntry_DoNotUse() {}
GameDissolveAck_AgreedEntry_DoNotUse::GameDissolveAck_AgreedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GameDissolveAck_AgreedEntry_DoNotUse::MergeFrom(const GameDissolveAck_AgreedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GameDissolveAck_AgreedEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[11]);
}

// ===================================================================

class GameDissolveAck::_Internal {
 public:
};

GameDissolveAck::GameDissolveAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  agreed_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameDissolveAck)
}
GameDissolveAck::GameDissolveAck(const GameDissolveAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agreed_.MergeFrom(from.agreed_);
  ::memcpy(&starttime_, &from.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&seat_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(seat_));
  // @@protoc_insertion_point(copy_constructor:cproto.GameDissolveAck)
}

inline void GameDissolveAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&starttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seat_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(seat_));
}

GameDissolveAck::~GameDissolveAck() {
  // @@protoc_insertion_point(destructor:cproto.GameDissolveAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameDissolveAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameDissolveAck::ArenaDtor(void* object) {
  GameDissolveAck* _this = reinterpret_cast< GameDissolveAck* >(object);
  (void)_this;
  _this->agreed_. ~MapField();
}
inline void GameDissolveAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GameDissolveAck::ArenaDtor);
  }
}
void GameDissolveAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameDissolveAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameDissolveAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agreed_.Clear();
  ::memset(&starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_) -
      reinterpret_cast<char*>(&starttime_)) + sizeof(seat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameDissolveAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 starttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 endtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 seat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, bool> agreed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&agreed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameDissolveAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameDissolveAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 starttime = 1;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_starttime(), target);
  }

  // int64 endtime = 2;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_endtime(), target);
  }

  // int32 seat = 3;
  if (this->_internal_seat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_seat(), target);
  }

  // map<int32, bool> agreed = 4;
  if (!this->_internal_agreed().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_agreed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_agreed().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
          it = this->_internal_agreed().begin();
          it != this->_internal_agreed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GameDissolveAck_AgreedEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
          it = this->_internal_agreed().begin();
          it != this->_internal_agreed().end(); ++it) {
        target = GameDissolveAck_AgreedEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameDissolveAck)
  return target;
}

size_t GameDissolveAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameDissolveAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bool> agreed = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_agreed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >::const_iterator
      it = this->_internal_agreed().begin();
      it != this->_internal_agreed().end(); ++it) {
    total_size += GameDissolveAck_AgreedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 starttime = 1;
  if (this->_internal_starttime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_starttime());
  }

  // int64 endtime = 2;
  if (this->_internal_endtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  // int32 seat = 3;
  if (this->_internal_seat() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_seat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameDissolveAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameDissolveAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameDissolveAck::GetClassData() const { return &_class_data_; }

void GameDissolveAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameDissolveAck *>(to)->MergeFrom(
      static_cast<const GameDissolveAck &>(from));
}


void GameDissolveAck::MergeFrom(const GameDissolveAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameDissolveAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  agreed_.MergeFrom(from.agreed_);
  if (from._internal_starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_endtime() != 0) {
    _internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_seat() != 0) {
    _internal_set_seat(from._internal_seat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameDissolveAck::CopyFrom(const GameDissolveAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameDissolveAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDissolveAck::IsInitialized() const {
  return true;
}

void GameDissolveAck::InternalSwap(GameDissolveAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  agreed_.InternalSwap(&other->agreed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameDissolveAck, seat_)
      + sizeof(GameDissolveAck::seat_)
      - PROTOBUF_FIELD_OFFSET(GameDissolveAck, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameDissolveAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[12]);
}

// ===================================================================

class GameDissolveResultAck::_Internal {
 public:
};

GameDissolveResultAck::GameDissolveResultAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameDissolveResultAck)
}
GameDissolveResultAck::GameDissolveResultAck(const GameDissolveResultAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dissovle_ = from.dissovle_;
  // @@protoc_insertion_point(copy_constructor:cproto.GameDissolveResultAck)
}

inline void GameDissolveResultAck::SharedCtor() {
dissovle_ = false;
}

GameDissolveResultAck::~GameDissolveResultAck() {
  // @@protoc_insertion_point(destructor:cproto.GameDissolveResultAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameDissolveResultAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameDissolveResultAck::ArenaDtor(void* object) {
  GameDissolveResultAck* _this = reinterpret_cast< GameDissolveResultAck* >(object);
  (void)_this;
}
void GameDissolveResultAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameDissolveResultAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameDissolveResultAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameDissolveResultAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dissovle_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameDissolveResultAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool dissovle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dissovle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameDissolveResultAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameDissolveResultAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dissovle = 1;
  if (this->_internal_dissovle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_dissovle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameDissolveResultAck)
  return target;
}

size_t GameDissolveResultAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameDissolveResultAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool dissovle = 1;
  if (this->_internal_dissovle() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameDissolveResultAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameDissolveResultAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameDissolveResultAck::GetClassData() const { return &_class_data_; }

void GameDissolveResultAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameDissolveResultAck *>(to)->MergeFrom(
      static_cast<const GameDissolveResultAck &>(from));
}


void GameDissolveResultAck::MergeFrom(const GameDissolveResultAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameDissolveResultAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dissovle() != 0) {
    _internal_set_dissovle(from._internal_dissovle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameDissolveResultAck::CopyFrom(const GameDissolveResultAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameDissolveResultAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDissolveResultAck::IsInitialized() const {
  return true;
}

void GameDissolveResultAck::InternalSwap(GameDissolveResultAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(dissovle_, other->dissovle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameDissolveResultAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[13]);
}

// ===================================================================

class GameBeginAck::_Internal {
 public:
};

GameBeginAck::GameBeginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameBeginAck)
}
GameBeginAck::GameBeginAck(const GameBeginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cur_game_count_ = from.cur_game_count_;
  // @@protoc_insertion_point(copy_constructor:cproto.GameBeginAck)
}

inline void GameBeginAck::SharedCtor() {
cur_game_count_ = 0;
}

GameBeginAck::~GameBeginAck() {
  // @@protoc_insertion_point(destructor:cproto.GameBeginAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameBeginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameBeginAck::ArenaDtor(void* object) {
  GameBeginAck* _this = reinterpret_cast< GameBeginAck* >(object);
  (void)_this;
}
void GameBeginAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameBeginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameBeginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameBeginAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cur_game_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameBeginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cur_game_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cur_game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameBeginAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameBeginAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_game_count = 1;
  if (this->_internal_cur_game_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_game_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameBeginAck)
  return target;
}

size_t GameBeginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameBeginAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cur_game_count = 1;
  if (this->_internal_cur_game_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cur_game_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameBeginAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameBeginAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameBeginAck::GetClassData() const { return &_class_data_; }

void GameBeginAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameBeginAck *>(to)->MergeFrom(
      static_cast<const GameBeginAck &>(from));
}


void GameBeginAck::MergeFrom(const GameBeginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameBeginAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cur_game_count() != 0) {
    _internal_set_cur_game_count(from._internal_cur_game_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameBeginAck::CopyFrom(const GameBeginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameBeginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameBeginAck::IsInitialized() const {
  return true;
}

void GameBeginAck::InternalSwap(GameBeginAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cur_game_count_, other->cur_game_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameBeginAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[14]);
}

// ===================================================================

class GameOverAck::_Internal {
 public:
};

GameOverAck::GameOverAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ready_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.GameOverAck)
}
GameOverAck::GameOverAck(const GameOverAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ready_(from.ready_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cur_game_count_ = from.cur_game_count_;
  // @@protoc_insertion_point(copy_constructor:cproto.GameOverAck)
}

inline void GameOverAck::SharedCtor() {
cur_game_count_ = 0;
}

GameOverAck::~GameOverAck() {
  // @@protoc_insertion_point(destructor:cproto.GameOverAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameOverAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameOverAck::ArenaDtor(void* object) {
  GameOverAck* _this = reinterpret_cast< GameOverAck* >(object);
  (void)_this;
}
void GameOverAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameOverAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameOverAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.GameOverAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_.Clear();
  cur_game_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameOverAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cur_game_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cur_game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool ready = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_ready(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_ready(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameOverAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.GameOverAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_game_count = 1;
  if (this->_internal_cur_game_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cur_game_count(), target);
  }

  // repeated bool ready = 2;
  if (this->_internal_ready_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.GameOverAck)
  return target;
}

size_t GameOverAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.GameOverAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool ready = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ready_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int32 cur_game_count = 1;
  if (this->_internal_cur_game_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cur_game_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameOverAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameOverAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameOverAck::GetClassData() const { return &_class_data_; }

void GameOverAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameOverAck *>(to)->MergeFrom(
      static_cast<const GameOverAck &>(from));
}


void GameOverAck::MergeFrom(const GameOverAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.GameOverAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ready_.MergeFrom(from.ready_);
  if (from._internal_cur_game_count() != 0) {
    _internal_set_cur_game_count(from._internal_cur_game_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameOverAck::CopyFrom(const GameOverAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.GameOverAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameOverAck::IsInitialized() const {
  return true;
}

void GameOverAck::InternalSwap(GameOverAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ready_.InternalSwap(&other->ready_);
  swap(cur_game_count_, other->cur_game_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameOverAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[15]);
}

// ===================================================================

class HisBeginAck::_Internal {
 public:
};

HisBeginAck::HisBeginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.HisBeginAck)
}
HisBeginAck::HisBeginAck(const HisBeginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.HisBeginAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HisBeginAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HisBeginAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HisBeginAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[16]);
}

// ===================================================================

class HisEndAck::_Internal {
 public:
};

HisEndAck::HisEndAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.HisEndAck)
}
HisEndAck::HisEndAck(const HisEndAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.HisEndAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HisEndAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HisEndAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata HisEndAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_2eproto_getter, &descriptor_table_game_2eproto_once,
      file_level_metadata_game_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cproto::GameReq* Arena::CreateMaybeMessage< ::cproto::GameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameAck* Arena::CreateMaybeMessage< ::cproto::GameAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::EnterGameReq* Arena::CreateMaybeMessage< ::cproto::EnterGameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::EnterGameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameReadyReq* Arena::CreateMaybeMessage< ::cproto::GameReadyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameReadyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameDissolveReq* Arena::CreateMaybeMessage< ::cproto::GameDissolveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameDissolveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::EnterGameAck_FdpropertyEntry_DoNotUse* Arena::CreateMaybeMessage< ::cproto::EnterGameAck_FdpropertyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::EnterGameAck_FdpropertyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::EnterGameAck* Arena::CreateMaybeMessage< ::cproto::EnterGameAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::EnterGameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::TablePlayerAck* Arena::CreateMaybeMessage< ::cproto::TablePlayerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TablePlayerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::TableMsgReq* Arena::CreateMaybeMessage< ::cproto::TableMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TableMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::TableMsgAck* Arena::CreateMaybeMessage< ::cproto::TableMsgAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TableMsgAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameReadyAck* Arena::CreateMaybeMessage< ::cproto::GameReadyAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameReadyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameDissolveAck_AgreedEntry_DoNotUse* Arena::CreateMaybeMessage< ::cproto::GameDissolveAck_AgreedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameDissolveAck_AgreedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameDissolveAck* Arena::CreateMaybeMessage< ::cproto::GameDissolveAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameDissolveAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameDissolveResultAck* Arena::CreateMaybeMessage< ::cproto::GameDissolveResultAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameDissolveResultAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameBeginAck* Arena::CreateMaybeMessage< ::cproto::GameBeginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameBeginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::GameOverAck* Arena::CreateMaybeMessage< ::cproto::GameOverAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::GameOverAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::HisBeginAck* Arena::CreateMaybeMessage< ::cproto::HisBeginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::HisBeginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::HisEndAck* Arena::CreateMaybeMessage< ::cproto::HisEndAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::HisEndAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
