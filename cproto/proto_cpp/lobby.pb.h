// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lobby_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lobby_2eproto;
namespace cproto {
class LobbyAck;
struct LobbyAckDefaultTypeInternal;
extern LobbyAckDefaultTypeInternal _LobbyAck_default_instance_;
class LobbyReq;
struct LobbyReqDefaultTypeInternal;
extern LobbyReqDefaultTypeInternal _LobbyReq_default_instance_;
class LoginAck;
struct LoginAckDefaultTypeInternal;
extern LoginAckDefaultTypeInternal _LoginAck_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class RegisterAck;
struct RegisterAckDefaultTypeInternal;
extern RegisterAckDefaultTypeInternal _RegisterAck_default_instance_;
class RegisterReq;
struct RegisterReqDefaultTypeInternal;
extern RegisterReqDefaultTypeInternal _RegisterReq_default_instance_;
}  // namespace cproto
PROTOBUF_NAMESPACE_OPEN
template<> ::cproto::LobbyAck* Arena::CreateMaybeMessage<::cproto::LobbyAck>(Arena*);
template<> ::cproto::LobbyReq* Arena::CreateMaybeMessage<::cproto::LobbyReq>(Arena*);
template<> ::cproto::LoginAck* Arena::CreateMaybeMessage<::cproto::LoginAck>(Arena*);
template<> ::cproto::LoginReq* Arena::CreateMaybeMessage<::cproto::LoginReq>(Arena*);
template<> ::cproto::RegisterAck* Arena::CreateMaybeMessage<::cproto::RegisterAck>(Arena*);
template<> ::cproto::RegisterReq* Arena::CreateMaybeMessage<::cproto::RegisterReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cproto {

// ===================================================================

class LobbyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.LobbyReq) */ {
 public:
  inline LobbyReq() : LobbyReq(nullptr) {}
  ~LobbyReq() override;
  explicit constexpr LobbyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbyReq(const LobbyReq& from);
  LobbyReq(LobbyReq&& from) noexcept
    : LobbyReq() {
    *this = ::std::move(from);
  }

  inline LobbyReq& operator=(const LobbyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbyReq& operator=(LobbyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbyReq* internal_default_instance() {
    return reinterpret_cast<const LobbyReq*>(
               &_LobbyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LobbyReq& a, LobbyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LobbyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.LobbyReq";
  }
  protected:
  explicit LobbyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
    kLoginReqFieldNumber = 2,
    kRegisterReqFieldNumber = 3,
  };
  // string serverid = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // .cproto.LoginReq login_req = 2;
  bool has_login_req() const;
  private:
  bool _internal_has_login_req() const;
  public:
  void clear_login_req();
  const ::cproto::LoginReq& login_req() const;
  PROTOBUF_NODISCARD ::cproto::LoginReq* release_login_req();
  ::cproto::LoginReq* mutable_login_req();
  void set_allocated_login_req(::cproto::LoginReq* login_req);
  private:
  const ::cproto::LoginReq& _internal_login_req() const;
  ::cproto::LoginReq* _internal_mutable_login_req();
  public:
  void unsafe_arena_set_allocated_login_req(
      ::cproto::LoginReq* login_req);
  ::cproto::LoginReq* unsafe_arena_release_login_req();

  // .cproto.RegisterReq register_req = 3;
  bool has_register_req() const;
  private:
  bool _internal_has_register_req() const;
  public:
  void clear_register_req();
  const ::cproto::RegisterReq& register_req() const;
  PROTOBUF_NODISCARD ::cproto::RegisterReq* release_register_req();
  ::cproto::RegisterReq* mutable_register_req();
  void set_allocated_register_req(::cproto::RegisterReq* register_req);
  private:
  const ::cproto::RegisterReq& _internal_register_req() const;
  ::cproto::RegisterReq* _internal_mutable_register_req();
  public:
  void unsafe_arena_set_allocated_register_req(
      ::cproto::RegisterReq* register_req);
  ::cproto::RegisterReq* unsafe_arena_release_register_req();

  // @@protoc_insertion_point(class_scope:cproto.LobbyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::cproto::LoginReq* login_req_;
  ::cproto::RegisterReq* register_req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class LobbyAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.LobbyAck) */ {
 public:
  inline LobbyAck() : LobbyAck(nullptr) {}
  ~LobbyAck() override;
  explicit constexpr LobbyAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbyAck(const LobbyAck& from);
  LobbyAck(LobbyAck&& from) noexcept
    : LobbyAck() {
    *this = ::std::move(from);
  }

  inline LobbyAck& operator=(const LobbyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbyAck& operator=(LobbyAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbyAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbyAck* internal_default_instance() {
    return reinterpret_cast<const LobbyAck*>(
               &_LobbyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LobbyAck& a, LobbyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbyAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbyAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbyAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbyAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LobbyAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbyAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.LobbyAck";
  }
  protected:
  explicit LobbyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginAckFieldNumber = 1,
    kRegisterAckFieldNumber = 2,
  };
  // .cproto.LoginAck login_ack = 1;
  bool has_login_ack() const;
  private:
  bool _internal_has_login_ack() const;
  public:
  void clear_login_ack();
  const ::cproto::LoginAck& login_ack() const;
  PROTOBUF_NODISCARD ::cproto::LoginAck* release_login_ack();
  ::cproto::LoginAck* mutable_login_ack();
  void set_allocated_login_ack(::cproto::LoginAck* login_ack);
  private:
  const ::cproto::LoginAck& _internal_login_ack() const;
  ::cproto::LoginAck* _internal_mutable_login_ack();
  public:
  void unsafe_arena_set_allocated_login_ack(
      ::cproto::LoginAck* login_ack);
  ::cproto::LoginAck* unsafe_arena_release_login_ack();

  // .cproto.RegisterAck register_ack = 2;
  bool has_register_ack() const;
  private:
  bool _internal_has_register_ack() const;
  public:
  void clear_register_ack();
  const ::cproto::RegisterAck& register_ack() const;
  PROTOBUF_NODISCARD ::cproto::RegisterAck* release_register_ack();
  ::cproto::RegisterAck* mutable_register_ack();
  void set_allocated_register_ack(::cproto::RegisterAck* register_ack);
  private:
  const ::cproto::RegisterAck& _internal_register_ack() const;
  ::cproto::RegisterAck* _internal_mutable_register_ack();
  public:
  void unsafe_arena_set_allocated_register_ack(
      ::cproto::RegisterAck* register_ack);
  ::cproto::RegisterAck* unsafe_arena_release_register_ack();

  // @@protoc_insertion_point(class_scope:cproto.LobbyAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::cproto::LoginAck* login_ack_;
  ::cproto::RegisterAck* register_ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit constexpr LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:cproto.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class RegisterReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.RegisterReq) */ {
 public:
  inline RegisterReq() : RegisterReq(nullptr) {}
  ~RegisterReq() override;
  explicit constexpr RegisterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterReq(const RegisterReq& from);
  RegisterReq(RegisterReq&& from) noexcept
    : RegisterReq() {
    *this = ::std::move(from);
  }

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterReq& operator=(RegisterReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterReq* internal_default_instance() {
    return reinterpret_cast<const RegisterReq*>(
               &_RegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterReq& a, RegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.RegisterReq";
  }
  protected:
  explicit RegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:cproto.RegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class LoginAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.LoginAck) */ {
 public:
  inline LoginAck() : LoginAck(nullptr) {}
  ~LoginAck() override;
  explicit constexpr LoginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginAck(const LoginAck& from);
  LoginAck(LoginAck&& from) noexcept
    : LoginAck() {
    *this = ::std::move(from);
  }

  inline LoginAck& operator=(const LoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAck& operator=(LoginAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginAck* internal_default_instance() {
    return reinterpret_cast<const LoginAck*>(
               &_LoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginAck& a, LoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.LoginAck";
  }
  protected:
  explicit LoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // string serverid = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // string userid = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:cproto.LoginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lobby_2eproto;
};
// -------------------------------------------------------------------

class RegisterAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.RegisterAck) */ {
 public:
  inline RegisterAck() : RegisterAck(nullptr) {}
  ~RegisterAck() override;
  explicit constexpr RegisterAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterAck(const RegisterAck& from);
  RegisterAck(RegisterAck&& from) noexcept
    : RegisterAck() {
    *this = ::std::move(from);
  }

  inline RegisterAck& operator=(const RegisterAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAck& operator=(RegisterAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterAck* internal_default_instance() {
    return reinterpret_cast<const RegisterAck*>(
               &_RegisterAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterAck& a, RegisterAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.RegisterAck";
  }
  protected:
  explicit RegisterAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
    kUseridFieldNumber = 2,
  };
  // string serverid = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // string userid = 2;
  void clear_userid();
  const std::string& userid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:cproto.RegisterAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lobby_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LobbyReq

// string serverid = 1;
inline void LobbyReq::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& LobbyReq::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.LobbyReq.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LobbyReq::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.LobbyReq.serverid)
}
inline std::string* LobbyReq::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.LobbyReq.serverid)
  return _s;
}
inline const std::string& LobbyReq::_internal_serverid() const {
  return serverid_.Get();
}
inline void LobbyReq::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LobbyReq::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LobbyReq::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.LobbyReq.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LobbyReq::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.LobbyReq.serverid)
}

// .cproto.LoginReq login_req = 2;
inline bool LobbyReq::_internal_has_login_req() const {
  return this != internal_default_instance() && login_req_ != nullptr;
}
inline bool LobbyReq::has_login_req() const {
  return _internal_has_login_req();
}
inline void LobbyReq::clear_login_req() {
  if (GetArenaForAllocation() == nullptr && login_req_ != nullptr) {
    delete login_req_;
  }
  login_req_ = nullptr;
}
inline const ::cproto::LoginReq& LobbyReq::_internal_login_req() const {
  const ::cproto::LoginReq* p = login_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::cproto::LoginReq&>(
      ::cproto::_LoginReq_default_instance_);
}
inline const ::cproto::LoginReq& LobbyReq::login_req() const {
  // @@protoc_insertion_point(field_get:cproto.LobbyReq.login_req)
  return _internal_login_req();
}
inline void LobbyReq::unsafe_arena_set_allocated_login_req(
    ::cproto::LoginReq* login_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_req_);
  }
  login_req_ = login_req;
  if (login_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.LobbyReq.login_req)
}
inline ::cproto::LoginReq* LobbyReq::release_login_req() {
  
  ::cproto::LoginReq* temp = login_req_;
  login_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cproto::LoginReq* LobbyReq::unsafe_arena_release_login_req() {
  // @@protoc_insertion_point(field_release:cproto.LobbyReq.login_req)
  
  ::cproto::LoginReq* temp = login_req_;
  login_req_ = nullptr;
  return temp;
}
inline ::cproto::LoginReq* LobbyReq::_internal_mutable_login_req() {
  
  if (login_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::cproto::LoginReq>(GetArenaForAllocation());
    login_req_ = p;
  }
  return login_req_;
}
inline ::cproto::LoginReq* LobbyReq::mutable_login_req() {
  ::cproto::LoginReq* _msg = _internal_mutable_login_req();
  // @@protoc_insertion_point(field_mutable:cproto.LobbyReq.login_req)
  return _msg;
}
inline void LobbyReq::set_allocated_login_req(::cproto::LoginReq* login_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete login_req_;
  }
  if (login_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cproto::LoginReq>::GetOwningArena(login_req);
    if (message_arena != submessage_arena) {
      login_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_req, submessage_arena);
    }
    
  } else {
    
  }
  login_req_ = login_req;
  // @@protoc_insertion_point(field_set_allocated:cproto.LobbyReq.login_req)
}

// .cproto.RegisterReq register_req = 3;
inline bool LobbyReq::_internal_has_register_req() const {
  return this != internal_default_instance() && register_req_ != nullptr;
}
inline bool LobbyReq::has_register_req() const {
  return _internal_has_register_req();
}
inline void LobbyReq::clear_register_req() {
  if (GetArenaForAllocation() == nullptr && register_req_ != nullptr) {
    delete register_req_;
  }
  register_req_ = nullptr;
}
inline const ::cproto::RegisterReq& LobbyReq::_internal_register_req() const {
  const ::cproto::RegisterReq* p = register_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::cproto::RegisterReq&>(
      ::cproto::_RegisterReq_default_instance_);
}
inline const ::cproto::RegisterReq& LobbyReq::register_req() const {
  // @@protoc_insertion_point(field_get:cproto.LobbyReq.register_req)
  return _internal_register_req();
}
inline void LobbyReq::unsafe_arena_set_allocated_register_req(
    ::cproto::RegisterReq* register_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_req_);
  }
  register_req_ = register_req;
  if (register_req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.LobbyReq.register_req)
}
inline ::cproto::RegisterReq* LobbyReq::release_register_req() {
  
  ::cproto::RegisterReq* temp = register_req_;
  register_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cproto::RegisterReq* LobbyReq::unsafe_arena_release_register_req() {
  // @@protoc_insertion_point(field_release:cproto.LobbyReq.register_req)
  
  ::cproto::RegisterReq* temp = register_req_;
  register_req_ = nullptr;
  return temp;
}
inline ::cproto::RegisterReq* LobbyReq::_internal_mutable_register_req() {
  
  if (register_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::cproto::RegisterReq>(GetArenaForAllocation());
    register_req_ = p;
  }
  return register_req_;
}
inline ::cproto::RegisterReq* LobbyReq::mutable_register_req() {
  ::cproto::RegisterReq* _msg = _internal_mutable_register_req();
  // @@protoc_insertion_point(field_mutable:cproto.LobbyReq.register_req)
  return _msg;
}
inline void LobbyReq::set_allocated_register_req(::cproto::RegisterReq* register_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete register_req_;
  }
  if (register_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cproto::RegisterReq>::GetOwningArena(register_req);
    if (message_arena != submessage_arena) {
      register_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_req, submessage_arena);
    }
    
  } else {
    
  }
  register_req_ = register_req;
  // @@protoc_insertion_point(field_set_allocated:cproto.LobbyReq.register_req)
}

// -------------------------------------------------------------------

// LobbyAck

// .cproto.LoginAck login_ack = 1;
inline bool LobbyAck::_internal_has_login_ack() const {
  return this != internal_default_instance() && login_ack_ != nullptr;
}
inline bool LobbyAck::has_login_ack() const {
  return _internal_has_login_ack();
}
inline void LobbyAck::clear_login_ack() {
  if (GetArenaForAllocation() == nullptr && login_ack_ != nullptr) {
    delete login_ack_;
  }
  login_ack_ = nullptr;
}
inline const ::cproto::LoginAck& LobbyAck::_internal_login_ack() const {
  const ::cproto::LoginAck* p = login_ack_;
  return p != nullptr ? *p : reinterpret_cast<const ::cproto::LoginAck&>(
      ::cproto::_LoginAck_default_instance_);
}
inline const ::cproto::LoginAck& LobbyAck::login_ack() const {
  // @@protoc_insertion_point(field_get:cproto.LobbyAck.login_ack)
  return _internal_login_ack();
}
inline void LobbyAck::unsafe_arena_set_allocated_login_ack(
    ::cproto::LoginAck* login_ack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_ack_);
  }
  login_ack_ = login_ack;
  if (login_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.LobbyAck.login_ack)
}
inline ::cproto::LoginAck* LobbyAck::release_login_ack() {
  
  ::cproto::LoginAck* temp = login_ack_;
  login_ack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cproto::LoginAck* LobbyAck::unsafe_arena_release_login_ack() {
  // @@protoc_insertion_point(field_release:cproto.LobbyAck.login_ack)
  
  ::cproto::LoginAck* temp = login_ack_;
  login_ack_ = nullptr;
  return temp;
}
inline ::cproto::LoginAck* LobbyAck::_internal_mutable_login_ack() {
  
  if (login_ack_ == nullptr) {
    auto* p = CreateMaybeMessage<::cproto::LoginAck>(GetArenaForAllocation());
    login_ack_ = p;
  }
  return login_ack_;
}
inline ::cproto::LoginAck* LobbyAck::mutable_login_ack() {
  ::cproto::LoginAck* _msg = _internal_mutable_login_ack();
  // @@protoc_insertion_point(field_mutable:cproto.LobbyAck.login_ack)
  return _msg;
}
inline void LobbyAck::set_allocated_login_ack(::cproto::LoginAck* login_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete login_ack_;
  }
  if (login_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cproto::LoginAck>::GetOwningArena(login_ack);
    if (message_arena != submessage_arena) {
      login_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_ack, submessage_arena);
    }
    
  } else {
    
  }
  login_ack_ = login_ack;
  // @@protoc_insertion_point(field_set_allocated:cproto.LobbyAck.login_ack)
}

// .cproto.RegisterAck register_ack = 2;
inline bool LobbyAck::_internal_has_register_ack() const {
  return this != internal_default_instance() && register_ack_ != nullptr;
}
inline bool LobbyAck::has_register_ack() const {
  return _internal_has_register_ack();
}
inline void LobbyAck::clear_register_ack() {
  if (GetArenaForAllocation() == nullptr && register_ack_ != nullptr) {
    delete register_ack_;
  }
  register_ack_ = nullptr;
}
inline const ::cproto::RegisterAck& LobbyAck::_internal_register_ack() const {
  const ::cproto::RegisterAck* p = register_ack_;
  return p != nullptr ? *p : reinterpret_cast<const ::cproto::RegisterAck&>(
      ::cproto::_RegisterAck_default_instance_);
}
inline const ::cproto::RegisterAck& LobbyAck::register_ack() const {
  // @@protoc_insertion_point(field_get:cproto.LobbyAck.register_ack)
  return _internal_register_ack();
}
inline void LobbyAck::unsafe_arena_set_allocated_register_ack(
    ::cproto::RegisterAck* register_ack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(register_ack_);
  }
  register_ack_ = register_ack;
  if (register_ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.LobbyAck.register_ack)
}
inline ::cproto::RegisterAck* LobbyAck::release_register_ack() {
  
  ::cproto::RegisterAck* temp = register_ack_;
  register_ack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cproto::RegisterAck* LobbyAck::unsafe_arena_release_register_ack() {
  // @@protoc_insertion_point(field_release:cproto.LobbyAck.register_ack)
  
  ::cproto::RegisterAck* temp = register_ack_;
  register_ack_ = nullptr;
  return temp;
}
inline ::cproto::RegisterAck* LobbyAck::_internal_mutable_register_ack() {
  
  if (register_ack_ == nullptr) {
    auto* p = CreateMaybeMessage<::cproto::RegisterAck>(GetArenaForAllocation());
    register_ack_ = p;
  }
  return register_ack_;
}
inline ::cproto::RegisterAck* LobbyAck::mutable_register_ack() {
  ::cproto::RegisterAck* _msg = _internal_mutable_register_ack();
  // @@protoc_insertion_point(field_mutable:cproto.LobbyAck.register_ack)
  return _msg;
}
inline void LobbyAck::set_allocated_register_ack(::cproto::RegisterAck* register_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete register_ack_;
  }
  if (register_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cproto::RegisterAck>::GetOwningArena(register_ack);
    if (message_arena != submessage_arena) {
      register_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_ack, submessage_arena);
    }
    
  } else {
    
  }
  register_ack_ = register_ack;
  // @@protoc_insertion_point(field_set_allocated:cproto.LobbyAck.register_ack)
}

// -------------------------------------------------------------------

// LoginReq

// string account = 1;
inline void LoginReq::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& LoginReq::account() const {
  // @@protoc_insertion_point(field_get:cproto.LoginReq.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.LoginReq.account)
}
inline std::string* LoginReq::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:cproto.LoginReq.account)
  return _s;
}
inline const std::string& LoginReq::_internal_account() const {
  return account_.Get();
}
inline void LoginReq::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginReq::release_account() {
  // @@protoc_insertion_point(field_release:cproto.LoginReq.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginReq::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.LoginReq.account)
}

// string password = 2;
inline void LoginReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:cproto.LoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:cproto.LoginReq.password)
  return _s;
}
inline const std::string& LoginReq::_internal_password() const {
  return password_.Get();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:cproto.LoginReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.LoginReq.password)
}

// -------------------------------------------------------------------

// RegisterReq

// string account = 1;
inline void RegisterReq::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& RegisterReq::account() const {
  // @@protoc_insertion_point(field_get:cproto.RegisterReq.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterReq::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.RegisterReq.account)
}
inline std::string* RegisterReq::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:cproto.RegisterReq.account)
  return _s;
}
inline const std::string& RegisterReq::_internal_account() const {
  return account_.Get();
}
inline void RegisterReq::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterReq::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterReq::release_account() {
  // @@protoc_insertion_point(field_release:cproto.RegisterReq.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterReq::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (account_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.RegisterReq.account)
}

// string password = 2;
inline void RegisterReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& RegisterReq::password() const {
  // @@protoc_insertion_point(field_get:cproto.RegisterReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.RegisterReq.password)
}
inline std::string* RegisterReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:cproto.RegisterReq.password)
  return _s;
}
inline const std::string& RegisterReq::_internal_password() const {
  return password_.Get();
}
inline void RegisterReq::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterReq::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:cproto.RegisterReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.RegisterReq.password)
}

// -------------------------------------------------------------------

// LoginAck

// string serverid = 1;
inline void LoginAck::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& LoginAck::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.LoginAck.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginAck::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.LoginAck.serverid)
}
inline std::string* LoginAck::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.LoginAck.serverid)
  return _s;
}
inline const std::string& LoginAck::_internal_serverid() const {
  return serverid_.Get();
}
inline void LoginAck::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginAck::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginAck::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.LoginAck.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginAck::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.LoginAck.serverid)
}

// string userid = 2;
inline void LoginAck::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& LoginAck::userid() const {
  // @@protoc_insertion_point(field_get:cproto.LoginAck.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginAck::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.LoginAck.userid)
}
inline std::string* LoginAck::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:cproto.LoginAck.userid)
  return _s;
}
inline const std::string& LoginAck::_internal_userid() const {
  return userid_.Get();
}
inline void LoginAck::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginAck::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginAck::release_userid() {
  // @@protoc_insertion_point(field_release:cproto.LoginAck.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginAck::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.LoginAck.userid)
}

// -------------------------------------------------------------------

// RegisterAck

// string serverid = 1;
inline void RegisterAck::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& RegisterAck::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.RegisterAck.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterAck::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.RegisterAck.serverid)
}
inline std::string* RegisterAck::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.RegisterAck.serverid)
  return _s;
}
inline const std::string& RegisterAck::_internal_serverid() const {
  return serverid_.Get();
}
inline void RegisterAck::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterAck::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterAck::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.RegisterAck.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterAck::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.RegisterAck.serverid)
}

// string userid = 2;
inline void RegisterAck::clear_userid() {
  userid_.ClearToEmpty();
}
inline const std::string& RegisterAck::userid() const {
  // @@protoc_insertion_point(field_get:cproto.RegisterAck.userid)
  return _internal_userid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterAck::set_userid(ArgT0&& arg0, ArgT... args) {
 
 userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.RegisterAck.userid)
}
inline std::string* RegisterAck::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:cproto.RegisterAck.userid)
  return _s;
}
inline const std::string& RegisterAck::_internal_userid() const {
  return userid_.Get();
}
inline void RegisterAck::_internal_set_userid(const std::string& value) {
  
  userid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegisterAck::_internal_mutable_userid() {
  
  return userid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegisterAck::release_userid() {
  // @@protoc_insertion_point(field_release:cproto.RegisterAck.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RegisterAck::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (userid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.RegisterAck.userid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lobby_2eproto
