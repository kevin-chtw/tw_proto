// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tourney.proto

#include "tourney.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cproto {
constexpr TourneyReq::TourneyReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : req_(nullptr){}
struct TourneyReqDefaultTypeInternal {
  constexpr TourneyReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TourneyReqDefaultTypeInternal() {}
  union {
    TourneyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TourneyReqDefaultTypeInternal _TourneyReq_default_instance_;
constexpr TourneyAck::TourneyAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_(nullptr){}
struct TourneyAckDefaultTypeInternal {
  constexpr TourneyAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TourneyAckDefaultTypeInternal() {}
  union {
    TourneyAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TourneyAckDefaultTypeInternal _TourneyAck_default_instance_;
constexpr TouneyListReq::TouneyListReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TouneyListReqDefaultTypeInternal {
  constexpr TouneyListReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TouneyListReqDefaultTypeInternal() {}
  union {
    TouneyListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TouneyListReqDefaultTypeInternal _TouneyListReq_default_instance_;
constexpr TouneyListAck::TouneyListAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tounreys_(){}
struct TouneyListAckDefaultTypeInternal {
  constexpr TouneyListAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TouneyListAckDefaultTypeInternal() {}
  union {
    TouneyListAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TouneyListAckDefaultTypeInternal _TouneyListAck_default_instance_;
constexpr TounreyInfo::TounreyInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
  , diamond_(0)
  , online_(0){}
struct TounreyInfoDefaultTypeInternal {
  constexpr TounreyInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TounreyInfoDefaultTypeInternal() {}
  union {
    TounreyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TounreyInfoDefaultTypeInternal _TounreyInfo_default_instance_;
}  // namespace cproto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tourney_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tourney_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tourney_2eproto = nullptr;

const uint32_t TableStruct_tourney_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TourneyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TourneyReq, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TourneyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TourneyAck, ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TouneyListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TouneyListReq, game_type_),
  PROTOBUF_FIELD_OFFSET(::cproto::TouneyListReq, match_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TouneyListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TouneyListAck, tounreys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, id_),
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, name_),
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, game_type_),
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, match_type_),
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, serverid_),
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, diamond_),
  PROTOBUF_FIELD_OFFSET(::cproto::TounreyInfo, online_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cproto::TourneyReq)},
  { 7, -1, -1, sizeof(::cproto::TourneyAck)},
  { 14, -1, -1, sizeof(::cproto::TouneyListReq)},
  { 22, -1, -1, sizeof(::cproto::TouneyListAck)},
  { 29, -1, -1, sizeof(::cproto::TounreyInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TourneyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TourneyAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TouneyListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TouneyListAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_TounreyInfo_default_instance_),
};

const char descriptor_table_protodef_tourney_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtourney.proto\022\006cproto\032\031google/protobuf"
  "/any.proto\"/\n\nTourneyReq\022!\n\003req\030\001 \001(\0132\024."
  "google.protobuf.Any\"/\n\nTourneyAck\022!\n\003ack"
  "\030\001 \001(\0132\024.google.protobuf.Any\"6\n\rTouneyLi"
  "stReq\022\021\n\tgame_type\030\001 \001(\t\022\022\n\nmatch_type\030\002"
  " \001(\t\"6\n\rTouneyListAck\022%\n\010tounreys\030\001 \003(\0132"
  "\023.cproto.TounreyInfo\"\201\001\n\013TounreyInfo\022\n\n\002"
  "id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\021\n\tgame_type\030\003 \001("
  "\t\022\022\n\nmatch_type\030\004 \001(\t\022\020\n\010serverid\030\005 \001(\t\022"
  "\017\n\007diamond\030\006 \001(\005\022\016\n\006online\030\007 \001(\005B\013Z\t../c"
  "protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tourney_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tourney_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tourney_2eproto = {
  false, false, 413, descriptor_table_protodef_tourney_2eproto, "tourney.proto", 
  &descriptor_table_tourney_2eproto_once, descriptor_table_tourney_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_tourney_2eproto::offsets,
  file_level_metadata_tourney_2eproto, file_level_enum_descriptors_tourney_2eproto, file_level_service_descriptors_tourney_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tourney_2eproto_getter() {
  return &descriptor_table_tourney_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tourney_2eproto(&descriptor_table_tourney_2eproto);
namespace cproto {

// ===================================================================

class TourneyReq::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& req(const TourneyReq* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
TourneyReq::_Internal::req(const TourneyReq* msg) {
  return *msg->req_;
}
void TourneyReq::clear_req() {
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
TourneyReq::TourneyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TourneyReq)
}
TourneyReq::TourneyReq(const TourneyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_req()) {
    req_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.req_);
  } else {
    req_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cproto.TourneyReq)
}

inline void TourneyReq::SharedCtor() {
req_ = nullptr;
}

TourneyReq::~TourneyReq() {
  // @@protoc_insertion_point(destructor:cproto.TourneyReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TourneyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete req_;
}

void TourneyReq::ArenaDtor(void* object) {
  TourneyReq* _this = reinterpret_cast< TourneyReq* >(object);
  (void)_this;
}
void TourneyReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TourneyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TourneyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TourneyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TourneyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TourneyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TourneyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any req = 1;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TourneyReq)
  return target;
}

size_t TourneyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TourneyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any req = 1;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TourneyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TourneyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TourneyReq::GetClassData() const { return &_class_data_; }

void TourneyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TourneyReq *>(to)->MergeFrom(
      static_cast<const TourneyReq &>(from));
}


void TourneyReq::MergeFrom(const TourneyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TourneyReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_req()) {
    _internal_mutable_req()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_req());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TourneyReq::CopyFrom(const TourneyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TourneyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TourneyReq::IsInitialized() const {
  return true;
}

void TourneyReq::InternalSwap(TourneyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(req_, other->req_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TourneyReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tourney_2eproto_getter, &descriptor_table_tourney_2eproto_once,
      file_level_metadata_tourney_2eproto[0]);
}

// ===================================================================

class TourneyAck::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& ack(const TourneyAck* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
TourneyAck::_Internal::ack(const TourneyAck* msg) {
  return *msg->ack_;
}
void TourneyAck::clear_ack() {
  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
}
TourneyAck::TourneyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TourneyAck)
}
TourneyAck::TourneyAck(const TourneyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ack()) {
    ack_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.ack_);
  } else {
    ack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cproto.TourneyAck)
}

inline void TourneyAck::SharedCtor() {
ack_ = nullptr;
}

TourneyAck::~TourneyAck() {
  // @@protoc_insertion_point(destructor:cproto.TourneyAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TourneyAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ack_;
}

void TourneyAck::ArenaDtor(void* object) {
  TourneyAck* _this = reinterpret_cast< TourneyAck* >(object);
  (void)_this;
}
void TourneyAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TourneyAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TourneyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TourneyAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TourneyAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TourneyAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TourneyAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any ack = 1;
  if (this->_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TourneyAck)
  return target;
}

size_t TourneyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TourneyAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any ack = 1;
  if (this->_internal_has_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TourneyAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TourneyAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TourneyAck::GetClassData() const { return &_class_data_; }

void TourneyAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TourneyAck *>(to)->MergeFrom(
      static_cast<const TourneyAck &>(from));
}


void TourneyAck::MergeFrom(const TourneyAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TourneyAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ack()) {
    _internal_mutable_ack()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TourneyAck::CopyFrom(const TourneyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TourneyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TourneyAck::IsInitialized() const {
  return true;
}

void TourneyAck::InternalSwap(TourneyAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ack_, other->ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TourneyAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tourney_2eproto_getter, &descriptor_table_tourney_2eproto_once,
      file_level_metadata_tourney_2eproto[1]);
}

// ===================================================================

class TouneyListReq::_Internal {
 public:
};

TouneyListReq::TouneyListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TouneyListReq)
}
TouneyListReq::TouneyListReq(const TouneyListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_type().empty()) {
    game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_type(), 
      GetArenaForAllocation());
  }
  match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    match_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_match_type().empty()) {
    match_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cproto.TouneyListReq)
}

inline void TouneyListReq::SharedCtor() {
game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  match_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TouneyListReq::~TouneyListReq() {
  // @@protoc_insertion_point(destructor:cproto.TouneyListReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TouneyListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  game_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TouneyListReq::ArenaDtor(void* object) {
  TouneyListReq* _this = reinterpret_cast< TouneyListReq* >(object);
  (void)_this;
}
void TouneyListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TouneyListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TouneyListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TouneyListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_type_.ClearToEmpty();
  match_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TouneyListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string game_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_game_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TouneyListReq.game_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string match_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_match_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TouneyListReq.match_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TouneyListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TouneyListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_type = 1;
  if (!this->_internal_game_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_type().data(), static_cast<int>(this->_internal_game_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TouneyListReq.game_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_type(), target);
  }

  // string match_type = 2;
  if (!this->_internal_match_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_type().data(), static_cast<int>(this->_internal_match_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TouneyListReq.match_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TouneyListReq)
  return target;
}

size_t TouneyListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TouneyListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string game_type = 1;
  if (!this->_internal_game_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_type());
  }

  // string match_type = 2;
  if (!this->_internal_match_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TouneyListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TouneyListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TouneyListReq::GetClassData() const { return &_class_data_; }

void TouneyListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TouneyListReq *>(to)->MergeFrom(
      static_cast<const TouneyListReq &>(from));
}


void TouneyListReq::MergeFrom(const TouneyListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TouneyListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_game_type().empty()) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (!from._internal_match_type().empty()) {
    _internal_set_match_type(from._internal_match_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TouneyListReq::CopyFrom(const TouneyListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TouneyListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouneyListReq::IsInitialized() const {
  return true;
}

void TouneyListReq::InternalSwap(TouneyListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_type_, lhs_arena,
      &other->game_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &match_type_, lhs_arena,
      &other->match_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TouneyListReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tourney_2eproto_getter, &descriptor_table_tourney_2eproto_once,
      file_level_metadata_tourney_2eproto[2]);
}

// ===================================================================

class TouneyListAck::_Internal {
 public:
};

TouneyListAck::TouneyListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tounreys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TouneyListAck)
}
TouneyListAck::TouneyListAck(const TouneyListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tounreys_(from.tounreys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.TouneyListAck)
}

inline void TouneyListAck::SharedCtor() {
}

TouneyListAck::~TouneyListAck() {
  // @@protoc_insertion_point(destructor:cproto.TouneyListAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TouneyListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TouneyListAck::ArenaDtor(void* object) {
  TouneyListAck* _this = reinterpret_cast< TouneyListAck* >(object);
  (void)_this;
}
void TouneyListAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TouneyListAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TouneyListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TouneyListAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tounreys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TouneyListAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cproto.TounreyInfo tounreys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tounreys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TouneyListAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TouneyListAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cproto.TounreyInfo tounreys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tounreys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tounreys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TouneyListAck)
  return target;
}

size_t TouneyListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TouneyListAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cproto.TounreyInfo tounreys = 1;
  total_size += 1UL * this->_internal_tounreys_size();
  for (const auto& msg : this->tounreys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TouneyListAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TouneyListAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TouneyListAck::GetClassData() const { return &_class_data_; }

void TouneyListAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TouneyListAck *>(to)->MergeFrom(
      static_cast<const TouneyListAck &>(from));
}


void TouneyListAck::MergeFrom(const TouneyListAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TouneyListAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tounreys_.MergeFrom(from.tounreys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TouneyListAck::CopyFrom(const TouneyListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TouneyListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouneyListAck::IsInitialized() const {
  return true;
}

void TouneyListAck::InternalSwap(TouneyListAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tounreys_.InternalSwap(&other->tounreys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TouneyListAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tourney_2eproto_getter, &descriptor_table_tourney_2eproto_once,
      file_level_metadata_tourney_2eproto[3]);
}

// ===================================================================

class TounreyInfo::_Internal {
 public:
};

TounreyInfo::TounreyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.TounreyInfo)
}
TounreyInfo::TounreyInfo(const TounreyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_type().empty()) {
    game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_type(), 
      GetArenaForAllocation());
  }
  match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    match_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_match_type().empty()) {
    match_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_type(), 
      GetArenaForAllocation());
  }
  serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&id_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:cproto.TounreyInfo)
}

inline void TounreyInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  match_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&id_)) + sizeof(online_));
}

TounreyInfo::~TounreyInfo() {
  // @@protoc_insertion_point(destructor:cproto.TounreyInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TounreyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  match_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TounreyInfo::ArenaDtor(void* object) {
  TounreyInfo* _this = reinterpret_cast< TounreyInfo* >(object);
  (void)_this;
}
void TounreyInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TounreyInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TounreyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.TounreyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  game_type_.ClearToEmpty();
  match_type_.ClearToEmpty();
  serverid_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&id_)) + sizeof(online_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TounreyInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TounreyInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_game_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TounreyInfo.game_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string match_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_match_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TounreyInfo.match_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serverid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_serverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.TounreyInfo.serverid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 diamond = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 online = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TounreyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.TounreyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TounreyInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string game_type = 3;
  if (!this->_internal_game_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_type().data(), static_cast<int>(this->_internal_game_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TounreyInfo.game_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_game_type(), target);
  }

  // string match_type = 4;
  if (!this->_internal_match_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_type().data(), static_cast<int>(this->_internal_match_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TounreyInfo.match_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_match_type(), target);
  }

  // string serverid = 5;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.TounreyInfo.serverid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_serverid(), target);
  }

  // int32 diamond = 6;
  if (this->_internal_diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_diamond(), target);
  }

  // int32 online = 7;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.TounreyInfo)
  return target;
}

size_t TounreyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.TounreyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string game_type = 3;
  if (!this->_internal_game_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_type());
  }

  // string match_type = 4;
  if (!this->_internal_match_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_type());
  }

  // string serverid = 5;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 diamond = 6;
  if (this->_internal_diamond() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_diamond());
  }

  // int32 online = 7;
  if (this->_internal_online() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_online());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TounreyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TounreyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TounreyInfo::GetClassData() const { return &_class_data_; }

void TounreyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TounreyInfo *>(to)->MergeFrom(
      static_cast<const TounreyInfo &>(from));
}


void TounreyInfo::MergeFrom(const TounreyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.TounreyInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_game_type().empty()) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (!from._internal_match_type().empty()) {
    _internal_set_match_type(from._internal_match_type());
  }
  if (!from._internal_serverid().empty()) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_diamond() != 0) {
    _internal_set_diamond(from._internal_diamond());
  }
  if (from._internal_online() != 0) {
    _internal_set_online(from._internal_online());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TounreyInfo::CopyFrom(const TounreyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.TounreyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TounreyInfo::IsInitialized() const {
  return true;
}

void TounreyInfo::InternalSwap(TounreyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_type_, lhs_arena,
      &other->game_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &match_type_, lhs_arena,
      &other->match_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverid_, lhs_arena,
      &other->serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TounreyInfo, online_)
      + sizeof(TounreyInfo::online_)
      - PROTOBUF_FIELD_OFFSET(TounreyInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TounreyInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tourney_2eproto_getter, &descriptor_table_tourney_2eproto_once,
      file_level_metadata_tourney_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cproto::TourneyReq* Arena::CreateMaybeMessage< ::cproto::TourneyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TourneyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::TourneyAck* Arena::CreateMaybeMessage< ::cproto::TourneyAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TourneyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::TouneyListReq* Arena::CreateMaybeMessage< ::cproto::TouneyListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TouneyListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::TouneyListAck* Arena::CreateMaybeMessage< ::cproto::TouneyListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TouneyListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::TounreyInfo* Arena::CreateMaybeMessage< ::cproto::TounreyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::TounreyInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
