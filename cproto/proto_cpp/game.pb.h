// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_2eproto;
namespace cproto {
class EnterGameAck;
struct EnterGameAckDefaultTypeInternal;
extern EnterGameAckDefaultTypeInternal _EnterGameAck_default_instance_;
class EnterGameAck_FdpropertyEntry_DoNotUse;
struct EnterGameAck_FdpropertyEntry_DoNotUseDefaultTypeInternal;
extern EnterGameAck_FdpropertyEntry_DoNotUseDefaultTypeInternal _EnterGameAck_FdpropertyEntry_DoNotUse_default_instance_;
class EnterGameReq;
struct EnterGameReqDefaultTypeInternal;
extern EnterGameReqDefaultTypeInternal _EnterGameReq_default_instance_;
class GameAck;
struct GameAckDefaultTypeInternal;
extern GameAckDefaultTypeInternal _GameAck_default_instance_;
class GameBeginAck;
struct GameBeginAckDefaultTypeInternal;
extern GameBeginAckDefaultTypeInternal _GameBeginAck_default_instance_;
class GameDissolveAck;
struct GameDissolveAckDefaultTypeInternal;
extern GameDissolveAckDefaultTypeInternal _GameDissolveAck_default_instance_;
class GameDissolveAck_AgreedEntry_DoNotUse;
struct GameDissolveAck_AgreedEntry_DoNotUseDefaultTypeInternal;
extern GameDissolveAck_AgreedEntry_DoNotUseDefaultTypeInternal _GameDissolveAck_AgreedEntry_DoNotUse_default_instance_;
class GameDissolveReq;
struct GameDissolveReqDefaultTypeInternal;
extern GameDissolveReqDefaultTypeInternal _GameDissolveReq_default_instance_;
class GameDissolveResultAck;
struct GameDissolveResultAckDefaultTypeInternal;
extern GameDissolveResultAckDefaultTypeInternal _GameDissolveResultAck_default_instance_;
class GameOverAck;
struct GameOverAckDefaultTypeInternal;
extern GameOverAckDefaultTypeInternal _GameOverAck_default_instance_;
class GameReadyAck;
struct GameReadyAckDefaultTypeInternal;
extern GameReadyAckDefaultTypeInternal _GameReadyAck_default_instance_;
class GameReadyReq;
struct GameReadyReqDefaultTypeInternal;
extern GameReadyReqDefaultTypeInternal _GameReadyReq_default_instance_;
class GameReq;
struct GameReqDefaultTypeInternal;
extern GameReqDefaultTypeInternal _GameReq_default_instance_;
class HisBeginAck;
struct HisBeginAckDefaultTypeInternal;
extern HisBeginAckDefaultTypeInternal _HisBeginAck_default_instance_;
class HisEndAck;
struct HisEndAckDefaultTypeInternal;
extern HisEndAckDefaultTypeInternal _HisEndAck_default_instance_;
class TableMsgAck;
struct TableMsgAckDefaultTypeInternal;
extern TableMsgAckDefaultTypeInternal _TableMsgAck_default_instance_;
class TableMsgReq;
struct TableMsgReqDefaultTypeInternal;
extern TableMsgReqDefaultTypeInternal _TableMsgReq_default_instance_;
class TablePlayerAck;
struct TablePlayerAckDefaultTypeInternal;
extern TablePlayerAckDefaultTypeInternal _TablePlayerAck_default_instance_;
}  // namespace cproto
PROTOBUF_NAMESPACE_OPEN
template<> ::cproto::EnterGameAck* Arena::CreateMaybeMessage<::cproto::EnterGameAck>(Arena*);
template<> ::cproto::EnterGameAck_FdpropertyEntry_DoNotUse* Arena::CreateMaybeMessage<::cproto::EnterGameAck_FdpropertyEntry_DoNotUse>(Arena*);
template<> ::cproto::EnterGameReq* Arena::CreateMaybeMessage<::cproto::EnterGameReq>(Arena*);
template<> ::cproto::GameAck* Arena::CreateMaybeMessage<::cproto::GameAck>(Arena*);
template<> ::cproto::GameBeginAck* Arena::CreateMaybeMessage<::cproto::GameBeginAck>(Arena*);
template<> ::cproto::GameDissolveAck* Arena::CreateMaybeMessage<::cproto::GameDissolveAck>(Arena*);
template<> ::cproto::GameDissolveAck_AgreedEntry_DoNotUse* Arena::CreateMaybeMessage<::cproto::GameDissolveAck_AgreedEntry_DoNotUse>(Arena*);
template<> ::cproto::GameDissolveReq* Arena::CreateMaybeMessage<::cproto::GameDissolveReq>(Arena*);
template<> ::cproto::GameDissolveResultAck* Arena::CreateMaybeMessage<::cproto::GameDissolveResultAck>(Arena*);
template<> ::cproto::GameOverAck* Arena::CreateMaybeMessage<::cproto::GameOverAck>(Arena*);
template<> ::cproto::GameReadyAck* Arena::CreateMaybeMessage<::cproto::GameReadyAck>(Arena*);
template<> ::cproto::GameReadyReq* Arena::CreateMaybeMessage<::cproto::GameReadyReq>(Arena*);
template<> ::cproto::GameReq* Arena::CreateMaybeMessage<::cproto::GameReq>(Arena*);
template<> ::cproto::HisBeginAck* Arena::CreateMaybeMessage<::cproto::HisBeginAck>(Arena*);
template<> ::cproto::HisEndAck* Arena::CreateMaybeMessage<::cproto::HisEndAck>(Arena*);
template<> ::cproto::TableMsgAck* Arena::CreateMaybeMessage<::cproto::TableMsgAck>(Arena*);
template<> ::cproto::TableMsgReq* Arena::CreateMaybeMessage<::cproto::TableMsgReq>(Arena*);
template<> ::cproto::TablePlayerAck* Arena::CreateMaybeMessage<::cproto::TablePlayerAck>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cproto {

// ===================================================================

class GameReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameReq) */ {
 public:
  inline GameReq() : GameReq(nullptr) {}
  ~GameReq() override;
  explicit constexpr GameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameReq(const GameReq& from);
  GameReq(GameReq&& from) noexcept
    : GameReq() {
    *this = ::std::move(from);
  }

  inline GameReq& operator=(const GameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameReq& operator=(GameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameReq* internal_default_instance() {
    return reinterpret_cast<const GameReq*>(
               &_GameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameReq& a, GameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameReq";
  }
  protected:
  explicit GameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
    kReqFieldNumber = 4,
    kMatchidFieldNumber = 2,
    kTableidFieldNumber = 3,
  };
  // string serverid = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // .google.protobuf.Any req = 4;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::PROTOBUF_NAMESPACE_ID::Any& req() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_req();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_req();
  void set_allocated_req(::PROTOBUF_NAMESPACE_ID::Any* req);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_req() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::PROTOBUF_NAMESPACE_ID::Any* req);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_req();

  // int32 matchid = 2;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // int32 tableid = 3;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::Any* req_;
  int32_t matchid_;
  int32_t tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameAck) */ {
 public:
  inline GameAck() : GameAck(nullptr) {}
  ~GameAck() override;
  explicit constexpr GameAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameAck(const GameAck& from);
  GameAck(GameAck&& from) noexcept
    : GameAck() {
    *this = ::std::move(from);
  }

  inline GameAck& operator=(const GameAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameAck& operator=(GameAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameAck* internal_default_instance() {
    return reinterpret_cast<const GameAck*>(
               &_GameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameAck& a, GameAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GameAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameAck";
  }
  protected:
  explicit GameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
    kAckFieldNumber = 4,
    kMatchidFieldNumber = 2,
    kTableidFieldNumber = 3,
  };
  // string serverid = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // .google.protobuf.Any ack = 4;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  const ::PROTOBUF_NAMESPACE_ID::Any& ack() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_ack();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_ack();
  void set_allocated_ack(::PROTOBUF_NAMESPACE_ID::Any* ack);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_ack() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_ack();
  public:
  void unsafe_arena_set_allocated_ack(
      ::PROTOBUF_NAMESPACE_ID::Any* ack);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_ack();

  // int32 matchid = 2;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // int32 tableid = 3;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::Any* ack_;
  int32_t matchid_;
  int32_t tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterGameReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cproto.EnterGameReq) */ {
 public:
  inline EnterGameReq() : EnterGameReq(nullptr) {}
  explicit constexpr EnterGameReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterGameReq(const EnterGameReq& from);
  EnterGameReq(EnterGameReq&& from) noexcept
    : EnterGameReq() {
    *this = ::std::move(from);
  }

  inline EnterGameReq& operator=(const EnterGameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterGameReq& operator=(EnterGameReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterGameReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterGameReq* internal_default_instance() {
    return reinterpret_cast<const EnterGameReq*>(
               &_EnterGameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnterGameReq& a, EnterGameReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterGameReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterGameReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterGameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterGameReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EnterGameReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EnterGameReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.EnterGameReq";
  }
  protected:
  explicit EnterGameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cproto.EnterGameReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameReadyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameReadyReq) */ {
 public:
  inline GameReadyReq() : GameReadyReq(nullptr) {}
  ~GameReadyReq() override;
  explicit constexpr GameReadyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameReadyReq(const GameReadyReq& from);
  GameReadyReq(GameReadyReq&& from) noexcept
    : GameReadyReq() {
    *this = ::std::move(from);
  }

  inline GameReadyReq& operator=(const GameReadyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameReadyReq& operator=(GameReadyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameReadyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameReadyReq* internal_default_instance() {
    return reinterpret_cast<const GameReadyReq*>(
               &_GameReadyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameReadyReq& a, GameReadyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GameReadyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameReadyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameReadyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameReadyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameReadyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameReadyReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameReadyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameReadyReq";
  }
  protected:
  explicit GameReadyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyFieldNumber = 1,
  };
  // bool ready = 1;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameReadyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameDissolveReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameDissolveReq) */ {
 public:
  inline GameDissolveReq() : GameDissolveReq(nullptr) {}
  ~GameDissolveReq() override;
  explicit constexpr GameDissolveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameDissolveReq(const GameDissolveReq& from);
  GameDissolveReq(GameDissolveReq&& from) noexcept
    : GameDissolveReq() {
    *this = ::std::move(from);
  }

  inline GameDissolveReq& operator=(const GameDissolveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameDissolveReq& operator=(GameDissolveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameDissolveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameDissolveReq* internal_default_instance() {
    return reinterpret_cast<const GameDissolveReq*>(
               &_GameDissolveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameDissolveReq& a, GameDissolveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GameDissolveReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameDissolveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameDissolveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameDissolveReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameDissolveReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameDissolveReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameDissolveReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameDissolveReq";
  }
  protected:
  explicit GameDissolveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgreeFieldNumber = 1,
  };
  // bool agree = 1;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameDissolveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool agree_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class EnterGameAck_FdpropertyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EnterGameAck_FdpropertyEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EnterGameAck_FdpropertyEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  EnterGameAck_FdpropertyEntry_DoNotUse();
  explicit constexpr EnterGameAck_FdpropertyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EnterGameAck_FdpropertyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EnterGameAck_FdpropertyEntry_DoNotUse& other);
  static const EnterGameAck_FdpropertyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EnterGameAck_FdpropertyEntry_DoNotUse*>(&_EnterGameAck_FdpropertyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "cproto.EnterGameAck.FdpropertyEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class EnterGameAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.EnterGameAck) */ {
 public:
  inline EnterGameAck() : EnterGameAck(nullptr) {}
  ~EnterGameAck() override;
  explicit constexpr EnterGameAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnterGameAck(const EnterGameAck& from);
  EnterGameAck(EnterGameAck&& from) noexcept
    : EnterGameAck() {
    *this = ::std::move(from);
  }

  inline EnterGameAck& operator=(const EnterGameAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterGameAck& operator=(EnterGameAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnterGameAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnterGameAck* internal_default_instance() {
    return reinterpret_cast<const EnterGameAck*>(
               &_EnterGameAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EnterGameAck& a, EnterGameAck& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterGameAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterGameAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnterGameAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnterGameAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnterGameAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnterGameAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterGameAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.EnterGameAck";
  }
  protected:
  explicit EnterGameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFdpropertyFieldNumber = 9,
    kPropertyFieldNumber = 6,
    kCreatorFieldNumber = 7,
    kDesnFieldNumber = 8,
    kScoreBaseFieldNumber = 2,
    kTableidFieldNumber = 1,
    kGameCountFieldNumber = 3,
    kCurGameCountFieldNumber = 4,
    kPlayerCountFieldNumber = 5,
  };
  // map<string, int32> fdproperty = 9;
  int fdproperty_size() const;
  private:
  int _internal_fdproperty_size() const;
  public:
  void clear_fdproperty();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_fdproperty() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_fdproperty();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      fdproperty() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_fdproperty();

  // string property = 6;
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // string creator = 7;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string desn = 8;
  void clear_desn();
  const std::string& desn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desn();
  PROTOBUF_NODISCARD std::string* release_desn();
  void set_allocated_desn(std::string* desn);
  private:
  const std::string& _internal_desn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desn(const std::string& value);
  std::string* _internal_mutable_desn();
  public:

  // int64 score_base = 2;
  void clear_score_base();
  int64_t score_base() const;
  void set_score_base(int64_t value);
  private:
  int64_t _internal_score_base() const;
  void _internal_set_score_base(int64_t value);
  public:

  // int32 tableid = 1;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // int32 game_count = 3;
  void clear_game_count();
  int32_t game_count() const;
  void set_game_count(int32_t value);
  private:
  int32_t _internal_game_count() const;
  void _internal_set_game_count(int32_t value);
  public:

  // int32 cur_game_count = 4;
  void clear_cur_game_count();
  int32_t cur_game_count() const;
  void set_cur_game_count(int32_t value);
  private:
  int32_t _internal_cur_game_count() const;
  void _internal_set_cur_game_count(int32_t value);
  public:

  // int32 player_count = 5;
  void clear_player_count();
  int32_t player_count() const;
  void set_player_count(int32_t value);
  private:
  int32_t _internal_player_count() const;
  void _internal_set_player_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.EnterGameAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EnterGameAck_FdpropertyEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> fdproperty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desn_;
  int64_t score_base_;
  int32_t tableid_;
  int32_t game_count_;
  int32_t cur_game_count_;
  int32_t player_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class TablePlayerAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TablePlayerAck) */ {
 public:
  inline TablePlayerAck() : TablePlayerAck(nullptr) {}
  ~TablePlayerAck() override;
  explicit constexpr TablePlayerAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TablePlayerAck(const TablePlayerAck& from);
  TablePlayerAck(TablePlayerAck&& from) noexcept
    : TablePlayerAck() {
    *this = ::std::move(from);
  }

  inline TablePlayerAck& operator=(const TablePlayerAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TablePlayerAck& operator=(TablePlayerAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TablePlayerAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const TablePlayerAck* internal_default_instance() {
    return reinterpret_cast<const TablePlayerAck*>(
               &_TablePlayerAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TablePlayerAck& a, TablePlayerAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TablePlayerAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TablePlayerAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TablePlayerAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TablePlayerAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TablePlayerAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TablePlayerAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TablePlayerAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TablePlayerAck";
  }
  protected:
  explicit TablePlayerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kDiamondFieldNumber = 5,
    kVipFieldNumber = 4,
    kSeatFieldNumber = 6,
    kReadyFieldNumber = 7,
  };
  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_NODISCARD std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // int64 diamond = 5;
  void clear_diamond();
  int64_t diamond() const;
  void set_diamond(int64_t value);
  private:
  int64_t _internal_diamond() const;
  void _internal_set_diamond(int64_t value);
  public:

  // int32 vip = 4;
  void clear_vip();
  int32_t vip() const;
  void set_vip(int32_t value);
  private:
  int32_t _internal_vip() const;
  void _internal_set_vip(int32_t value);
  public:

  // int32 seat = 6;
  void clear_seat();
  int32_t seat() const;
  void set_seat(int32_t value);
  private:
  int32_t _internal_seat() const;
  void _internal_set_seat(int32_t value);
  public:

  // bool ready = 7;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.TablePlayerAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  int64_t diamond_;
  int32_t vip_;
  int32_t seat_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class TableMsgReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TableMsgReq) */ {
 public:
  inline TableMsgReq() : TableMsgReq(nullptr) {}
  ~TableMsgReq() override;
  explicit constexpr TableMsgReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableMsgReq(const TableMsgReq& from);
  TableMsgReq(TableMsgReq&& from) noexcept
    : TableMsgReq() {
    *this = ::std::move(from);
  }

  inline TableMsgReq& operator=(const TableMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableMsgReq& operator=(TableMsgReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableMsgReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableMsgReq* internal_default_instance() {
    return reinterpret_cast<const TableMsgReq*>(
               &_TableMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TableMsgReq& a, TableMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(TableMsgReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableMsgReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableMsgReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TableMsgReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableMsgReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TableMsgReq";
  }
  protected:
  explicit TableMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:cproto.TableMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class TableMsgAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.TableMsgAck) */ {
 public:
  inline TableMsgAck() : TableMsgAck(nullptr) {}
  ~TableMsgAck() override;
  explicit constexpr TableMsgAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableMsgAck(const TableMsgAck& from);
  TableMsgAck(TableMsgAck&& from) noexcept
    : TableMsgAck() {
    *this = ::std::move(from);
  }

  inline TableMsgAck& operator=(const TableMsgAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableMsgAck& operator=(TableMsgAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableMsgAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableMsgAck* internal_default_instance() {
    return reinterpret_cast<const TableMsgAck*>(
               &_TableMsgAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TableMsgAck& a, TableMsgAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TableMsgAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableMsgAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableMsgAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableMsgAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableMsgAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TableMsgAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableMsgAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.TableMsgAck";
  }
  protected:
  explicit TableMsgAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:cproto.TableMsgAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameReadyAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameReadyAck) */ {
 public:
  inline GameReadyAck() : GameReadyAck(nullptr) {}
  ~GameReadyAck() override;
  explicit constexpr GameReadyAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameReadyAck(const GameReadyAck& from);
  GameReadyAck(GameReadyAck&& from) noexcept
    : GameReadyAck() {
    *this = ::std::move(from);
  }

  inline GameReadyAck& operator=(const GameReadyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameReadyAck& operator=(GameReadyAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameReadyAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameReadyAck* internal_default_instance() {
    return reinterpret_cast<const GameReadyAck*>(
               &_GameReadyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameReadyAck& a, GameReadyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GameReadyAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameReadyAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameReadyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameReadyAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameReadyAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameReadyAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameReadyAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameReadyAck";
  }
  protected:
  explicit GameReadyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatFieldNumber = 1,
    kReadyFieldNumber = 2,
  };
  // int32 seat = 1;
  void clear_seat();
  int32_t seat() const;
  void set_seat(int32_t value);
  private:
  int32_t _internal_seat() const;
  void _internal_set_seat(int32_t value);
  public:

  // bool ready = 2;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameReadyAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t seat_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameDissolveAck_AgreedEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameDissolveAck_AgreedEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GameDissolveAck_AgreedEntry_DoNotUse, 
    int32_t, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  GameDissolveAck_AgreedEntry_DoNotUse();
  explicit constexpr GameDissolveAck_AgreedEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GameDissolveAck_AgreedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GameDissolveAck_AgreedEntry_DoNotUse& other);
  static const GameDissolveAck_AgreedEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameDissolveAck_AgreedEntry_DoNotUse*>(&_GameDissolveAck_AgreedEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class GameDissolveAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameDissolveAck) */ {
 public:
  inline GameDissolveAck() : GameDissolveAck(nullptr) {}
  ~GameDissolveAck() override;
  explicit constexpr GameDissolveAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameDissolveAck(const GameDissolveAck& from);
  GameDissolveAck(GameDissolveAck&& from) noexcept
    : GameDissolveAck() {
    *this = ::std::move(from);
  }

  inline GameDissolveAck& operator=(const GameDissolveAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameDissolveAck& operator=(GameDissolveAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameDissolveAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameDissolveAck* internal_default_instance() {
    return reinterpret_cast<const GameDissolveAck*>(
               &_GameDissolveAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GameDissolveAck& a, GameDissolveAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GameDissolveAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameDissolveAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameDissolveAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameDissolveAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameDissolveAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameDissolveAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameDissolveAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameDissolveAck";
  }
  protected:
  explicit GameDissolveAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAgreedFieldNumber = 4,
    kStarttimeFieldNumber = 1,
    kEndtimeFieldNumber = 2,
    kSeatFieldNumber = 3,
  };
  // map<int32, bool> agreed = 4;
  int agreed_size() const;
  private:
  int _internal_agreed_size() const;
  public:
  void clear_agreed();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      _internal_agreed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      _internal_mutable_agreed();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
      agreed() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
      mutable_agreed();

  // int64 starttime = 1;
  void clear_starttime();
  int64_t starttime() const;
  void set_starttime(int64_t value);
  private:
  int64_t _internal_starttime() const;
  void _internal_set_starttime(int64_t value);
  public:

  // int64 endtime = 2;
  void clear_endtime();
  int64_t endtime() const;
  void set_endtime(int64_t value);
  private:
  int64_t _internal_endtime() const;
  void _internal_set_endtime(int64_t value);
  public:

  // int32 seat = 3;
  void clear_seat();
  int32_t seat() const;
  void set_seat(int32_t value);
  private:
  int32_t _internal_seat() const;
  void _internal_set_seat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameDissolveAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GameDissolveAck_AgreedEntry_DoNotUse,
      int32_t, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> agreed_;
  int64_t starttime_;
  int64_t endtime_;
  int32_t seat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameDissolveResultAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameDissolveResultAck) */ {
 public:
  inline GameDissolveResultAck() : GameDissolveResultAck(nullptr) {}
  ~GameDissolveResultAck() override;
  explicit constexpr GameDissolveResultAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameDissolveResultAck(const GameDissolveResultAck& from);
  GameDissolveResultAck(GameDissolveResultAck&& from) noexcept
    : GameDissolveResultAck() {
    *this = ::std::move(from);
  }

  inline GameDissolveResultAck& operator=(const GameDissolveResultAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameDissolveResultAck& operator=(GameDissolveResultAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameDissolveResultAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameDissolveResultAck* internal_default_instance() {
    return reinterpret_cast<const GameDissolveResultAck*>(
               &_GameDissolveResultAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GameDissolveResultAck& a, GameDissolveResultAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GameDissolveResultAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameDissolveResultAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameDissolveResultAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameDissolveResultAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameDissolveResultAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameDissolveResultAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameDissolveResultAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameDissolveResultAck";
  }
  protected:
  explicit GameDissolveResultAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDissovleFieldNumber = 1,
  };
  // bool dissovle = 1;
  void clear_dissovle();
  bool dissovle() const;
  void set_dissovle(bool value);
  private:
  bool _internal_dissovle() const;
  void _internal_set_dissovle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameDissolveResultAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool dissovle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameBeginAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameBeginAck) */ {
 public:
  inline GameBeginAck() : GameBeginAck(nullptr) {}
  ~GameBeginAck() override;
  explicit constexpr GameBeginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameBeginAck(const GameBeginAck& from);
  GameBeginAck(GameBeginAck&& from) noexcept
    : GameBeginAck() {
    *this = ::std::move(from);
  }

  inline GameBeginAck& operator=(const GameBeginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameBeginAck& operator=(GameBeginAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameBeginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameBeginAck* internal_default_instance() {
    return reinterpret_cast<const GameBeginAck*>(
               &_GameBeginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GameBeginAck& a, GameBeginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GameBeginAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameBeginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameBeginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameBeginAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameBeginAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameBeginAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameBeginAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameBeginAck";
  }
  protected:
  explicit GameBeginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurGameCountFieldNumber = 1,
  };
  // int32 cur_game_count = 1;
  void clear_cur_game_count();
  int32_t cur_game_count() const;
  void set_cur_game_count(int32_t value);
  private:
  int32_t _internal_cur_game_count() const;
  void _internal_set_cur_game_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameBeginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t cur_game_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class GameOverAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.GameOverAck) */ {
 public:
  inline GameOverAck() : GameOverAck(nullptr) {}
  ~GameOverAck() override;
  explicit constexpr GameOverAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameOverAck(const GameOverAck& from);
  GameOverAck(GameOverAck&& from) noexcept
    : GameOverAck() {
    *this = ::std::move(from);
  }

  inline GameOverAck& operator=(const GameOverAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameOverAck& operator=(GameOverAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameOverAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameOverAck* internal_default_instance() {
    return reinterpret_cast<const GameOverAck*>(
               &_GameOverAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GameOverAck& a, GameOverAck& b) {
    a.Swap(&b);
  }
  inline void Swap(GameOverAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameOverAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameOverAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameOverAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameOverAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameOverAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameOverAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.GameOverAck";
  }
  protected:
  explicit GameOverAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyFieldNumber = 2,
    kCurGameCountFieldNumber = 1,
  };
  // repeated bool ready = 2;
  int ready_size() const;
  private:
  int _internal_ready_size() const;
  public:
  void clear_ready();
  private:
  bool _internal_ready(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_ready() const;
  void _internal_add_ready(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_ready();
  public:
  bool ready(int index) const;
  void set_ready(int index, bool value);
  void add_ready(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      ready() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_ready();

  // int32 cur_game_count = 1;
  void clear_cur_game_count();
  int32_t cur_game_count() const;
  void set_cur_game_count(int32_t value);
  private:
  int32_t _internal_cur_game_count() const;
  void _internal_set_cur_game_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.GameOverAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > ready_;
  int32_t cur_game_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class HisBeginAck final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cproto.HisBeginAck) */ {
 public:
  inline HisBeginAck() : HisBeginAck(nullptr) {}
  explicit constexpr HisBeginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HisBeginAck(const HisBeginAck& from);
  HisBeginAck(HisBeginAck&& from) noexcept
    : HisBeginAck() {
    *this = ::std::move(from);
  }

  inline HisBeginAck& operator=(const HisBeginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline HisBeginAck& operator=(HisBeginAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HisBeginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const HisBeginAck* internal_default_instance() {
    return reinterpret_cast<const HisBeginAck*>(
               &_HisBeginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(HisBeginAck& a, HisBeginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(HisBeginAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HisBeginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HisBeginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HisBeginAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HisBeginAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HisBeginAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.HisBeginAck";
  }
  protected:
  explicit HisBeginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cproto.HisBeginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// -------------------------------------------------------------------

class HisEndAck final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cproto.HisEndAck) */ {
 public:
  inline HisEndAck() : HisEndAck(nullptr) {}
  explicit constexpr HisEndAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HisEndAck(const HisEndAck& from);
  HisEndAck(HisEndAck&& from) noexcept
    : HisEndAck() {
    *this = ::std::move(from);
  }

  inline HisEndAck& operator=(const HisEndAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline HisEndAck& operator=(HisEndAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HisEndAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const HisEndAck* internal_default_instance() {
    return reinterpret_cast<const HisEndAck*>(
               &_HisEndAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(HisEndAck& a, HisEndAck& b) {
    a.Swap(&b);
  }
  inline void Swap(HisEndAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HisEndAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HisEndAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HisEndAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HisEndAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HisEndAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.HisEndAck";
  }
  protected:
  explicit HisEndAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cproto.HisEndAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameReq

// string serverid = 1;
inline void GameReq::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& GameReq::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.GameReq.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameReq::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.GameReq.serverid)
}
inline std::string* GameReq::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.GameReq.serverid)
  return _s;
}
inline const std::string& GameReq::_internal_serverid() const {
  return serverid_.Get();
}
inline void GameReq::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameReq::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameReq::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.GameReq.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameReq::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.GameReq.serverid)
}

// int32 matchid = 2;
inline void GameReq::clear_matchid() {
  matchid_ = 0;
}
inline int32_t GameReq::_internal_matchid() const {
  return matchid_;
}
inline int32_t GameReq::matchid() const {
  // @@protoc_insertion_point(field_get:cproto.GameReq.matchid)
  return _internal_matchid();
}
inline void GameReq::_internal_set_matchid(int32_t value) {
  
  matchid_ = value;
}
inline void GameReq::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:cproto.GameReq.matchid)
}

// int32 tableid = 3;
inline void GameReq::clear_tableid() {
  tableid_ = 0;
}
inline int32_t GameReq::_internal_tableid() const {
  return tableid_;
}
inline int32_t GameReq::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.GameReq.tableid)
  return _internal_tableid();
}
inline void GameReq::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void GameReq::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.GameReq.tableid)
}

// .google.protobuf.Any req = 4;
inline bool GameReq::_internal_has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline bool GameReq::has_req() const {
  return _internal_has_req();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GameReq::_internal_req() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = req_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GameReq::req() const {
  // @@protoc_insertion_point(field_get:cproto.GameReq.req)
  return _internal_req();
}
inline void GameReq::unsafe_arena_set_allocated_req(
    ::PROTOBUF_NAMESPACE_ID::Any* req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.GameReq.req)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameReq::release_req() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = req_;
  req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameReq::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:cproto.GameReq.req)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameReq::_internal_mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    req_ = p;
  }
  return req_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameReq::mutable_req() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_req();
  // @@protoc_insertion_point(field_mutable:cproto.GameReq.req)
  return _msg;
}
inline void GameReq::set_allocated_req(::PROTOBUF_NAMESPACE_ID::Any* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req));
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:cproto.GameReq.req)
}

// -------------------------------------------------------------------

// GameAck

// string serverid = 1;
inline void GameAck::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& GameAck::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.GameAck.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameAck::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.GameAck.serverid)
}
inline std::string* GameAck::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.GameAck.serverid)
  return _s;
}
inline const std::string& GameAck::_internal_serverid() const {
  return serverid_.Get();
}
inline void GameAck::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameAck::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameAck::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.GameAck.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameAck::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.GameAck.serverid)
}

// int32 matchid = 2;
inline void GameAck::clear_matchid() {
  matchid_ = 0;
}
inline int32_t GameAck::_internal_matchid() const {
  return matchid_;
}
inline int32_t GameAck::matchid() const {
  // @@protoc_insertion_point(field_get:cproto.GameAck.matchid)
  return _internal_matchid();
}
inline void GameAck::_internal_set_matchid(int32_t value) {
  
  matchid_ = value;
}
inline void GameAck::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:cproto.GameAck.matchid)
}

// int32 tableid = 3;
inline void GameAck::clear_tableid() {
  tableid_ = 0;
}
inline int32_t GameAck::_internal_tableid() const {
  return tableid_;
}
inline int32_t GameAck::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.GameAck.tableid)
  return _internal_tableid();
}
inline void GameAck::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void GameAck::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.GameAck.tableid)
}

// .google.protobuf.Any ack = 4;
inline bool GameAck::_internal_has_ack() const {
  return this != internal_default_instance() && ack_ != nullptr;
}
inline bool GameAck::has_ack() const {
  return _internal_has_ack();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GameAck::_internal_ack() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = ack_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GameAck::ack() const {
  // @@protoc_insertion_point(field_get:cproto.GameAck.ack)
  return _internal_ack();
}
inline void GameAck::unsafe_arena_set_allocated_ack(
    ::PROTOBUF_NAMESPACE_ID::Any* ack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack_);
  }
  ack_ = ack;
  if (ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.GameAck.ack)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameAck::release_ack() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = ack_;
  ack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameAck::unsafe_arena_release_ack() {
  // @@protoc_insertion_point(field_release:cproto.GameAck.ack)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = ack_;
  ack_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameAck::_internal_mutable_ack() {
  
  if (ack_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    ack_ = p;
  }
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GameAck::mutable_ack() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_ack();
  // @@protoc_insertion_point(field_mutable:cproto.GameAck.ack)
  return _msg;
}
inline void GameAck::set_allocated_ack(::PROTOBUF_NAMESPACE_ID::Any* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack_);
  }
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack));
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    
  } else {
    
  }
  ack_ = ack;
  // @@protoc_insertion_point(field_set_allocated:cproto.GameAck.ack)
}

// -------------------------------------------------------------------

// EnterGameReq

// -------------------------------------------------------------------

// GameReadyReq

// bool ready = 1;
inline void GameReadyReq::clear_ready() {
  ready_ = false;
}
inline bool GameReadyReq::_internal_ready() const {
  return ready_;
}
inline bool GameReadyReq::ready() const {
  // @@protoc_insertion_point(field_get:cproto.GameReadyReq.ready)
  return _internal_ready();
}
inline void GameReadyReq::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void GameReadyReq::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:cproto.GameReadyReq.ready)
}

// -------------------------------------------------------------------

// GameDissolveReq

// bool agree = 1;
inline void GameDissolveReq::clear_agree() {
  agree_ = false;
}
inline bool GameDissolveReq::_internal_agree() const {
  return agree_;
}
inline bool GameDissolveReq::agree() const {
  // @@protoc_insertion_point(field_get:cproto.GameDissolveReq.agree)
  return _internal_agree();
}
inline void GameDissolveReq::_internal_set_agree(bool value) {
  
  agree_ = value;
}
inline void GameDissolveReq::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:cproto.GameDissolveReq.agree)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EnterGameAck

// int32 tableid = 1;
inline void EnterGameAck::clear_tableid() {
  tableid_ = 0;
}
inline int32_t EnterGameAck::_internal_tableid() const {
  return tableid_;
}
inline int32_t EnterGameAck::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.tableid)
  return _internal_tableid();
}
inline void EnterGameAck::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void EnterGameAck::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.tableid)
}

// int64 score_base = 2;
inline void EnterGameAck::clear_score_base() {
  score_base_ = int64_t{0};
}
inline int64_t EnterGameAck::_internal_score_base() const {
  return score_base_;
}
inline int64_t EnterGameAck::score_base() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.score_base)
  return _internal_score_base();
}
inline void EnterGameAck::_internal_set_score_base(int64_t value) {
  
  score_base_ = value;
}
inline void EnterGameAck::set_score_base(int64_t value) {
  _internal_set_score_base(value);
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.score_base)
}

// int32 game_count = 3;
inline void EnterGameAck::clear_game_count() {
  game_count_ = 0;
}
inline int32_t EnterGameAck::_internal_game_count() const {
  return game_count_;
}
inline int32_t EnterGameAck::game_count() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.game_count)
  return _internal_game_count();
}
inline void EnterGameAck::_internal_set_game_count(int32_t value) {
  
  game_count_ = value;
}
inline void EnterGameAck::set_game_count(int32_t value) {
  _internal_set_game_count(value);
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.game_count)
}

// int32 cur_game_count = 4;
inline void EnterGameAck::clear_cur_game_count() {
  cur_game_count_ = 0;
}
inline int32_t EnterGameAck::_internal_cur_game_count() const {
  return cur_game_count_;
}
inline int32_t EnterGameAck::cur_game_count() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.cur_game_count)
  return _internal_cur_game_count();
}
inline void EnterGameAck::_internal_set_cur_game_count(int32_t value) {
  
  cur_game_count_ = value;
}
inline void EnterGameAck::set_cur_game_count(int32_t value) {
  _internal_set_cur_game_count(value);
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.cur_game_count)
}

// int32 player_count = 5;
inline void EnterGameAck::clear_player_count() {
  player_count_ = 0;
}
inline int32_t EnterGameAck::_internal_player_count() const {
  return player_count_;
}
inline int32_t EnterGameAck::player_count() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.player_count)
  return _internal_player_count();
}
inline void EnterGameAck::_internal_set_player_count(int32_t value) {
  
  player_count_ = value;
}
inline void EnterGameAck::set_player_count(int32_t value) {
  _internal_set_player_count(value);
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.player_count)
}

// string property = 6;
inline void EnterGameAck::clear_property() {
  property_.ClearToEmpty();
}
inline const std::string& EnterGameAck::property() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnterGameAck::set_property(ArgT0&& arg0, ArgT... args) {
 
 property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.property)
}
inline std::string* EnterGameAck::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:cproto.EnterGameAck.property)
  return _s;
}
inline const std::string& EnterGameAck::_internal_property() const {
  return property_.Get();
}
inline void EnterGameAck::_internal_set_property(const std::string& value) {
  
  property_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnterGameAck::_internal_mutable_property() {
  
  return property_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnterGameAck::release_property() {
  // @@protoc_insertion_point(field_release:cproto.EnterGameAck.property)
  return property_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnterGameAck::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    
  } else {
    
  }
  property_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (property_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    property_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.EnterGameAck.property)
}

// string creator = 7;
inline void EnterGameAck::clear_creator() {
  creator_.ClearToEmpty();
}
inline const std::string& EnterGameAck::creator() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnterGameAck::set_creator(ArgT0&& arg0, ArgT... args) {
 
 creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.creator)
}
inline std::string* EnterGameAck::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:cproto.EnterGameAck.creator)
  return _s;
}
inline const std::string& EnterGameAck::_internal_creator() const {
  return creator_.Get();
}
inline void EnterGameAck::_internal_set_creator(const std::string& value) {
  
  creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnterGameAck::_internal_mutable_creator() {
  
  return creator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnterGameAck::release_creator() {
  // @@protoc_insertion_point(field_release:cproto.EnterGameAck.creator)
  return creator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnterGameAck::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.EnterGameAck.creator)
}

// string desn = 8;
inline void EnterGameAck::clear_desn() {
  desn_.ClearToEmpty();
}
inline const std::string& EnterGameAck::desn() const {
  // @@protoc_insertion_point(field_get:cproto.EnterGameAck.desn)
  return _internal_desn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnterGameAck::set_desn(ArgT0&& arg0, ArgT... args) {
 
 desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.EnterGameAck.desn)
}
inline std::string* EnterGameAck::mutable_desn() {
  std::string* _s = _internal_mutable_desn();
  // @@protoc_insertion_point(field_mutable:cproto.EnterGameAck.desn)
  return _s;
}
inline const std::string& EnterGameAck::_internal_desn() const {
  return desn_.Get();
}
inline void EnterGameAck::_internal_set_desn(const std::string& value) {
  
  desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EnterGameAck::_internal_mutable_desn() {
  
  return desn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EnterGameAck::release_desn() {
  // @@protoc_insertion_point(field_release:cproto.EnterGameAck.desn)
  return desn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EnterGameAck::set_allocated_desn(std::string* desn) {
  if (desn != nullptr) {
    
  } else {
    
  }
  desn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.EnterGameAck.desn)
}

// map<string, int32> fdproperty = 9;
inline int EnterGameAck::_internal_fdproperty_size() const {
  return fdproperty_.size();
}
inline int EnterGameAck::fdproperty_size() const {
  return _internal_fdproperty_size();
}
inline void EnterGameAck::clear_fdproperty() {
  fdproperty_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
EnterGameAck::_internal_fdproperty() const {
  return fdproperty_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
EnterGameAck::fdproperty() const {
  // @@protoc_insertion_point(field_map:cproto.EnterGameAck.fdproperty)
  return _internal_fdproperty();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
EnterGameAck::_internal_mutable_fdproperty() {
  return fdproperty_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
EnterGameAck::mutable_fdproperty() {
  // @@protoc_insertion_point(field_mutable_map:cproto.EnterGameAck.fdproperty)
  return _internal_mutable_fdproperty();
}

// -------------------------------------------------------------------

// TablePlayerAck

// string uid = 1;
inline void TablePlayerAck::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& TablePlayerAck::uid() const {
  // @@protoc_insertion_point(field_get:cproto.TablePlayerAck.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TablePlayerAck::set_uid(ArgT0&& arg0, ArgT... args) {
 
 uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TablePlayerAck.uid)
}
inline std::string* TablePlayerAck::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:cproto.TablePlayerAck.uid)
  return _s;
}
inline const std::string& TablePlayerAck::_internal_uid() const {
  return uid_.Get();
}
inline void TablePlayerAck::_internal_set_uid(const std::string& value) {
  
  uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TablePlayerAck::_internal_mutable_uid() {
  
  return uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TablePlayerAck::release_uid() {
  // @@protoc_insertion_point(field_release:cproto.TablePlayerAck.uid)
  return uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TablePlayerAck::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    uid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TablePlayerAck.uid)
}

// string nickname = 2;
inline void TablePlayerAck::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& TablePlayerAck::nickname() const {
  // @@protoc_insertion_point(field_get:cproto.TablePlayerAck.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TablePlayerAck::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TablePlayerAck.nickname)
}
inline std::string* TablePlayerAck::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:cproto.TablePlayerAck.nickname)
  return _s;
}
inline const std::string& TablePlayerAck::_internal_nickname() const {
  return nickname_.Get();
}
inline void TablePlayerAck::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TablePlayerAck::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TablePlayerAck::release_nickname() {
  // @@protoc_insertion_point(field_release:cproto.TablePlayerAck.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TablePlayerAck::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (nickname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TablePlayerAck.nickname)
}

// string avatar = 3;
inline void TablePlayerAck::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& TablePlayerAck::avatar() const {
  // @@protoc_insertion_point(field_get:cproto.TablePlayerAck.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TablePlayerAck::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TablePlayerAck.avatar)
}
inline std::string* TablePlayerAck::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:cproto.TablePlayerAck.avatar)
  return _s;
}
inline const std::string& TablePlayerAck::_internal_avatar() const {
  return avatar_.Get();
}
inline void TablePlayerAck::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TablePlayerAck::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TablePlayerAck::release_avatar() {
  // @@protoc_insertion_point(field_release:cproto.TablePlayerAck.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TablePlayerAck::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (avatar_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TablePlayerAck.avatar)
}

// int32 vip = 4;
inline void TablePlayerAck::clear_vip() {
  vip_ = 0;
}
inline int32_t TablePlayerAck::_internal_vip() const {
  return vip_;
}
inline int32_t TablePlayerAck::vip() const {
  // @@protoc_insertion_point(field_get:cproto.TablePlayerAck.vip)
  return _internal_vip();
}
inline void TablePlayerAck::_internal_set_vip(int32_t value) {
  
  vip_ = value;
}
inline void TablePlayerAck::set_vip(int32_t value) {
  _internal_set_vip(value);
  // @@protoc_insertion_point(field_set:cproto.TablePlayerAck.vip)
}

// int64 diamond = 5;
inline void TablePlayerAck::clear_diamond() {
  diamond_ = int64_t{0};
}
inline int64_t TablePlayerAck::_internal_diamond() const {
  return diamond_;
}
inline int64_t TablePlayerAck::diamond() const {
  // @@protoc_insertion_point(field_get:cproto.TablePlayerAck.diamond)
  return _internal_diamond();
}
inline void TablePlayerAck::_internal_set_diamond(int64_t value) {
  
  diamond_ = value;
}
inline void TablePlayerAck::set_diamond(int64_t value) {
  _internal_set_diamond(value);
  // @@protoc_insertion_point(field_set:cproto.TablePlayerAck.diamond)
}

// int32 seat = 6;
inline void TablePlayerAck::clear_seat() {
  seat_ = 0;
}
inline int32_t TablePlayerAck::_internal_seat() const {
  return seat_;
}
inline int32_t TablePlayerAck::seat() const {
  // @@protoc_insertion_point(field_get:cproto.TablePlayerAck.seat)
  return _internal_seat();
}
inline void TablePlayerAck::_internal_set_seat(int32_t value) {
  
  seat_ = value;
}
inline void TablePlayerAck::set_seat(int32_t value) {
  _internal_set_seat(value);
  // @@protoc_insertion_point(field_set:cproto.TablePlayerAck.seat)
}

// bool ready = 7;
inline void TablePlayerAck::clear_ready() {
  ready_ = false;
}
inline bool TablePlayerAck::_internal_ready() const {
  return ready_;
}
inline bool TablePlayerAck::ready() const {
  // @@protoc_insertion_point(field_get:cproto.TablePlayerAck.ready)
  return _internal_ready();
}
inline void TablePlayerAck::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void TablePlayerAck::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:cproto.TablePlayerAck.ready)
}

// -------------------------------------------------------------------

// TableMsgReq

// bytes msg = 1;
inline void TableMsgReq::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& TableMsgReq::msg() const {
  // @@protoc_insertion_point(field_get:cproto.TableMsgReq.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableMsgReq::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TableMsgReq.msg)
}
inline std::string* TableMsgReq::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:cproto.TableMsgReq.msg)
  return _s;
}
inline const std::string& TableMsgReq::_internal_msg() const {
  return msg_.Get();
}
inline void TableMsgReq::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TableMsgReq::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TableMsgReq::release_msg() {
  // @@protoc_insertion_point(field_release:cproto.TableMsgReq.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TableMsgReq::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TableMsgReq.msg)
}

// -------------------------------------------------------------------

// TableMsgAck

// bytes msg = 1;
inline void TableMsgAck::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& TableMsgAck::msg() const {
  // @@protoc_insertion_point(field_get:cproto.TableMsgAck.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableMsgAck::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.TableMsgAck.msg)
}
inline std::string* TableMsgAck::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:cproto.TableMsgAck.msg)
  return _s;
}
inline const std::string& TableMsgAck::_internal_msg() const {
  return msg_.Get();
}
inline void TableMsgAck::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TableMsgAck::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TableMsgAck::release_msg() {
  // @@protoc_insertion_point(field_release:cproto.TableMsgAck.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TableMsgAck::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.TableMsgAck.msg)
}

// -------------------------------------------------------------------

// GameReadyAck

// int32 seat = 1;
inline void GameReadyAck::clear_seat() {
  seat_ = 0;
}
inline int32_t GameReadyAck::_internal_seat() const {
  return seat_;
}
inline int32_t GameReadyAck::seat() const {
  // @@protoc_insertion_point(field_get:cproto.GameReadyAck.seat)
  return _internal_seat();
}
inline void GameReadyAck::_internal_set_seat(int32_t value) {
  
  seat_ = value;
}
inline void GameReadyAck::set_seat(int32_t value) {
  _internal_set_seat(value);
  // @@protoc_insertion_point(field_set:cproto.GameReadyAck.seat)
}

// bool ready = 2;
inline void GameReadyAck::clear_ready() {
  ready_ = false;
}
inline bool GameReadyAck::_internal_ready() const {
  return ready_;
}
inline bool GameReadyAck::ready() const {
  // @@protoc_insertion_point(field_get:cproto.GameReadyAck.ready)
  return _internal_ready();
}
inline void GameReadyAck::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void GameReadyAck::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:cproto.GameReadyAck.ready)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GameDissolveAck

// int64 starttime = 1;
inline void GameDissolveAck::clear_starttime() {
  starttime_ = int64_t{0};
}
inline int64_t GameDissolveAck::_internal_starttime() const {
  return starttime_;
}
inline int64_t GameDissolveAck::starttime() const {
  // @@protoc_insertion_point(field_get:cproto.GameDissolveAck.starttime)
  return _internal_starttime();
}
inline void GameDissolveAck::_internal_set_starttime(int64_t value) {
  
  starttime_ = value;
}
inline void GameDissolveAck::set_starttime(int64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:cproto.GameDissolveAck.starttime)
}

// int64 endtime = 2;
inline void GameDissolveAck::clear_endtime() {
  endtime_ = int64_t{0};
}
inline int64_t GameDissolveAck::_internal_endtime() const {
  return endtime_;
}
inline int64_t GameDissolveAck::endtime() const {
  // @@protoc_insertion_point(field_get:cproto.GameDissolveAck.endtime)
  return _internal_endtime();
}
inline void GameDissolveAck::_internal_set_endtime(int64_t value) {
  
  endtime_ = value;
}
inline void GameDissolveAck::set_endtime(int64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:cproto.GameDissolveAck.endtime)
}

// int32 seat = 3;
inline void GameDissolveAck::clear_seat() {
  seat_ = 0;
}
inline int32_t GameDissolveAck::_internal_seat() const {
  return seat_;
}
inline int32_t GameDissolveAck::seat() const {
  // @@protoc_insertion_point(field_get:cproto.GameDissolveAck.seat)
  return _internal_seat();
}
inline void GameDissolveAck::_internal_set_seat(int32_t value) {
  
  seat_ = value;
}
inline void GameDissolveAck::set_seat(int32_t value) {
  _internal_set_seat(value);
  // @@protoc_insertion_point(field_set:cproto.GameDissolveAck.seat)
}

// map<int32, bool> agreed = 4;
inline int GameDissolveAck::_internal_agreed_size() const {
  return agreed_.size();
}
inline int GameDissolveAck::agreed_size() const {
  return _internal_agreed_size();
}
inline void GameDissolveAck::clear_agreed() {
  agreed_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
GameDissolveAck::_internal_agreed() const {
  return agreed_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >&
GameDissolveAck::agreed() const {
  // @@protoc_insertion_point(field_map:cproto.GameDissolveAck.agreed)
  return _internal_agreed();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
GameDissolveAck::_internal_mutable_agreed() {
  return agreed_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, bool >*
GameDissolveAck::mutable_agreed() {
  // @@protoc_insertion_point(field_mutable_map:cproto.GameDissolveAck.agreed)
  return _internal_mutable_agreed();
}

// -------------------------------------------------------------------

// GameDissolveResultAck

// bool dissovle = 1;
inline void GameDissolveResultAck::clear_dissovle() {
  dissovle_ = false;
}
inline bool GameDissolveResultAck::_internal_dissovle() const {
  return dissovle_;
}
inline bool GameDissolveResultAck::dissovle() const {
  // @@protoc_insertion_point(field_get:cproto.GameDissolveResultAck.dissovle)
  return _internal_dissovle();
}
inline void GameDissolveResultAck::_internal_set_dissovle(bool value) {
  
  dissovle_ = value;
}
inline void GameDissolveResultAck::set_dissovle(bool value) {
  _internal_set_dissovle(value);
  // @@protoc_insertion_point(field_set:cproto.GameDissolveResultAck.dissovle)
}

// -------------------------------------------------------------------

// GameBeginAck

// int32 cur_game_count = 1;
inline void GameBeginAck::clear_cur_game_count() {
  cur_game_count_ = 0;
}
inline int32_t GameBeginAck::_internal_cur_game_count() const {
  return cur_game_count_;
}
inline int32_t GameBeginAck::cur_game_count() const {
  // @@protoc_insertion_point(field_get:cproto.GameBeginAck.cur_game_count)
  return _internal_cur_game_count();
}
inline void GameBeginAck::_internal_set_cur_game_count(int32_t value) {
  
  cur_game_count_ = value;
}
inline void GameBeginAck::set_cur_game_count(int32_t value) {
  _internal_set_cur_game_count(value);
  // @@protoc_insertion_point(field_set:cproto.GameBeginAck.cur_game_count)
}

// -------------------------------------------------------------------

// GameOverAck

// int32 cur_game_count = 1;
inline void GameOverAck::clear_cur_game_count() {
  cur_game_count_ = 0;
}
inline int32_t GameOverAck::_internal_cur_game_count() const {
  return cur_game_count_;
}
inline int32_t GameOverAck::cur_game_count() const {
  // @@protoc_insertion_point(field_get:cproto.GameOverAck.cur_game_count)
  return _internal_cur_game_count();
}
inline void GameOverAck::_internal_set_cur_game_count(int32_t value) {
  
  cur_game_count_ = value;
}
inline void GameOverAck::set_cur_game_count(int32_t value) {
  _internal_set_cur_game_count(value);
  // @@protoc_insertion_point(field_set:cproto.GameOverAck.cur_game_count)
}

// repeated bool ready = 2;
inline int GameOverAck::_internal_ready_size() const {
  return ready_.size();
}
inline int GameOverAck::ready_size() const {
  return _internal_ready_size();
}
inline void GameOverAck::clear_ready() {
  ready_.Clear();
}
inline bool GameOverAck::_internal_ready(int index) const {
  return ready_.Get(index);
}
inline bool GameOverAck::ready(int index) const {
  // @@protoc_insertion_point(field_get:cproto.GameOverAck.ready)
  return _internal_ready(index);
}
inline void GameOverAck::set_ready(int index, bool value) {
  ready_.Set(index, value);
  // @@protoc_insertion_point(field_set:cproto.GameOverAck.ready)
}
inline void GameOverAck::_internal_add_ready(bool value) {
  ready_.Add(value);
}
inline void GameOverAck::add_ready(bool value) {
  _internal_add_ready(value);
  // @@protoc_insertion_point(field_add:cproto.GameOverAck.ready)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GameOverAck::_internal_ready() const {
  return ready_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GameOverAck::ready() const {
  // @@protoc_insertion_point(field_list:cproto.GameOverAck.ready)
  return _internal_ready();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GameOverAck::_internal_mutable_ready() {
  return &ready_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GameOverAck::mutable_ready() {
  // @@protoc_insertion_point(field_mutable_list:cproto.GameOverAck.ready)
  return _internal_mutable_ready();
}

// -------------------------------------------------------------------

// HisBeginAck

// -------------------------------------------------------------------

// HisEndAck

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_2eproto
