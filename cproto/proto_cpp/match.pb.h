// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_match_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_match_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_match_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_match_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_match_2eproto;
namespace cproto {
class CancelRoomAck;
struct CancelRoomAckDefaultTypeInternal;
extern CancelRoomAckDefaultTypeInternal _CancelRoomAck_default_instance_;
class CancelRoomReq;
struct CancelRoomReqDefaultTypeInternal;
extern CancelRoomReqDefaultTypeInternal _CancelRoomReq_default_instance_;
class CreateRoomAck;
struct CreateRoomAckDefaultTypeInternal;
extern CreateRoomAckDefaultTypeInternal _CreateRoomAck_default_instance_;
class CreateRoomAck_PropertiesEntry_DoNotUse;
struct CreateRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern CreateRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal _CreateRoomAck_PropertiesEntry_DoNotUse_default_instance_;
class CreateRoomReq;
struct CreateRoomReqDefaultTypeInternal;
extern CreateRoomReqDefaultTypeInternal _CreateRoomReq_default_instance_;
class CreateRoomReq_PropertiesEntry_DoNotUse;
struct CreateRoomReq_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern CreateRoomReq_PropertiesEntry_DoNotUseDefaultTypeInternal _CreateRoomReq_PropertiesEntry_DoNotUse_default_instance_;
class JoinRoomAck;
struct JoinRoomAckDefaultTypeInternal;
extern JoinRoomAckDefaultTypeInternal _JoinRoomAck_default_instance_;
class JoinRoomAck_PropertiesEntry_DoNotUse;
struct JoinRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern JoinRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal _JoinRoomAck_PropertiesEntry_DoNotUse_default_instance_;
class JoinRoomReq;
struct JoinRoomReqDefaultTypeInternal;
extern JoinRoomReqDefaultTypeInternal _JoinRoomReq_default_instance_;
class MatchAck;
struct MatchAckDefaultTypeInternal;
extern MatchAckDefaultTypeInternal _MatchAck_default_instance_;
class MatchReq;
struct MatchReqDefaultTypeInternal;
extern MatchReqDefaultTypeInternal _MatchReq_default_instance_;
}  // namespace cproto
PROTOBUF_NAMESPACE_OPEN
template<> ::cproto::CancelRoomAck* Arena::CreateMaybeMessage<::cproto::CancelRoomAck>(Arena*);
template<> ::cproto::CancelRoomReq* Arena::CreateMaybeMessage<::cproto::CancelRoomReq>(Arena*);
template<> ::cproto::CreateRoomAck* Arena::CreateMaybeMessage<::cproto::CreateRoomAck>(Arena*);
template<> ::cproto::CreateRoomAck_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::cproto::CreateRoomAck_PropertiesEntry_DoNotUse>(Arena*);
template<> ::cproto::CreateRoomReq* Arena::CreateMaybeMessage<::cproto::CreateRoomReq>(Arena*);
template<> ::cproto::CreateRoomReq_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::cproto::CreateRoomReq_PropertiesEntry_DoNotUse>(Arena*);
template<> ::cproto::JoinRoomAck* Arena::CreateMaybeMessage<::cproto::JoinRoomAck>(Arena*);
template<> ::cproto::JoinRoomAck_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::cproto::JoinRoomAck_PropertiesEntry_DoNotUse>(Arena*);
template<> ::cproto::JoinRoomReq* Arena::CreateMaybeMessage<::cproto::JoinRoomReq>(Arena*);
template<> ::cproto::MatchAck* Arena::CreateMaybeMessage<::cproto::MatchAck>(Arena*);
template<> ::cproto::MatchReq* Arena::CreateMaybeMessage<::cproto::MatchReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cproto {

// ===================================================================

class MatchReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.MatchReq) */ {
 public:
  inline MatchReq() : MatchReq(nullptr) {}
  ~MatchReq() override;
  explicit constexpr MatchReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchReq(const MatchReq& from);
  MatchReq(MatchReq&& from) noexcept
    : MatchReq() {
    *this = ::std::move(from);
  }

  inline MatchReq& operator=(const MatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchReq& operator=(MatchReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchReq* internal_default_instance() {
    return reinterpret_cast<const MatchReq*>(
               &_MatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MatchReq& a, MatchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.MatchReq";
  }
  protected:
  explicit MatchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
    kReqFieldNumber = 3,
    kMatchidFieldNumber = 2,
  };
  // string serverid = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // .google.protobuf.Any req = 3;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::PROTOBUF_NAMESPACE_ID::Any& req() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_req();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_req();
  void set_allocated_req(::PROTOBUF_NAMESPACE_ID::Any* req);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_req() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_req();
  public:
  void unsafe_arena_set_allocated_req(
      ::PROTOBUF_NAMESPACE_ID::Any* req);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_req();

  // int32 matchid = 2;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.MatchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::Any* req_;
  int32_t matchid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class MatchAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.MatchAck) */ {
 public:
  inline MatchAck() : MatchAck(nullptr) {}
  ~MatchAck() override;
  explicit constexpr MatchAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchAck(const MatchAck& from);
  MatchAck(MatchAck&& from) noexcept
    : MatchAck() {
    *this = ::std::move(from);
  }

  inline MatchAck& operator=(const MatchAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchAck& operator=(MatchAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchAck* internal_default_instance() {
    return reinterpret_cast<const MatchAck*>(
               &_MatchAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MatchAck& a, MatchAck& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.MatchAck";
  }
  protected:
  explicit MatchAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServeridFieldNumber = 1,
    kAckFieldNumber = 3,
    kMatchidFieldNumber = 2,
  };
  // string serverid = 1;
  void clear_serverid();
  const std::string& serverid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverid();
  PROTOBUF_NODISCARD std::string* release_serverid();
  void set_allocated_serverid(std::string* serverid);
  private:
  const std::string& _internal_serverid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverid(const std::string& value);
  std::string* _internal_mutable_serverid();
  public:

  // .google.protobuf.Any ack = 3;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  const ::PROTOBUF_NAMESPACE_ID::Any& ack() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_ack();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_ack();
  void set_allocated_ack(::PROTOBUF_NAMESPACE_ID::Any* ack);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_ack() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_ack();
  public:
  void unsafe_arena_set_allocated_ack(
      ::PROTOBUF_NAMESPACE_ID::Any* ack);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_ack();

  // int32 matchid = 2;
  void clear_matchid();
  int32_t matchid() const;
  void set_matchid(int32_t value);
  private:
  int32_t _internal_matchid() const;
  void _internal_set_matchid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.MatchAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverid_;
  ::PROTOBUF_NAMESPACE_ID::Any* ack_;
  int32_t matchid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomReq_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateRoomReq_PropertiesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateRoomReq_PropertiesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  CreateRoomReq_PropertiesEntry_DoNotUse();
  explicit constexpr CreateRoomReq_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateRoomReq_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateRoomReq_PropertiesEntry_DoNotUse& other);
  static const CreateRoomReq_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateRoomReq_PropertiesEntry_DoNotUse*>(&_CreateRoomReq_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "cproto.CreateRoomReq.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CreateRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.CreateRoomReq) */ {
 public:
  inline CreateRoomReq() : CreateRoomReq(nullptr) {}
  ~CreateRoomReq() override;
  explicit constexpr CreateRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoomReq(const CreateRoomReq& from);
  CreateRoomReq(CreateRoomReq&& from) noexcept
    : CreateRoomReq() {
    *this = ::std::move(from);
  }

  inline CreateRoomReq& operator=(const CreateRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomReq& operator=(CreateRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomReq* internal_default_instance() {
    return reinterpret_cast<const CreateRoomReq*>(
               &_CreateRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateRoomReq& a, CreateRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoomReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.CreateRoomReq";
  }
  protected:
  explicit CreateRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kDesnFieldNumber = 2,
    kGameCountFieldNumber = 1,
  };
  // map<string, int32> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_properties();

  // string desn = 2;
  void clear_desn();
  const std::string& desn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desn();
  PROTOBUF_NODISCARD std::string* release_desn();
  void set_allocated_desn(std::string* desn);
  private:
  const std::string& _internal_desn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desn(const std::string& value);
  std::string* _internal_mutable_desn();
  public:

  // int32 game_count = 1;
  void clear_game_count();
  int32_t game_count() const;
  void set_game_count(int32_t value);
  private:
  int32_t _internal_game_count() const;
  void _internal_set_game_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.CreateRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateRoomReq_PropertiesEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desn_;
  int32_t game_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class CancelRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.CancelRoomReq) */ {
 public:
  inline CancelRoomReq() : CancelRoomReq(nullptr) {}
  ~CancelRoomReq() override;
  explicit constexpr CancelRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelRoomReq(const CancelRoomReq& from);
  CancelRoomReq(CancelRoomReq&& from) noexcept
    : CancelRoomReq() {
    *this = ::std::move(from);
  }

  inline CancelRoomReq& operator=(const CancelRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRoomReq& operator=(CancelRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRoomReq* internal_default_instance() {
    return reinterpret_cast<const CancelRoomReq*>(
               &_CancelRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CancelRoomReq& a, CancelRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelRoomReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.CancelRoomReq";
  }
  protected:
  explicit CancelRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableidFieldNumber = 1,
  };
  // int32 tableid = 1;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.CancelRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.JoinRoomReq) */ {
 public:
  inline JoinRoomReq() : JoinRoomReq(nullptr) {}
  ~JoinRoomReq() override;
  explicit constexpr JoinRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoomReq(const JoinRoomReq& from);
  JoinRoomReq(JoinRoomReq&& from) noexcept
    : JoinRoomReq() {
    *this = ::std::move(from);
  }

  inline JoinRoomReq& operator=(const JoinRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomReq& operator=(JoinRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomReq* internal_default_instance() {
    return reinterpret_cast<const JoinRoomReq*>(
               &_JoinRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JoinRoomReq& a, JoinRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinRoomReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.JoinRoomReq";
  }
  protected:
  explicit JoinRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableidFieldNumber = 1,
  };
  // int32 tableid = 1;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.JoinRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomAck_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateRoomAck_PropertiesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CreateRoomAck_PropertiesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  CreateRoomAck_PropertiesEntry_DoNotUse();
  explicit constexpr CreateRoomAck_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CreateRoomAck_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CreateRoomAck_PropertiesEntry_DoNotUse& other);
  static const CreateRoomAck_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CreateRoomAck_PropertiesEntry_DoNotUse*>(&_CreateRoomAck_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "cproto.CreateRoomAck.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CreateRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.CreateRoomAck) */ {
 public:
  inline CreateRoomAck() : CreateRoomAck(nullptr) {}
  ~CreateRoomAck() override;
  explicit constexpr CreateRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoomAck(const CreateRoomAck& from);
  CreateRoomAck(CreateRoomAck&& from) noexcept
    : CreateRoomAck() {
    *this = ::std::move(from);
  }

  inline CreateRoomAck& operator=(const CreateRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomAck& operator=(CreateRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomAck* internal_default_instance() {
    return reinterpret_cast<const CreateRoomAck*>(
               &_CreateRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateRoomAck& a, CreateRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRoomAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.CreateRoomAck";
  }
  protected:
  explicit CreateRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kDesnFieldNumber = 2,
    kTableidFieldNumber = 1,
  };
  // map<string, int32> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_properties();

  // string desn = 2;
  void clear_desn();
  const std::string& desn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desn();
  PROTOBUF_NODISCARD std::string* release_desn();
  void set_allocated_desn(std::string* desn);
  private:
  const std::string& _internal_desn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desn(const std::string& value);
  std::string* _internal_mutable_desn();
  public:

  // int32 tableid = 1;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.CreateRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CreateRoomAck_PropertiesEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desn_;
  int32_t tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class CancelRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.CancelRoomAck) */ {
 public:
  inline CancelRoomAck() : CancelRoomAck(nullptr) {}
  ~CancelRoomAck() override;
  explicit constexpr CancelRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelRoomAck(const CancelRoomAck& from);
  CancelRoomAck(CancelRoomAck&& from) noexcept
    : CancelRoomAck() {
    *this = ::std::move(from);
  }

  inline CancelRoomAck& operator=(const CancelRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRoomAck& operator=(CancelRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRoomAck* internal_default_instance() {
    return reinterpret_cast<const CancelRoomAck*>(
               &_CancelRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CancelRoomAck& a, CancelRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelRoomAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.CancelRoomAck";
  }
  protected:
  explicit CancelRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableidFieldNumber = 1,
  };
  // int32 tableid = 1;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.CancelRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class JoinRoomAck_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinRoomAck_PropertiesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinRoomAck_PropertiesEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  JoinRoomAck_PropertiesEntry_DoNotUse();
  explicit constexpr JoinRoomAck_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit JoinRoomAck_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const JoinRoomAck_PropertiesEntry_DoNotUse& other);
  static const JoinRoomAck_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JoinRoomAck_PropertiesEntry_DoNotUse*>(&_JoinRoomAck_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "cproto.JoinRoomAck.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class JoinRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cproto.JoinRoomAck) */ {
 public:
  inline JoinRoomAck() : JoinRoomAck(nullptr) {}
  ~JoinRoomAck() override;
  explicit constexpr JoinRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRoomAck(const JoinRoomAck& from);
  JoinRoomAck(JoinRoomAck&& from) noexcept
    : JoinRoomAck() {
    *this = ::std::move(from);
  }

  inline JoinRoomAck& operator=(const JoinRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRoomAck& operator=(JoinRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRoomAck* internal_default_instance() {
    return reinterpret_cast<const JoinRoomAck*>(
               &_JoinRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(JoinRoomAck& a, JoinRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JoinRoomAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cproto.JoinRoomAck";
  }
  protected:
  explicit JoinRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kDesnFieldNumber = 2,
    kTableidFieldNumber = 1,
  };
  // map<string, int32> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_properties();

  // string desn = 2;
  void clear_desn();
  const std::string& desn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desn();
  PROTOBUF_NODISCARD std::string* release_desn();
  void set_allocated_desn(std::string* desn);
  private:
  const std::string& _internal_desn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desn(const std::string& value);
  std::string* _internal_mutable_desn();
  public:

  // int32 tableid = 1;
  void clear_tableid();
  int32_t tableid() const;
  void set_tableid(int32_t value);
  private:
  int32_t _internal_tableid() const;
  void _internal_set_tableid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cproto.JoinRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      JoinRoomAck_PropertiesEntry_DoNotUse,
      std::string, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desn_;
  int32_t tableid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatchReq

// string serverid = 1;
inline void MatchReq::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& MatchReq::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.MatchReq.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchReq::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.MatchReq.serverid)
}
inline std::string* MatchReq::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.MatchReq.serverid)
  return _s;
}
inline const std::string& MatchReq::_internal_serverid() const {
  return serverid_.Get();
}
inline void MatchReq::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchReq::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchReq::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.MatchReq.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchReq::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.MatchReq.serverid)
}

// int32 matchid = 2;
inline void MatchReq::clear_matchid() {
  matchid_ = 0;
}
inline int32_t MatchReq::_internal_matchid() const {
  return matchid_;
}
inline int32_t MatchReq::matchid() const {
  // @@protoc_insertion_point(field_get:cproto.MatchReq.matchid)
  return _internal_matchid();
}
inline void MatchReq::_internal_set_matchid(int32_t value) {
  
  matchid_ = value;
}
inline void MatchReq::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:cproto.MatchReq.matchid)
}

// .google.protobuf.Any req = 3;
inline bool MatchReq::_internal_has_req() const {
  return this != internal_default_instance() && req_ != nullptr;
}
inline bool MatchReq::has_req() const {
  return _internal_has_req();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MatchReq::_internal_req() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = req_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MatchReq::req() const {
  // @@protoc_insertion_point(field_get:cproto.MatchReq.req)
  return _internal_req();
}
inline void MatchReq::unsafe_arena_set_allocated_req(
    ::PROTOBUF_NAMESPACE_ID::Any* req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  req_ = req;
  if (req) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.MatchReq.req)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchReq::release_req() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = req_;
  req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchReq::unsafe_arena_release_req() {
  // @@protoc_insertion_point(field_release:cproto.MatchReq.req)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = req_;
  req_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchReq::_internal_mutable_req() {
  
  if (req_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    req_ = p;
  }
  return req_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchReq::mutable_req() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_req();
  // @@protoc_insertion_point(field_mutable:cproto.MatchReq.req)
  return _msg;
}
inline void MatchReq::set_allocated_req(::PROTOBUF_NAMESPACE_ID::Any* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(req_);
  }
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(req));
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    
  } else {
    
  }
  req_ = req;
  // @@protoc_insertion_point(field_set_allocated:cproto.MatchReq.req)
}

// -------------------------------------------------------------------

// MatchAck

// string serverid = 1;
inline void MatchAck::clear_serverid() {
  serverid_.ClearToEmpty();
}
inline const std::string& MatchAck::serverid() const {
  // @@protoc_insertion_point(field_get:cproto.MatchAck.serverid)
  return _internal_serverid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchAck::set_serverid(ArgT0&& arg0, ArgT... args) {
 
 serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.MatchAck.serverid)
}
inline std::string* MatchAck::mutable_serverid() {
  std::string* _s = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:cproto.MatchAck.serverid)
  return _s;
}
inline const std::string& MatchAck::_internal_serverid() const {
  return serverid_.Get();
}
inline void MatchAck::_internal_set_serverid(const std::string& value) {
  
  serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchAck::_internal_mutable_serverid() {
  
  return serverid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchAck::release_serverid() {
  // @@protoc_insertion_point(field_release:cproto.MatchAck.serverid)
  return serverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchAck::set_allocated_serverid(std::string* serverid) {
  if (serverid != nullptr) {
    
  } else {
    
  }
  serverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serverid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.MatchAck.serverid)
}

// int32 matchid = 2;
inline void MatchAck::clear_matchid() {
  matchid_ = 0;
}
inline int32_t MatchAck::_internal_matchid() const {
  return matchid_;
}
inline int32_t MatchAck::matchid() const {
  // @@protoc_insertion_point(field_get:cproto.MatchAck.matchid)
  return _internal_matchid();
}
inline void MatchAck::_internal_set_matchid(int32_t value) {
  
  matchid_ = value;
}
inline void MatchAck::set_matchid(int32_t value) {
  _internal_set_matchid(value);
  // @@protoc_insertion_point(field_set:cproto.MatchAck.matchid)
}

// .google.protobuf.Any ack = 3;
inline bool MatchAck::_internal_has_ack() const {
  return this != internal_default_instance() && ack_ != nullptr;
}
inline bool MatchAck::has_ack() const {
  return _internal_has_ack();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MatchAck::_internal_ack() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = ack_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MatchAck::ack() const {
  // @@protoc_insertion_point(field_get:cproto.MatchAck.ack)
  return _internal_ack();
}
inline void MatchAck::unsafe_arena_set_allocated_ack(
    ::PROTOBUF_NAMESPACE_ID::Any* ack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack_);
  }
  ack_ = ack;
  if (ack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cproto.MatchAck.ack)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchAck::release_ack() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = ack_;
  ack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchAck::unsafe_arena_release_ack() {
  // @@protoc_insertion_point(field_release:cproto.MatchAck.ack)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = ack_;
  ack_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchAck::_internal_mutable_ack() {
  
  if (ack_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    ack_ = p;
  }
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MatchAck::mutable_ack() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_ack();
  // @@protoc_insertion_point(field_mutable:cproto.MatchAck.ack)
  return _msg;
}
inline void MatchAck::set_allocated_ack(::PROTOBUF_NAMESPACE_ID::Any* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack_);
  }
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack));
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    
  } else {
    
  }
  ack_ = ack;
  // @@protoc_insertion_point(field_set_allocated:cproto.MatchAck.ack)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateRoomReq

// int32 game_count = 1;
inline void CreateRoomReq::clear_game_count() {
  game_count_ = 0;
}
inline int32_t CreateRoomReq::_internal_game_count() const {
  return game_count_;
}
inline int32_t CreateRoomReq::game_count() const {
  // @@protoc_insertion_point(field_get:cproto.CreateRoomReq.game_count)
  return _internal_game_count();
}
inline void CreateRoomReq::_internal_set_game_count(int32_t value) {
  
  game_count_ = value;
}
inline void CreateRoomReq::set_game_count(int32_t value) {
  _internal_set_game_count(value);
  // @@protoc_insertion_point(field_set:cproto.CreateRoomReq.game_count)
}

// string desn = 2;
inline void CreateRoomReq::clear_desn() {
  desn_.ClearToEmpty();
}
inline const std::string& CreateRoomReq::desn() const {
  // @@protoc_insertion_point(field_get:cproto.CreateRoomReq.desn)
  return _internal_desn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoomReq::set_desn(ArgT0&& arg0, ArgT... args) {
 
 desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.CreateRoomReq.desn)
}
inline std::string* CreateRoomReq::mutable_desn() {
  std::string* _s = _internal_mutable_desn();
  // @@protoc_insertion_point(field_mutable:cproto.CreateRoomReq.desn)
  return _s;
}
inline const std::string& CreateRoomReq::_internal_desn() const {
  return desn_.Get();
}
inline void CreateRoomReq::_internal_set_desn(const std::string& value) {
  
  desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoomReq::_internal_mutable_desn() {
  
  return desn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoomReq::release_desn() {
  // @@protoc_insertion_point(field_release:cproto.CreateRoomReq.desn)
  return desn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoomReq::set_allocated_desn(std::string* desn) {
  if (desn != nullptr) {
    
  } else {
    
  }
  desn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.CreateRoomReq.desn)
}

// map<string, int32> properties = 3;
inline int CreateRoomReq::_internal_properties_size() const {
  return properties_.size();
}
inline int CreateRoomReq::properties_size() const {
  return _internal_properties_size();
}
inline void CreateRoomReq::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CreateRoomReq::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CreateRoomReq::properties() const {
  // @@protoc_insertion_point(field_map:cproto.CreateRoomReq.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CreateRoomReq::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CreateRoomReq::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:cproto.CreateRoomReq.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// CancelRoomReq

// int32 tableid = 1;
inline void CancelRoomReq::clear_tableid() {
  tableid_ = 0;
}
inline int32_t CancelRoomReq::_internal_tableid() const {
  return tableid_;
}
inline int32_t CancelRoomReq::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.CancelRoomReq.tableid)
  return _internal_tableid();
}
inline void CancelRoomReq::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void CancelRoomReq::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.CancelRoomReq.tableid)
}

// -------------------------------------------------------------------

// JoinRoomReq

// int32 tableid = 1;
inline void JoinRoomReq::clear_tableid() {
  tableid_ = 0;
}
inline int32_t JoinRoomReq::_internal_tableid() const {
  return tableid_;
}
inline int32_t JoinRoomReq::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.JoinRoomReq.tableid)
  return _internal_tableid();
}
inline void JoinRoomReq::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void JoinRoomReq::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.JoinRoomReq.tableid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CreateRoomAck

// int32 tableid = 1;
inline void CreateRoomAck::clear_tableid() {
  tableid_ = 0;
}
inline int32_t CreateRoomAck::_internal_tableid() const {
  return tableid_;
}
inline int32_t CreateRoomAck::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.CreateRoomAck.tableid)
  return _internal_tableid();
}
inline void CreateRoomAck::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void CreateRoomAck::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.CreateRoomAck.tableid)
}

// string desn = 2;
inline void CreateRoomAck::clear_desn() {
  desn_.ClearToEmpty();
}
inline const std::string& CreateRoomAck::desn() const {
  // @@protoc_insertion_point(field_get:cproto.CreateRoomAck.desn)
  return _internal_desn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoomAck::set_desn(ArgT0&& arg0, ArgT... args) {
 
 desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.CreateRoomAck.desn)
}
inline std::string* CreateRoomAck::mutable_desn() {
  std::string* _s = _internal_mutable_desn();
  // @@protoc_insertion_point(field_mutable:cproto.CreateRoomAck.desn)
  return _s;
}
inline const std::string& CreateRoomAck::_internal_desn() const {
  return desn_.Get();
}
inline void CreateRoomAck::_internal_set_desn(const std::string& value) {
  
  desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRoomAck::_internal_mutable_desn() {
  
  return desn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRoomAck::release_desn() {
  // @@protoc_insertion_point(field_release:cproto.CreateRoomAck.desn)
  return desn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRoomAck::set_allocated_desn(std::string* desn) {
  if (desn != nullptr) {
    
  } else {
    
  }
  desn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.CreateRoomAck.desn)
}

// map<string, int32> properties = 3;
inline int CreateRoomAck::_internal_properties_size() const {
  return properties_.size();
}
inline int CreateRoomAck::properties_size() const {
  return _internal_properties_size();
}
inline void CreateRoomAck::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CreateRoomAck::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CreateRoomAck::properties() const {
  // @@protoc_insertion_point(field_map:cproto.CreateRoomAck.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CreateRoomAck::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CreateRoomAck::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:cproto.CreateRoomAck.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// CancelRoomAck

// int32 tableid = 1;
inline void CancelRoomAck::clear_tableid() {
  tableid_ = 0;
}
inline int32_t CancelRoomAck::_internal_tableid() const {
  return tableid_;
}
inline int32_t CancelRoomAck::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.CancelRoomAck.tableid)
  return _internal_tableid();
}
inline void CancelRoomAck::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void CancelRoomAck::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.CancelRoomAck.tableid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JoinRoomAck

// int32 tableid = 1;
inline void JoinRoomAck::clear_tableid() {
  tableid_ = 0;
}
inline int32_t JoinRoomAck::_internal_tableid() const {
  return tableid_;
}
inline int32_t JoinRoomAck::tableid() const {
  // @@protoc_insertion_point(field_get:cproto.JoinRoomAck.tableid)
  return _internal_tableid();
}
inline void JoinRoomAck::_internal_set_tableid(int32_t value) {
  
  tableid_ = value;
}
inline void JoinRoomAck::set_tableid(int32_t value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:cproto.JoinRoomAck.tableid)
}

// string desn = 2;
inline void JoinRoomAck::clear_desn() {
  desn_.ClearToEmpty();
}
inline const std::string& JoinRoomAck::desn() const {
  // @@protoc_insertion_point(field_get:cproto.JoinRoomAck.desn)
  return _internal_desn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinRoomAck::set_desn(ArgT0&& arg0, ArgT... args) {
 
 desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cproto.JoinRoomAck.desn)
}
inline std::string* JoinRoomAck::mutable_desn() {
  std::string* _s = _internal_mutable_desn();
  // @@protoc_insertion_point(field_mutable:cproto.JoinRoomAck.desn)
  return _s;
}
inline const std::string& JoinRoomAck::_internal_desn() const {
  return desn_.Get();
}
inline void JoinRoomAck::_internal_set_desn(const std::string& value) {
  
  desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JoinRoomAck::_internal_mutable_desn() {
  
  return desn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JoinRoomAck::release_desn() {
  // @@protoc_insertion_point(field_release:cproto.JoinRoomAck.desn)
  return desn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JoinRoomAck::set_allocated_desn(std::string* desn) {
  if (desn != nullptr) {
    
  } else {
    
  }
  desn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desn,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desn_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cproto.JoinRoomAck.desn)
}

// map<string, int32> properties = 3;
inline int JoinRoomAck::_internal_properties_size() const {
  return properties_.size();
}
inline int JoinRoomAck::properties_size() const {
  return _internal_properties_size();
}
inline void JoinRoomAck::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
JoinRoomAck::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
JoinRoomAck::properties() const {
  // @@protoc_insertion_point(field_map:cproto.JoinRoomAck.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
JoinRoomAck::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
JoinRoomAck::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:cproto.JoinRoomAck.properties)
  return _internal_mutable_properties();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_match_2eproto
