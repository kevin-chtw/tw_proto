// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#include "match.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cproto {
constexpr MatchReq::MatchReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serverid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , req_(nullptr)
  , matchid_(0){}
struct MatchReqDefaultTypeInternal {
  constexpr MatchReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchReqDefaultTypeInternal() {}
  union {
    MatchReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchReqDefaultTypeInternal _MatchReq_default_instance_;
constexpr MatchAck::MatchAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serverid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ack_(nullptr)
  , matchid_(0){}
struct MatchAckDefaultTypeInternal {
  constexpr MatchAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MatchAckDefaultTypeInternal() {}
  union {
    MatchAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MatchAckDefaultTypeInternal _MatchAck_default_instance_;
constexpr CreateRoomReq_PropertiesEntry_DoNotUse::CreateRoomReq_PropertiesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateRoomReq_PropertiesEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateRoomReq_PropertiesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRoomReq_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateRoomReq_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRoomReq_PropertiesEntry_DoNotUseDefaultTypeInternal _CreateRoomReq_PropertiesEntry_DoNotUse_default_instance_;
constexpr CreateRoomReq::CreateRoomReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , desn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_count_(0)
  , pay_type_(0){}
struct CreateRoomReqDefaultTypeInternal {
  constexpr CreateRoomReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRoomReqDefaultTypeInternal() {}
  union {
    CreateRoomReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRoomReqDefaultTypeInternal _CreateRoomReq_default_instance_;
constexpr CancelRoomReq::CancelRoomReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tableid_(0){}
struct CancelRoomReqDefaultTypeInternal {
  constexpr CancelRoomReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelRoomReqDefaultTypeInternal() {}
  union {
    CancelRoomReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelRoomReqDefaultTypeInternal _CancelRoomReq_default_instance_;
constexpr JoinRoomReq::JoinRoomReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tableid_(0){}
struct JoinRoomReqDefaultTypeInternal {
  constexpr JoinRoomReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinRoomReqDefaultTypeInternal() {}
  union {
    JoinRoomReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinRoomReqDefaultTypeInternal _JoinRoomReq_default_instance_;
constexpr SignupReq::SignupReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SignupReqDefaultTypeInternal {
  constexpr SignupReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignupReqDefaultTypeInternal() {}
  union {
    SignupReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignupReqDefaultTypeInternal _SignupReq_default_instance_;
constexpr SignoutReq::SignoutReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SignoutReqDefaultTypeInternal {
  constexpr SignoutReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignoutReqDefaultTypeInternal() {}
  union {
    SignoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignoutReqDefaultTypeInternal _SignoutReq_default_instance_;
constexpr ContinueReq::ContinueReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ContinueReqDefaultTypeInternal {
  constexpr ContinueReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContinueReqDefaultTypeInternal() {}
  union {
    ContinueReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContinueReqDefaultTypeInternal _ContinueReq_default_instance_;
constexpr CreateRoomAck_PropertiesEntry_DoNotUse::CreateRoomAck_PropertiesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CreateRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal {
  constexpr CreateRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CreateRoomAck_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal _CreateRoomAck_PropertiesEntry_DoNotUse_default_instance_;
constexpr CreateRoomAck::CreateRoomAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , desn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tableid_(0){}
struct CreateRoomAckDefaultTypeInternal {
  constexpr CreateRoomAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateRoomAckDefaultTypeInternal() {}
  union {
    CreateRoomAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateRoomAckDefaultTypeInternal _CreateRoomAck_default_instance_;
constexpr CancelRoomAck::CancelRoomAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tableid_(0){}
struct CancelRoomAckDefaultTypeInternal {
  constexpr CancelRoomAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CancelRoomAckDefaultTypeInternal() {}
  union {
    CancelRoomAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CancelRoomAckDefaultTypeInternal _CancelRoomAck_default_instance_;
constexpr JoinRoomAck_PropertiesEntry_DoNotUse::JoinRoomAck_PropertiesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct JoinRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal {
  constexpr JoinRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    JoinRoomAck_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinRoomAck_PropertiesEntry_DoNotUseDefaultTypeInternal _JoinRoomAck_PropertiesEntry_DoNotUse_default_instance_;
constexpr JoinRoomAck::JoinRoomAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , desn_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tableid_(0){}
struct JoinRoomAckDefaultTypeInternal {
  constexpr JoinRoomAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinRoomAckDefaultTypeInternal() {}
  union {
    JoinRoomAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinRoomAckDefaultTypeInternal _JoinRoomAck_default_instance_;
constexpr StartClientAck::StartClientAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_id_(0)
  , table_id_(0){}
struct StartClientAckDefaultTypeInternal {
  constexpr StartClientAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartClientAckDefaultTypeInternal() {}
  union {
    StartClientAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartClientAckDefaultTypeInternal _StartClientAck_default_instance_;
constexpr SignupAck::SignupAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SignupAckDefaultTypeInternal {
  constexpr SignupAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignupAckDefaultTypeInternal() {}
  union {
    SignupAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignupAckDefaultTypeInternal _SignupAck_default_instance_;
constexpr SignoutAck::SignoutAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SignoutAckDefaultTypeInternal {
  constexpr SignoutAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignoutAckDefaultTypeInternal() {}
  union {
    SignoutAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignoutAckDefaultTypeInternal _SignoutAck_default_instance_;
constexpr ContinueAck::ContinueAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ContinueAckDefaultTypeInternal {
  constexpr ContinueAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContinueAckDefaultTypeInternal() {}
  union {
    ContinueAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContinueAckDefaultTypeInternal _ContinueAck_default_instance_;
constexpr RestAck::RestAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct RestAckDefaultTypeInternal {
  constexpr RestAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestAckDefaultTypeInternal() {}
  union {
    RestAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestAckDefaultTypeInternal _RestAck_default_instance_;
constexpr ExistMatchAck::ExistMatchAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExistMatchAckDefaultTypeInternal {
  constexpr ExistMatchAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExistMatchAckDefaultTypeInternal() {}
  union {
    ExistMatchAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExistMatchAckDefaultTypeInternal _ExistMatchAck_default_instance_;
}  // namespace cproto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_match_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_match_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_match_2eproto = nullptr;

const uint32_t TableStruct_match_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::MatchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::MatchReq, serverid_),
  PROTOBUF_FIELD_OFFSET(::cproto::MatchReq, matchid_),
  PROTOBUF_FIELD_OFFSET(::cproto::MatchReq, req_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::MatchAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::MatchAck, serverid_),
  PROTOBUF_FIELD_OFFSET(::cproto::MatchAck, matchid_),
  PROTOBUF_FIELD_OFFSET(::cproto::MatchAck, ack_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq, game_count_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq, desn_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq, pay_type_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomReq, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::CancelRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::CancelRoomReq, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomReq, tableid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::SignupReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::SignoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::ContinueReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck, tableid_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck, desn_),
  PROTOBUF_FIELD_OFFSET(::cproto::CreateRoomAck, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::CancelRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::CancelRoomAck, tableid_),
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck, tableid_),
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck, desn_),
  PROTOBUF_FIELD_OFFSET(::cproto::JoinRoomAck, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::StartClientAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cproto::StartClientAck, match_type_),
  PROTOBUF_FIELD_OFFSET(::cproto::StartClientAck, game_type_),
  PROTOBUF_FIELD_OFFSET(::cproto::StartClientAck, server_id_),
  PROTOBUF_FIELD_OFFSET(::cproto::StartClientAck, match_id_),
  PROTOBUF_FIELD_OFFSET(::cproto::StartClientAck, table_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::SignupAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::SignoutAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::ContinueAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::RestAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cproto::ExistMatchAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cproto::MatchReq)},
  { 9, -1, -1, sizeof(::cproto::MatchAck)},
  { 18, 26, -1, sizeof(::cproto::CreateRoomReq_PropertiesEntry_DoNotUse)},
  { 28, -1, -1, sizeof(::cproto::CreateRoomReq)},
  { 38, -1, -1, sizeof(::cproto::CancelRoomReq)},
  { 45, -1, -1, sizeof(::cproto::JoinRoomReq)},
  { 52, -1, -1, sizeof(::cproto::SignupReq)},
  { 58, -1, -1, sizeof(::cproto::SignoutReq)},
  { 64, -1, -1, sizeof(::cproto::ContinueReq)},
  { 70, 78, -1, sizeof(::cproto::CreateRoomAck_PropertiesEntry_DoNotUse)},
  { 80, -1, -1, sizeof(::cproto::CreateRoomAck)},
  { 89, -1, -1, sizeof(::cproto::CancelRoomAck)},
  { 96, 104, -1, sizeof(::cproto::JoinRoomAck_PropertiesEntry_DoNotUse)},
  { 106, -1, -1, sizeof(::cproto::JoinRoomAck)},
  { 115, -1, -1, sizeof(::cproto::StartClientAck)},
  { 126, -1, -1, sizeof(::cproto::SignupAck)},
  { 132, -1, -1, sizeof(::cproto::SignoutAck)},
  { 138, -1, -1, sizeof(::cproto::ContinueAck)},
  { 144, -1, -1, sizeof(::cproto::RestAck)},
  { 150, -1, -1, sizeof(::cproto::ExistMatchAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_MatchReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_MatchAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_CreateRoomReq_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_CreateRoomReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_CancelRoomReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_JoinRoomReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_SignupReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_SignoutReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_ContinueReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_CreateRoomAck_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_CreateRoomAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_CancelRoomAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_JoinRoomAck_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_JoinRoomAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_StartClientAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_SignupAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_SignoutAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_ContinueAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_RestAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cproto::_ExistMatchAck_default_instance_),
};

const char descriptor_table_protodef_match_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013match.proto\022\006cproto\032\031google/protobuf/a"
  "ny.proto\"P\n\010MatchReq\022\020\n\010serverid\030\001 \001(\t\022\017"
  "\n\007matchid\030\002 \001(\005\022!\n\003req\030\003 \001(\0132\024.google.pr"
  "otobuf.Any\"P\n\010MatchAck\022\020\n\010serverid\030\001 \001(\t"
  "\022\017\n\007matchid\030\002 \001(\005\022!\n\003ack\030\003 \001(\0132\024.google."
  "protobuf.Any\"\261\001\n\rCreateRoomReq\022\022\n\ngame_c"
  "ount\030\001 \001(\005\022\014\n\004desn\030\002 \001(\t\022\020\n\010pay_type\030\003 \001"
  "(\005\0229\n\nproperties\030\004 \003(\0132%.cproto.CreateRo"
  "omReq.PropertiesEntry\0321\n\017PropertiesEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\" \n\rCanc"
  "elRoomReq\022\017\n\007tableid\030\001 \001(\005\"\036\n\013JoinRoomRe"
  "q\022\017\n\007tableid\030\001 \001(\005\"\013\n\tSignupReq\"\014\n\nSigno"
  "utReq\"\r\n\013ContinueReq\"\234\001\n\rCreateRoomAck\022\017"
  "\n\007tableid\030\001 \001(\005\022\014\n\004desn\030\002 \001(\t\0229\n\npropert"
  "ies\030\003 \003(\0132%.cproto.CreateRoomAck.Propert"
  "iesEntry\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\005:\0028\001\" \n\rCancelRoomAck\022\017\n\007"
  "tableid\030\001 \001(\005\"\230\001\n\013JoinRoomAck\022\017\n\007tableid"
  "\030\001 \001(\005\022\014\n\004desn\030\002 \001(\t\0227\n\nproperties\030\003 \003(\013"
  "2#.cproto.JoinRoomAck.PropertiesEntry\0321\n"
  "\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\005:\0028\001\"n\n\016StartClientAck\022\022\n\nmatch_type"
  "\030\001 \001(\t\022\021\n\tgame_type\030\002 \001(\t\022\021\n\tserver_id\030\003"
  " \001(\t\022\020\n\010match_id\030\004 \001(\005\022\020\n\010table_id\030\005 \001(\005"
  "\"\013\n\tSignupAck\"\014\n\nSignoutAck\"\r\n\013ContinueA"
  "ck\"\t\n\007RestAck\"\017\n\rExistMatchAckB\013Z\t../cpr"
  "otob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_match_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_match_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_match_2eproto = {
  false, false, 1051, descriptor_table_protodef_match_2eproto, "match.proto", 
  &descriptor_table_match_2eproto_once, descriptor_table_match_2eproto_deps, 1, 20,
  schemas, file_default_instances, TableStruct_match_2eproto::offsets,
  file_level_metadata_match_2eproto, file_level_enum_descriptors_match_2eproto, file_level_service_descriptors_match_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_match_2eproto_getter() {
  return &descriptor_table_match_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_match_2eproto(&descriptor_table_match_2eproto);
namespace cproto {

// ===================================================================

class MatchReq::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& req(const MatchReq* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
MatchReq::_Internal::req(const MatchReq* msg) {
  return *msg->req_;
}
void MatchReq::clear_req() {
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
}
MatchReq::MatchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.MatchReq)
}
MatchReq::MatchReq(const MatchReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_req()) {
    req_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.req_);
  } else {
    req_ = nullptr;
  }
  matchid_ = from.matchid_;
  // @@protoc_insertion_point(copy_constructor:cproto.MatchReq)
}

inline void MatchReq::SharedCtor() {
serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&req_)) + sizeof(matchid_));
}

MatchReq::~MatchReq() {
  // @@protoc_insertion_point(destructor:cproto.MatchReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete req_;
}

void MatchReq::ArenaDtor(void* object) {
  MatchReq* _this = reinterpret_cast< MatchReq* >(object);
  (void)_this;
}
void MatchReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.MatchReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && req_ != nullptr) {
    delete req_;
  }
  req_ = nullptr;
  matchid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.MatchReq.serverid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any req = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.MatchReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.MatchReq.serverid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serverid(), target);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchid(), target);
  }

  // .google.protobuf.Any req = 3;
  if (this->_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::req(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.MatchReq)
  return target;
}

size_t MatchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.MatchReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // .google.protobuf.Any req = 3;
  if (this->_internal_has_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *req_);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchReq::GetClassData() const { return &_class_data_; }

void MatchReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchReq *>(to)->MergeFrom(
      static_cast<const MatchReq &>(from));
}


void MatchReq::MergeFrom(const MatchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.MatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serverid().empty()) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_has_req()) {
    _internal_mutable_req()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_req());
  }
  if (from._internal_matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchReq::CopyFrom(const MatchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.MatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchReq::IsInitialized() const {
  return true;
}

void MatchReq::InternalSwap(MatchReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverid_, lhs_arena,
      &other->serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchReq, matchid_)
      + sizeof(MatchReq::matchid_)
      - PROTOBUF_FIELD_OFFSET(MatchReq, req_)>(
          reinterpret_cast<char*>(&req_),
          reinterpret_cast<char*>(&other->req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[0]);
}

// ===================================================================

class MatchAck::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& ack(const MatchAck* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
MatchAck::_Internal::ack(const MatchAck* msg) {
  return *msg->ack_;
}
void MatchAck::clear_ack() {
  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
}
MatchAck::MatchAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.MatchAck)
}
MatchAck::MatchAck(const MatchAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverid().empty()) {
    serverid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serverid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ack()) {
    ack_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.ack_);
  } else {
    ack_ = nullptr;
  }
  matchid_ = from.matchid_;
  // @@protoc_insertion_point(copy_constructor:cproto.MatchAck)
}

inline void MatchAck::SharedCtor() {
serverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ack_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&ack_)) + sizeof(matchid_));
}

MatchAck::~MatchAck() {
  // @@protoc_insertion_point(destructor:cproto.MatchAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MatchAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ack_;
}

void MatchAck::ArenaDtor(void* object) {
  MatchAck* _this = reinterpret_cast< MatchAck* >(object);
  (void)_this;
}
void MatchAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MatchAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MatchAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.MatchAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
  matchid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serverid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.MatchAck.serverid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any ack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.MatchAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverid().data(), static_cast<int>(this->_internal_serverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.MatchAck.serverid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serverid(), target);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matchid(), target);
  }

  // .google.protobuf.Any ack = 3;
  if (this->_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.MatchAck)
  return target;
}

size_t MatchAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.MatchAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serverid = 1;
  if (!this->_internal_serverid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverid());
  }

  // .google.protobuf.Any ack = 3;
  if (this->_internal_has_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ack_);
  }

  // int32 matchid = 2;
  if (this->_internal_matchid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matchid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MatchAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchAck::GetClassData() const { return &_class_data_; }

void MatchAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MatchAck *>(to)->MergeFrom(
      static_cast<const MatchAck &>(from));
}


void MatchAck::MergeFrom(const MatchAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.MatchAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serverid().empty()) {
    _internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_has_ack()) {
    _internal_mutable_ack()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_ack());
  }
  if (from._internal_matchid() != 0) {
    _internal_set_matchid(from._internal_matchid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchAck::CopyFrom(const MatchAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.MatchAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchAck::IsInitialized() const {
  return true;
}

void MatchAck::InternalSwap(MatchAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serverid_, lhs_arena,
      &other->serverid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchAck, matchid_)
      + sizeof(MatchAck::matchid_)
      - PROTOBUF_FIELD_OFFSET(MatchAck, ack_)>(
          reinterpret_cast<char*>(&ack_),
          reinterpret_cast<char*>(&other->ack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[1]);
}

// ===================================================================

CreateRoomReq_PropertiesEntry_DoNotUse::CreateRoomReq_PropertiesEntry_DoNotUse() {}
CreateRoomReq_PropertiesEntry_DoNotUse::CreateRoomReq_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateRoomReq_PropertiesEntry_DoNotUse::MergeFrom(const CreateRoomReq_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomReq_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[2]);
}

// ===================================================================

class CreateRoomReq::_Internal {
 public:
};

CreateRoomReq::CreateRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.CreateRoomReq)
}
CreateRoomReq::CreateRoomReq(const CreateRoomReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desn().empty()) {
    desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desn(), 
      GetArenaForAllocation());
  }
  ::memcpy(&game_count_, &from.game_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&pay_type_) -
    reinterpret_cast<char*>(&game_count_)) + sizeof(pay_type_));
  // @@protoc_insertion_point(copy_constructor:cproto.CreateRoomReq)
}

inline void CreateRoomReq::SharedCtor() {
desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pay_type_) -
    reinterpret_cast<char*>(&game_count_)) + sizeof(pay_type_));
}

CreateRoomReq::~CreateRoomReq() {
  // @@protoc_insertion_point(destructor:cproto.CreateRoomReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRoomReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  desn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoomReq::ArenaDtor(void* object) {
  CreateRoomReq* _this = reinterpret_cast< CreateRoomReq* >(object);
  (void)_this;
  _this->properties_. ~MapField();
}
inline void CreateRoomReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CreateRoomReq::ArenaDtor);
  }
}
void CreateRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.CreateRoomReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  desn_.ClearToEmpty();
  ::memset(&game_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pay_type_) -
      reinterpret_cast<char*>(&game_count_)) + sizeof(pay_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 game_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          game_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.CreateRoomReq.desn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pay_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pay_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.CreateRoomReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_count = 1;
  if (this->_internal_game_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_count(), target);
  }

  // string desn = 2;
  if (!this->_internal_desn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desn().data(), static_cast<int>(this->_internal_desn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.CreateRoomReq.desn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desn(), target);
  }

  // int32 pay_type = 3;
  if (this->_internal_pay_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pay_type(), target);
  }

  // map<string, int32> properties = 4;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "cproto.CreateRoomReq.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateRoomReq_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = CreateRoomReq_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.CreateRoomReq)
  return target;
}

size_t CreateRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.CreateRoomReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> properties = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += CreateRoomReq_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string desn = 2;
  if (!this->_internal_desn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desn());
  }

  // int32 game_count = 1;
  if (this->_internal_game_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_game_count());
  }

  // int32 pay_type = 3;
  if (this->_internal_pay_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pay_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRoomReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomReq::GetClassData() const { return &_class_data_; }

void CreateRoomReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRoomReq *>(to)->MergeFrom(
      static_cast<const CreateRoomReq &>(from));
}


void CreateRoomReq::MergeFrom(const CreateRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.CreateRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (!from._internal_desn().empty()) {
    _internal_set_desn(from._internal_desn());
  }
  if (from._internal_game_count() != 0) {
    _internal_set_game_count(from._internal_game_count());
  }
  if (from._internal_pay_type() != 0) {
    _internal_set_pay_type(from._internal_pay_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomReq::CopyFrom(const CreateRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.CreateRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomReq::IsInitialized() const {
  return true;
}

void CreateRoomReq::InternalSwap(CreateRoomReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desn_, lhs_arena,
      &other->desn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoomReq, pay_type_)
      + sizeof(CreateRoomReq::pay_type_)
      - PROTOBUF_FIELD_OFFSET(CreateRoomReq, game_count_)>(
          reinterpret_cast<char*>(&game_count_),
          reinterpret_cast<char*>(&other->game_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[3]);
}

// ===================================================================

class CancelRoomReq::_Internal {
 public:
};

CancelRoomReq::CancelRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.CancelRoomReq)
}
CancelRoomReq::CancelRoomReq(const CancelRoomReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:cproto.CancelRoomReq)
}

inline void CancelRoomReq::SharedCtor() {
tableid_ = 0;
}

CancelRoomReq::~CancelRoomReq() {
  // @@protoc_insertion_point(destructor:cproto.CancelRoomReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelRoomReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CancelRoomReq::ArenaDtor(void* object) {
  CancelRoomReq* _this = reinterpret_cast< CancelRoomReq* >(object);
  (void)_this;
}
void CancelRoomReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.CancelRoomReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelRoomReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tableid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelRoomReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.CancelRoomReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.CancelRoomReq)
  return target;
}

size_t CancelRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.CancelRoomReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelRoomReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelRoomReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelRoomReq::GetClassData() const { return &_class_data_; }

void CancelRoomReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CancelRoomReq *>(to)->MergeFrom(
      static_cast<const CancelRoomReq &>(from));
}


void CancelRoomReq::MergeFrom(const CancelRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.CancelRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelRoomReq::CopyFrom(const CancelRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.CancelRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRoomReq::IsInitialized() const {
  return true;
}

void CancelRoomReq::InternalSwap(CancelRoomReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tableid_, other->tableid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelRoomReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[4]);
}

// ===================================================================

class JoinRoomReq::_Internal {
 public:
};

JoinRoomReq::JoinRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.JoinRoomReq)
}
JoinRoomReq::JoinRoomReq(const JoinRoomReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:cproto.JoinRoomReq)
}

inline void JoinRoomReq::SharedCtor() {
tableid_ = 0;
}

JoinRoomReq::~JoinRoomReq() {
  // @@protoc_insertion_point(destructor:cproto.JoinRoomReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinRoomReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoinRoomReq::ArenaDtor(void* object) {
  JoinRoomReq* _this = reinterpret_cast< JoinRoomReq* >(object);
  (void)_this;
}
void JoinRoomReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.JoinRoomReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRoomReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tableid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRoomReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.JoinRoomReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.JoinRoomReq)
  return target;
}

size_t JoinRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.JoinRoomReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRoomReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinRoomReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRoomReq::GetClassData() const { return &_class_data_; }

void JoinRoomReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoinRoomReq *>(to)->MergeFrom(
      static_cast<const JoinRoomReq &>(from));
}


void JoinRoomReq::MergeFrom(const JoinRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.JoinRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRoomReq::CopyFrom(const JoinRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.JoinRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomReq::IsInitialized() const {
  return true;
}

void JoinRoomReq::InternalSwap(JoinRoomReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tableid_, other->tableid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[5]);
}

// ===================================================================

class SignupReq::_Internal {
 public:
};

SignupReq::SignupReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.SignupReq)
}
SignupReq::SignupReq(const SignupReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.SignupReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignupReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignupReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SignupReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[6]);
}

// ===================================================================

class SignoutReq::_Internal {
 public:
};

SignoutReq::SignoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.SignoutReq)
}
SignoutReq::SignoutReq(const SignoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.SignoutReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignoutReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SignoutReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[7]);
}

// ===================================================================

class ContinueReq::_Internal {
 public:
};

ContinueReq::ContinueReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.ContinueReq)
}
ContinueReq::ContinueReq(const ContinueReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.ContinueReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinueReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinueReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ContinueReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[8]);
}

// ===================================================================

CreateRoomAck_PropertiesEntry_DoNotUse::CreateRoomAck_PropertiesEntry_DoNotUse() {}
CreateRoomAck_PropertiesEntry_DoNotUse::CreateRoomAck_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateRoomAck_PropertiesEntry_DoNotUse::MergeFrom(const CreateRoomAck_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomAck_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[9]);
}

// ===================================================================

class CreateRoomAck::_Internal {
 public:
};

CreateRoomAck::CreateRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.CreateRoomAck)
}
CreateRoomAck::CreateRoomAck(const CreateRoomAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desn().empty()) {
    desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desn(), 
      GetArenaForAllocation());
  }
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:cproto.CreateRoomAck)
}

inline void CreateRoomAck::SharedCtor() {
desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tableid_ = 0;
}

CreateRoomAck::~CreateRoomAck() {
  // @@protoc_insertion_point(destructor:cproto.CreateRoomAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateRoomAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  desn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateRoomAck::ArenaDtor(void* object) {
  CreateRoomAck* _this = reinterpret_cast< CreateRoomAck* >(object);
  (void)_this;
  _this->properties_. ~MapField();
}
inline void CreateRoomAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CreateRoomAck::ArenaDtor);
  }
}
void CreateRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.CreateRoomAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  desn_.ClearToEmpty();
  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tableid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.CreateRoomAck.desn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.CreateRoomAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  // string desn = 2;
  if (!this->_internal_desn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desn().data(), static_cast<int>(this->_internal_desn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.CreateRoomAck.desn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desn(), target);
  }

  // map<string, int32> properties = 3;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "cproto.CreateRoomAck.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateRoomAck_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = CreateRoomAck_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.CreateRoomAck)
  return target;
}

size_t CreateRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.CreateRoomAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += CreateRoomAck_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string desn = 2;
  if (!this->_internal_desn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desn());
  }

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateRoomAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomAck::GetClassData() const { return &_class_data_; }

void CreateRoomAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateRoomAck *>(to)->MergeFrom(
      static_cast<const CreateRoomAck &>(from));
}


void CreateRoomAck::MergeFrom(const CreateRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.CreateRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (!from._internal_desn().empty()) {
    _internal_set_desn(from._internal_desn());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomAck::CopyFrom(const CreateRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.CreateRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomAck::IsInitialized() const {
  return true;
}

void CreateRoomAck::InternalSwap(CreateRoomAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desn_, lhs_arena,
      &other->desn_, rhs_arena
  );
  swap(tableid_, other->tableid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[10]);
}

// ===================================================================

class CancelRoomAck::_Internal {
 public:
};

CancelRoomAck::CancelRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.CancelRoomAck)
}
CancelRoomAck::CancelRoomAck(const CancelRoomAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:cproto.CancelRoomAck)
}

inline void CancelRoomAck::SharedCtor() {
tableid_ = 0;
}

CancelRoomAck::~CancelRoomAck() {
  // @@protoc_insertion_point(destructor:cproto.CancelRoomAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CancelRoomAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CancelRoomAck::ArenaDtor(void* object) {
  CancelRoomAck* _this = reinterpret_cast< CancelRoomAck* >(object);
  (void)_this;
}
void CancelRoomAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CancelRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.CancelRoomAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelRoomAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tableid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelRoomAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.CancelRoomAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.CancelRoomAck)
  return target;
}

size_t CancelRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.CancelRoomAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelRoomAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CancelRoomAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelRoomAck::GetClassData() const { return &_class_data_; }

void CancelRoomAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CancelRoomAck *>(to)->MergeFrom(
      static_cast<const CancelRoomAck &>(from));
}


void CancelRoomAck::MergeFrom(const CancelRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.CancelRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelRoomAck::CopyFrom(const CancelRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.CancelRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelRoomAck::IsInitialized() const {
  return true;
}

void CancelRoomAck::InternalSwap(CancelRoomAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tableid_, other->tableid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelRoomAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[11]);
}

// ===================================================================

JoinRoomAck_PropertiesEntry_DoNotUse::JoinRoomAck_PropertiesEntry_DoNotUse() {}
JoinRoomAck_PropertiesEntry_DoNotUse::JoinRoomAck_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JoinRoomAck_PropertiesEntry_DoNotUse::MergeFrom(const JoinRoomAck_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomAck_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[12]);
}

// ===================================================================

class JoinRoomAck::_Internal {
 public:
};

JoinRoomAck::JoinRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.JoinRoomAck)
}
JoinRoomAck::JoinRoomAck(const JoinRoomAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desn().empty()) {
    desn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desn(), 
      GetArenaForAllocation());
  }
  tableid_ = from.tableid_;
  // @@protoc_insertion_point(copy_constructor:cproto.JoinRoomAck)
}

inline void JoinRoomAck::SharedCtor() {
desn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tableid_ = 0;
}

JoinRoomAck::~JoinRoomAck() {
  // @@protoc_insertion_point(destructor:cproto.JoinRoomAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoinRoomAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  desn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinRoomAck::ArenaDtor(void* object) {
  JoinRoomAck* _this = reinterpret_cast< JoinRoomAck* >(object);
  (void)_this;
  _this->properties_. ~MapField();
}
inline void JoinRoomAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &JoinRoomAck::ArenaDtor);
  }
}
void JoinRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.JoinRoomAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  desn_.ClearToEmpty();
  tableid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRoomAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tableid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tableid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string desn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_desn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.JoinRoomAck.desn"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRoomAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.JoinRoomAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tableid(), target);
  }

  // string desn = 2;
  if (!this->_internal_desn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desn().data(), static_cast<int>(this->_internal_desn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.JoinRoomAck.desn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_desn(), target);
  }

  // map<string, int32> properties = 3;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "cproto.JoinRoomAck.PropertiesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = JoinRoomAck_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = JoinRoomAck_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.JoinRoomAck)
  return target;
}

size_t JoinRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.JoinRoomAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += JoinRoomAck_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string desn = 2;
  if (!this->_internal_desn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desn());
  }

  // int32 tableid = 1;
  if (this->_internal_tableid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tableid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRoomAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoinRoomAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRoomAck::GetClassData() const { return &_class_data_; }

void JoinRoomAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoinRoomAck *>(to)->MergeFrom(
      static_cast<const JoinRoomAck &>(from));
}


void JoinRoomAck::MergeFrom(const JoinRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.JoinRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (!from._internal_desn().empty()) {
    _internal_set_desn(from._internal_desn());
  }
  if (from._internal_tableid() != 0) {
    _internal_set_tableid(from._internal_tableid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRoomAck::CopyFrom(const JoinRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.JoinRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomAck::IsInitialized() const {
  return true;
}

void JoinRoomAck::InternalSwap(JoinRoomAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &desn_, lhs_arena,
      &other->desn_, rhs_arena
  );
  swap(tableid_, other->tableid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[13]);
}

// ===================================================================

class StartClientAck::_Internal {
 public:
};

StartClientAck::StartClientAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cproto.StartClientAck)
}
StartClientAck::StartClientAck(const StartClientAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    match_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_match_type().empty()) {
    match_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_match_type(), 
      GetArenaForAllocation());
  }
  game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_type().empty()) {
    game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_type(), 
      GetArenaForAllocation());
  }
  server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_id().empty()) {
    server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:cproto.StartClientAck)
}

inline void StartClientAck::SharedCtor() {
match_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  match_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  game_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
server_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  server_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(table_id_));
}

StartClientAck::~StartClientAck() {
  // @@protoc_insertion_point(destructor:cproto.StartClientAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartClientAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  match_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartClientAck::ArenaDtor(void* object) {
  StartClientAck* _this = reinterpret_cast< StartClientAck* >(object);
  (void)_this;
}
void StartClientAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartClientAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartClientAck::Clear() {
// @@protoc_insertion_point(message_clear_start:cproto.StartClientAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_type_.ClearToEmpty();
  game_type_.ClearToEmpty();
  server_id_.ClearToEmpty();
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(table_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartClientAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string match_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_match_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.StartClientAck.match_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string game_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_game_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.StartClientAck.game_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_server_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cproto.StartClientAck.server_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 table_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartClientAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cproto.StartClientAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string match_type = 1;
  if (!this->_internal_match_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_match_type().data(), static_cast<int>(this->_internal_match_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.StartClientAck.match_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_match_type(), target);
  }

  // string game_type = 2;
  if (!this->_internal_game_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_type().data(), static_cast<int>(this->_internal_game_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.StartClientAck.game_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_type(), target);
  }

  // string server_id = 3;
  if (!this->_internal_server_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_id().data(), static_cast<int>(this->_internal_server_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cproto.StartClientAck.server_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_server_id(), target);
  }

  // int32 match_id = 4;
  if (this->_internal_match_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_match_id(), target);
  }

  // int32 table_id = 5;
  if (this->_internal_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_table_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cproto.StartClientAck)
  return target;
}

size_t StartClientAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cproto.StartClientAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string match_type = 1;
  if (!this->_internal_match_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_match_type());
  }

  // string game_type = 2;
  if (!this->_internal_game_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_type());
  }

  // string server_id = 3;
  if (!this->_internal_server_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_id());
  }

  // int32 match_id = 4;
  if (this->_internal_match_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_match_id());
  }

  // int32 table_id = 5;
  if (this->_internal_table_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartClientAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartClientAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartClientAck::GetClassData() const { return &_class_data_; }

void StartClientAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartClientAck *>(to)->MergeFrom(
      static_cast<const StartClientAck &>(from));
}


void StartClientAck::MergeFrom(const StartClientAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cproto.StartClientAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_match_type().empty()) {
    _internal_set_match_type(from._internal_match_type());
  }
  if (!from._internal_game_type().empty()) {
    _internal_set_game_type(from._internal_game_type());
  }
  if (!from._internal_server_id().empty()) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_match_id() != 0) {
    _internal_set_match_id(from._internal_match_id());
  }
  if (from._internal_table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartClientAck::CopyFrom(const StartClientAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cproto.StartClientAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartClientAck::IsInitialized() const {
  return true;
}

void StartClientAck::InternalSwap(StartClientAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &match_type_, lhs_arena,
      &other->match_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &game_type_, lhs_arena,
      &other->game_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_id_, lhs_arena,
      &other->server_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartClientAck, table_id_)
      + sizeof(StartClientAck::table_id_)
      - PROTOBUF_FIELD_OFFSET(StartClientAck, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartClientAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[14]);
}

// ===================================================================

class SignupAck::_Internal {
 public:
};

SignupAck::SignupAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.SignupAck)
}
SignupAck::SignupAck(const SignupAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.SignupAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignupAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignupAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SignupAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[15]);
}

// ===================================================================

class SignoutAck::_Internal {
 public:
};

SignoutAck::SignoutAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.SignoutAck)
}
SignoutAck::SignoutAck(const SignoutAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.SignoutAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignoutAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignoutAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SignoutAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[16]);
}

// ===================================================================

class ContinueAck::_Internal {
 public:
};

ContinueAck::ContinueAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.ContinueAck)
}
ContinueAck::ContinueAck(const ContinueAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.ContinueAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinueAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinueAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ContinueAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[17]);
}

// ===================================================================

class RestAck::_Internal {
 public:
};

RestAck::RestAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.RestAck)
}
RestAck::RestAck(const RestAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.RestAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RestAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[18]);
}

// ===================================================================

class ExistMatchAck::_Internal {
 public:
};

ExistMatchAck::ExistMatchAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:cproto.ExistMatchAck)
}
ExistMatchAck::ExistMatchAck(const ExistMatchAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cproto.ExistMatchAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExistMatchAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExistMatchAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ExistMatchAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace cproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cproto::MatchReq* Arena::CreateMaybeMessage< ::cproto::MatchReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::MatchReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::MatchAck* Arena::CreateMaybeMessage< ::cproto::MatchAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::MatchAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::CreateRoomReq_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::cproto::CreateRoomReq_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::CreateRoomReq_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::CreateRoomReq* Arena::CreateMaybeMessage< ::cproto::CreateRoomReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::CreateRoomReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::CancelRoomReq* Arena::CreateMaybeMessage< ::cproto::CancelRoomReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::CancelRoomReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::JoinRoomReq* Arena::CreateMaybeMessage< ::cproto::JoinRoomReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::JoinRoomReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::SignupReq* Arena::CreateMaybeMessage< ::cproto::SignupReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::SignupReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::SignoutReq* Arena::CreateMaybeMessage< ::cproto::SignoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::SignoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::ContinueReq* Arena::CreateMaybeMessage< ::cproto::ContinueReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::ContinueReq >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::CreateRoomAck_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::cproto::CreateRoomAck_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::CreateRoomAck_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::CreateRoomAck* Arena::CreateMaybeMessage< ::cproto::CreateRoomAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::CreateRoomAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::CancelRoomAck* Arena::CreateMaybeMessage< ::cproto::CancelRoomAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::CancelRoomAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::JoinRoomAck_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::cproto::JoinRoomAck_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::JoinRoomAck_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::JoinRoomAck* Arena::CreateMaybeMessage< ::cproto::JoinRoomAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::JoinRoomAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::StartClientAck* Arena::CreateMaybeMessage< ::cproto::StartClientAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::StartClientAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::SignupAck* Arena::CreateMaybeMessage< ::cproto::SignupAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::SignupAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::SignoutAck* Arena::CreateMaybeMessage< ::cproto::SignoutAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::SignoutAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::ContinueAck* Arena::CreateMaybeMessage< ::cproto::ContinueAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::ContinueAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::RestAck* Arena::CreateMaybeMessage< ::cproto::RestAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::RestAck >(arena);
}
template<> PROTOBUF_NOINLINE ::cproto::ExistMatchAck* Arena::CreateMaybeMessage< ::cproto::ExistMatchAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cproto::ExistMatchAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
