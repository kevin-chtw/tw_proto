// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.3
// source: mj.proto

package pbmj

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MJRequestReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                  //座位号
	RequestType   int32                  `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"` // 动作类型
	Requestid     int32                  `protobuf:"varint,3,opt,name=requestid,proto3" json:"requestid,omitempty"`                        // 请求ID
	Tile          int32                  `protobuf:"varint,4,opt,name=tile,proto3" json:"tile,omitempty"`                                  // 牌 （吃为吃牌的最左牌id）
	DisTile       int32                  `protobuf:"varint,5,opt,name=dis_tile,json=disTile,proto3" json:"dis_tile,omitempty"`             // 打出的牌(吃听、碰听时用到)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJRequestReq) Reset() {
	*x = MJRequestReq{}
	mi := &file_mj_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJRequestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJRequestReq) ProtoMessage() {}

func (x *MJRequestReq) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJRequestReq.ProtoReflect.Descriptor instead.
func (*MJRequestReq) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{0}
}

func (x *MJRequestReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJRequestReq) GetRequestType() int32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *MJRequestReq) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *MJRequestReq) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJRequestReq) GetDisTile() int32 {
	if x != nil {
		return x.DisTile
	}
	return 0
}

type MJTrustReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`   //座位号
	Trust         bool                   `protobuf:"varint,2,opt,name=trust,proto3" json:"trust,omitempty"` // 是否托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJTrustReq) Reset() {
	*x = MJTrustReq{}
	mi := &file_mj_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJTrustReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJTrustReq) ProtoMessage() {}

func (x *MJTrustReq) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJTrustReq.ProtoReflect.Descriptor instead.
func (*MJTrustReq) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{1}
}

func (x *MJTrustReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJTrustReq) GetTrust() bool {
	if x != nil {
		return x.Trust
	}
	return false
}

type MJAnimationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`           //座位号
	Requestid     int32                  `protobuf:"varint,2,opt,name=requestid,proto3" json:"requestid,omitempty"` // 请求ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJAnimationReq) Reset() {
	*x = MJAnimationReq{}
	mi := &file_mj_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJAnimationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJAnimationReq) ProtoMessage() {}

func (x *MJAnimationReq) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJAnimationReq.ProtoReflect.Descriptor instead.
func (*MJAnimationReq) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{2}
}

func (x *MJAnimationReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJAnimationReq) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type MJGameStartAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Banker        int32                  `protobuf:"varint,1,opt,name=banker,proto3" json:"banker,omitempty"`                        //庄家
	TileCount     int32                  `protobuf:"varint,2,opt,name=tile_count,json=tileCount,proto3" json:"tile_count,omitempty"` //牌库总张数
	Scores        []int64                `protobuf:"varint,3,rep,packed,name=scores,proto3" json:"scores,omitempty"`                 //带入分
	Property      string                 `protobuf:"bytes,4,opt,name=property,proto3" json:"property,omitempty"`                     //配置串
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJGameStartAck) Reset() {
	*x = MJGameStartAck{}
	mi := &file_mj_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJGameStartAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJGameStartAck) ProtoMessage() {}

func (x *MJGameStartAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJGameStartAck.ProtoReflect.Descriptor instead.
func (*MJGameStartAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{3}
}

func (x *MJGameStartAck) GetBanker() int32 {
	if x != nil {
		return x.Banker
	}
	return 0
}

func (x *MJGameStartAck) GetTileCount() int32 {
	if x != nil {
		return x.TileCount
	}
	return 0
}

func (x *MJGameStartAck) GetScores() []int64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *MJGameStartAck) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

type MJOpenDoorAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`          //座位号
	Tiles         []int32                `protobuf:"varint,2,rep,packed,name=tiles,proto3" json:"tiles,omitempty"` // 手牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJOpenDoorAck) Reset() {
	*x = MJOpenDoorAck{}
	mi := &file_mj_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJOpenDoorAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJOpenDoorAck) ProtoMessage() {}

func (x *MJOpenDoorAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJOpenDoorAck.ProtoReflect.Descriptor instead.
func (*MJOpenDoorAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{4}
}

func (x *MJOpenDoorAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJOpenDoorAck) GetTiles() []int32 {
	if x != nil {
		return x.Tiles
	}
	return nil
}

type MJRequestAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                         // //座位号
	RequestType   int32                  `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`        // 动作类型
	Requestid     int32                  `protobuf:"varint,3,opt,name=requestid,proto3" json:"requestid,omitempty"`                               // 请求ID
	HuMulti       int64                  `protobuf:"varint,4,opt,name=hu_multi,json=huMulti,proto3" json:"hu_multi,omitempty"`                    // 胡牌倍数
	ChowLpoints   []int32                `protobuf:"varint,5,rep,packed,name=chow_lpoints,json=chowLpoints,proto3" json:"chow_lpoints,omitempty"` //吃听时用到，吃听最左的点数集合
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJRequestAck) Reset() {
	*x = MJRequestAck{}
	mi := &file_mj_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJRequestAck) ProtoMessage() {}

func (x *MJRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJRequestAck.ProtoReflect.Descriptor instead.
func (*MJRequestAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{5}
}

func (x *MJRequestAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJRequestAck) GetRequestType() int32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *MJRequestAck) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *MJRequestAck) GetHuMulti() int64 {
	if x != nil {
		return x.HuMulti
	}
	return 0
}

func (x *MJRequestAck) GetChowLpoints() []int32 {
	if x != nil {
		return x.ChowLpoints
	}
	return nil
}

type MJChowAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                                                                                   //座位号
	From          int32                  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`                                                                                                   //出牌座位号
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                                                                                                   //吃的牌
	LeftTile      int32                  `protobuf:"varint,4,opt,name=left_tile,json=leftTile,proto3" json:"left_tile,omitempty"`                                                                           //最左的牌
	CallData      map[int32]*CallData    `protobuf:"bytes,5,rep,name=call_data,json=callData,proto3" json:"call_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 打出的牌-听牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJChowAck) Reset() {
	*x = MJChowAck{}
	mi := &file_mj_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJChowAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJChowAck) ProtoMessage() {}

func (x *MJChowAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJChowAck.ProtoReflect.Descriptor instead.
func (*MJChowAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{6}
}

func (x *MJChowAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJChowAck) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *MJChowAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJChowAck) GetLeftTile() int32 {
	if x != nil {
		return x.LeftTile
	}
	return 0
}

func (x *MJChowAck) GetCallData() map[int32]*CallData {
	if x != nil {
		return x.CallData
	}
	return nil
}

type MJPonAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                                                                                   //座位号
	From          int32                  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`                                                                                                   //出牌座位号
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                                                                                                   //碰的牌列表
	CallData      map[int32]*CallData    `protobuf:"bytes,4,rep,name=call_data,json=callData,proto3" json:"call_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 打出的牌-听牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJPonAck) Reset() {
	*x = MJPonAck{}
	mi := &file_mj_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJPonAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJPonAck) ProtoMessage() {}

func (x *MJPonAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJPonAck.ProtoReflect.Descriptor instead.
func (*MJPonAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{7}
}

func (x *MJPonAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJPonAck) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *MJPonAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJPonAck) GetCallData() map[int32]*CallData {
	if x != nil {
		return x.CallData
	}
	return nil
}

type MJKonAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                      //座位号
	From          int32                  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`                      //出牌座位号
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                      //碰的牌列表
	KonType       int32                  `protobuf:"varint,4,opt,name=kon_type,json=konType,proto3" json:"kon_type,omitempty"` //杠牌的类型(0:明杠 1： 暗杠 2：补杠)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJKonAck) Reset() {
	*x = MJKonAck{}
	mi := &file_mj_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJKonAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJKonAck) ProtoMessage() {}

func (x *MJKonAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJKonAck.ProtoReflect.Descriptor instead.
func (*MJKonAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{8}
}

func (x *MJKonAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJKonAck) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *MJKonAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJKonAck) GetKonType() int32 {
	if x != nil {
		return x.KonType
	}
	return 0
}

type MJHuAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PaoSeat       int32                  `protobuf:"varint,1,opt,name=pao_seat,json=paoSeat,proto3" json:"pao_seat,omitempty"` //点炮玩家
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"`                      //胡的牌
	HuData        []*MJHuData            `protobuf:"bytes,3,rep,name=hu_data,json=huData,proto3" json:"hu_data,omitempty"`     // 胡的类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJHuAck) Reset() {
	*x = MJHuAck{}
	mi := &file_mj_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJHuAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJHuAck) ProtoMessage() {}

func (x *MJHuAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJHuAck.ProtoReflect.Descriptor instead.
func (*MJHuAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{9}
}

func (x *MJHuAck) GetPaoSeat() int32 {
	if x != nil {
		return x.PaoSeat
	}
	return 0
}

func (x *MJHuAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJHuAck) GetHuData() []*MJHuData {
	if x != nil {
		return x.HuData
	}
	return nil
}

type MJHuData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                             //座位号
	Gen           int32                  `protobuf:"varint,2,opt,name=gen,proto3" json:"gen,omitempty"`                               //根数
	Multi         int64                  `protobuf:"varint,3,opt,name=multi,proto3" json:"multi,omitempty"`                           //倍数
	HuTypes       []int32                `protobuf:"varint,4,rep,packed,name=hu_types,json=huTypes,proto3" json:"hu_types,omitempty"` // 胡的类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJHuData) Reset() {
	*x = MJHuData{}
	mi := &file_mj_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJHuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJHuData) ProtoMessage() {}

func (x *MJHuData) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJHuData.ProtoReflect.Descriptor instead.
func (*MJHuData) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{10}
}

func (x *MJHuData) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJHuData) GetGen() int32 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *MJHuData) GetMulti() int64 {
	if x != nil {
		return x.Multi
	}
	return 0
}

func (x *MJHuData) GetHuTypes() []int32 {
	if x != nil {
		return x.HuTypes
	}
	return nil
}

type MJDrawAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                                                                                   //座位号
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"`                                                                                                   //胡的牌
	DrawType      int32                  `protobuf:"varint,3,opt,name=draw_type,json=drawType,proto3" json:"draw_type,omitempty"`                                                                           //0-空，1-普通，2-杠后
	CallData      map[int32]*CallData    `protobuf:"bytes,4,rep,name=call_data,json=callData,proto3" json:"call_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 打出的牌-听牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJDrawAck) Reset() {
	*x = MJDrawAck{}
	mi := &file_mj_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJDrawAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJDrawAck) ProtoMessage() {}

func (x *MJDrawAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJDrawAck.ProtoReflect.Descriptor instead.
func (*MJDrawAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{11}
}

func (x *MJDrawAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJDrawAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJDrawAck) GetDrawType() int32 {
	if x != nil {
		return x.DrawType
	}
	return 0
}

func (x *MJDrawAck) GetCallData() map[int32]*CallData {
	if x != nil {
		return x.CallData
	}
	return nil
}

type MJDiscardAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"` //座位号
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"` // 丢弃的牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJDiscardAck) Reset() {
	*x = MJDiscardAck{}
	mi := &file_mj_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJDiscardAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJDiscardAck) ProtoMessage() {}

func (x *MJDiscardAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJDiscardAck.ProtoReflect.Descriptor instead.
func (*MJDiscardAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{12}
}

func (x *MJDiscardAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJDiscardAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

type MJTingAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                         //座位号
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"`                         //丢弃的牌
	TianTing      bool                   `protobuf:"varint,3,opt,name=tian_ting,json=tianTing,proto3" json:"tian_ting,omitempty"` //是否天听
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJTingAck) Reset() {
	*x = MJTingAck{}
	mi := &file_mj_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJTingAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJTingAck) ProtoMessage() {}

func (x *MJTingAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJTingAck.ProtoReflect.Descriptor instead.
func (*MJTingAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{13}
}

func (x *MJTingAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJTingAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJTingAck) GetTianTing() bool {
	if x != nil {
		return x.TianTing
	}
	return false
}

type MJScoreChangeAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScoreReason   int32                  `protobuf:"varint,1,opt,name=score_reason,json=scoreReason,proto3" json:"score_reason,omitempty"` //得分原因
	Scores        []int64                `protobuf:"varint,2,rep,packed,name=scores,proto3" json:"scores,omitempty"`                       //得分列表
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                                  // 胡的牌或杠的牌
	PaoSeat       int32                  `protobuf:"varint,4,opt,name=pao_seat,json=paoSeat,proto3" json:"pao_seat,omitempty"`             // 点炮玩家
	HuData        []*MJHuData            `protobuf:"bytes,5,rep,name=hu_data,json=huData,proto3" json:"hu_data,omitempty"`                 // 胡的类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJScoreChangeAck) Reset() {
	*x = MJScoreChangeAck{}
	mi := &file_mj_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJScoreChangeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJScoreChangeAck) ProtoMessage() {}

func (x *MJScoreChangeAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJScoreChangeAck.ProtoReflect.Descriptor instead.
func (*MJScoreChangeAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{14}
}

func (x *MJScoreChangeAck) GetScoreReason() int32 {
	if x != nil {
		return x.ScoreReason
	}
	return 0
}

func (x *MJScoreChangeAck) GetScores() []int64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *MJScoreChangeAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *MJScoreChangeAck) GetPaoSeat() int32 {
	if x != nil {
		return x.PaoSeat
	}
	return 0
}

func (x *MJScoreChangeAck) GetHuData() []*MJHuData {
	if x != nil {
		return x.HuData
	}
	return nil
}

type MJTrustAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`   // 玩家ID
	Trust         bool                   `protobuf:"varint,2,opt,name=trust,proto3" json:"trust,omitempty"` // 是否托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJTrustAck) Reset() {
	*x = MJTrustAck{}
	mi := &file_mj_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJTrustAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJTrustAck) ProtoMessage() {}

func (x *MJTrustAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJTrustAck.ProtoReflect.Descriptor instead.
func (*MJTrustAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{15}
}

func (x *MJTrustAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJTrustAck) GetTrust() bool {
	if x != nil {
		return x.Trust
	}
	return false
}

type MJAnimationAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requestid     int32                  `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJAnimationAck) Reset() {
	*x = MJAnimationAck{}
	mi := &file_mj_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJAnimationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJAnimationAck) ProtoMessage() {}

func (x *MJAnimationAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJAnimationAck.ProtoReflect.Descriptor instead.
func (*MJAnimationAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{16}
}

func (x *MJAnimationAck) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type MJResultAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Liuju         bool                   `protobuf:"varint,1,opt,name=liuju,proto3" json:"liuju,omitempty"`                                     // 流局标记
	PlayerResults []*MJPlayerResult      `protobuf:"bytes,2,rep,name=player_results,json=playerResults,proto3" json:"player_results,omitempty"` // 玩家结果列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJResultAck) Reset() {
	*x = MJResultAck{}
	mi := &file_mj_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJResultAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJResultAck) ProtoMessage() {}

func (x *MJResultAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJResultAck.ProtoReflect.Descriptor instead.
func (*MJResultAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{17}
}

func (x *MJResultAck) GetLiuju() bool {
	if x != nil {
		return x.Liuju
	}
	return false
}

func (x *MJResultAck) GetPlayerResults() []*MJPlayerResult {
	if x != nil {
		return x.PlayerResults
	}
	return nil
}

type MJPlayerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                         // 玩家ID
	CurScore      int64                  `protobuf:"varint,2,opt,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"` // 当前分数
	WinScore      int64                  `protobuf:"varint,3,opt,name=win_score,json=winScore,proto3" json:"win_score,omitempty"` // 总得分
	Tiles         []int32                `protobuf:"varint,4,rep,packed,name=tiles,proto3" json:"tiles,omitempty"`                // 玩家手牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJPlayerResult) Reset() {
	*x = MJPlayerResult{}
	mi := &file_mj_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJPlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJPlayerResult) ProtoMessage() {}

func (x *MJPlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJPlayerResult.ProtoReflect.Descriptor instead.
func (*MJPlayerResult) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{18}
}

func (x *MJPlayerResult) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJPlayerResult) GetCurScore() int64 {
	if x != nil {
		return x.CurScore
	}
	return 0
}

func (x *MJPlayerResult) GetWinScore() int64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *MJPlayerResult) GetTiles() []int32 {
	if x != nil {
		return x.Tiles
	}
	return nil
}

type MJCallDataAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                                                                                   //座位号
	CallData      map[int32]*CallData    `protobuf:"bytes,2,rep,name=call_data,json=callData,proto3" json:"call_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 打出的牌-听牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MJCallDataAck) Reset() {
	*x = MJCallDataAck{}
	mi := &file_mj_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MJCallDataAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MJCallDataAck) ProtoMessage() {}

func (x *MJCallDataAck) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MJCallDataAck.ProtoReflect.Descriptor instead.
func (*MJCallDataAck) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{19}
}

func (x *MJCallDataAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *MJCallDataAck) GetCallData() map[int32]*CallData {
	if x != nil {
		return x.CallData
	}
	return nil
}

type CallData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CallTiles     map[int32]*CallInfo    `protobuf:"bytes,2,rep,name=call_tiles,json=callTiles,proto3" json:"call_tiles,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 听牌列表(牌-番数或倍数)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallData) Reset() {
	*x = CallData{}
	mi := &file_mj_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallData) ProtoMessage() {}

func (x *CallData) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallData.ProtoReflect.Descriptor instead.
func (*CallData) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{20}
}

func (x *CallData) GetCallTiles() map[int32]*CallInfo {
	if x != nil {
		return x.CallTiles
	}
	return nil
}

type CallInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Multi         int64                  `protobuf:"varint,1,opt,name=multi,proto3" json:"multi,omitempty"`                           //倍数
	HuTypes       []int32                `protobuf:"varint,2,rep,packed,name=hu_types,json=huTypes,proto3" json:"hu_types,omitempty"` //胡牌类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallInfo) Reset() {
	*x = CallInfo{}
	mi := &file_mj_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallInfo) ProtoMessage() {}

func (x *CallInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mj_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallInfo.ProtoReflect.Descriptor instead.
func (*CallInfo) Descriptor() ([]byte, []int) {
	return file_mj_proto_rawDescGZIP(), []int{21}
}

func (x *CallInfo) GetMulti() int64 {
	if x != nil {
		return x.Multi
	}
	return 0
}

func (x *CallInfo) GetHuTypes() []int32 {
	if x != nil {
		return x.HuTypes
	}
	return nil
}

var File_mj_proto protoreflect.FileDescriptor

const file_mj_proto_rawDesc = "" +
	"\n" +
	"\bmj.proto\x12\x04pbmj\"\x92\x01\n" +
	"\fMJRequestReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\frequest_type\x18\x02 \x01(\x05R\vrequestType\x12\x1c\n" +
	"\trequestid\x18\x03 \x01(\x05R\trequestid\x12\x12\n" +
	"\x04tile\x18\x04 \x01(\x05R\x04tile\x12\x19\n" +
	"\bdis_tile\x18\x05 \x01(\x05R\adisTile\"6\n" +
	"\n" +
	"MJTrustReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05trust\x18\x02 \x01(\bR\x05trust\"B\n" +
	"\x0eMJAnimationReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x1c\n" +
	"\trequestid\x18\x02 \x01(\x05R\trequestid\"{\n" +
	"\x0eMJGameStartAck\x12\x16\n" +
	"\x06banker\x18\x01 \x01(\x05R\x06banker\x12\x1d\n" +
	"\n" +
	"tile_count\x18\x02 \x01(\x05R\ttileCount\x12\x16\n" +
	"\x06scores\x18\x03 \x03(\x03R\x06scores\x12\x1a\n" +
	"\bproperty\x18\x04 \x01(\tR\bproperty\"9\n" +
	"\rMJOpenDoorAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05tiles\x18\x02 \x03(\x05R\x05tiles\"\xa1\x01\n" +
	"\fMJRequestAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\frequest_type\x18\x02 \x01(\x05R\vrequestType\x12\x1c\n" +
	"\trequestid\x18\x03 \x01(\x05R\trequestid\x12\x19\n" +
	"\bhu_multi\x18\x04 \x01(\x03R\ahuMulti\x12!\n" +
	"\fchow_lpoints\x18\x05 \x03(\x05R\vchowLpoints\"\xed\x01\n" +
	"\tMJChowAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04from\x18\x02 \x01(\x05R\x04from\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\x12\x1b\n" +
	"\tleft_tile\x18\x04 \x01(\x05R\bleftTile\x12:\n" +
	"\tcall_data\x18\x05 \x03(\v2\x1d.pbmj.MJChowAck.CallDataEntryR\bcallData\x1aK\n" +
	"\rCallDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.pbmj.CallDataR\x05value:\x028\x01\"\xce\x01\n" +
	"\bMJPonAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04from\x18\x02 \x01(\x05R\x04from\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\x129\n" +
	"\tcall_data\x18\x04 \x03(\v2\x1c.pbmj.MJPonAck.CallDataEntryR\bcallData\x1aK\n" +
	"\rCallDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.pbmj.CallDataR\x05value:\x028\x01\"a\n" +
	"\bMJKonAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04from\x18\x02 \x01(\x05R\x04from\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\x12\x19\n" +
	"\bkon_type\x18\x04 \x01(\x05R\akonType\"a\n" +
	"\aMJHuAck\x12\x19\n" +
	"\bpao_seat\x18\x01 \x01(\x05R\apaoSeat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\x12'\n" +
	"\ahu_data\x18\x03 \x03(\v2\x0e.pbmj.MJHuDataR\x06huData\"a\n" +
	"\bMJHuData\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x10\n" +
	"\x03gen\x18\x02 \x01(\x05R\x03gen\x12\x14\n" +
	"\x05multi\x18\x03 \x01(\x03R\x05multi\x12\x19\n" +
	"\bhu_types\x18\x04 \x03(\x05R\ahuTypes\"\xd9\x01\n" +
	"\tMJDrawAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\x12\x1b\n" +
	"\tdraw_type\x18\x03 \x01(\x05R\bdrawType\x12:\n" +
	"\tcall_data\x18\x04 \x03(\v2\x1d.pbmj.MJDrawAck.CallDataEntryR\bcallData\x1aK\n" +
	"\rCallDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.pbmj.CallDataR\x05value:\x028\x01\"6\n" +
	"\fMJDiscardAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\"P\n" +
	"\tMJTingAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\x12\x1b\n" +
	"\ttian_ting\x18\x03 \x01(\bR\btianTing\"\xa5\x01\n" +
	"\x10MJScoreChangeAck\x12!\n" +
	"\fscore_reason\x18\x01 \x01(\x05R\vscoreReason\x12\x16\n" +
	"\x06scores\x18\x02 \x03(\x03R\x06scores\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\x12\x19\n" +
	"\bpao_seat\x18\x04 \x01(\x05R\apaoSeat\x12'\n" +
	"\ahu_data\x18\x05 \x03(\v2\x0e.pbmj.MJHuDataR\x06huData\"6\n" +
	"\n" +
	"MJTrustAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05trust\x18\x02 \x01(\bR\x05trust\".\n" +
	"\x0eMJAnimationAck\x12\x1c\n" +
	"\trequestid\x18\x01 \x01(\x05R\trequestid\"`\n" +
	"\vMJResultAck\x12\x14\n" +
	"\x05liuju\x18\x01 \x01(\bR\x05liuju\x12;\n" +
	"\x0eplayer_results\x18\x02 \x03(\v2\x14.pbmj.MJPlayerResultR\rplayerResults\"t\n" +
	"\x0eMJPlayerResult\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x1b\n" +
	"\tcur_score\x18\x02 \x01(\x03R\bcurScore\x12\x1b\n" +
	"\twin_score\x18\x03 \x01(\x03R\bwinScore\x12\x14\n" +
	"\x05tiles\x18\x04 \x03(\x05R\x05tiles\"\xb0\x01\n" +
	"\rMJCallDataAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12>\n" +
	"\tcall_data\x18\x02 \x03(\v2!.pbmj.MJCallDataAck.CallDataEntryR\bcallData\x1aK\n" +
	"\rCallDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.pbmj.CallDataR\x05value:\x028\x01\"\x96\x01\n" +
	"\bCallData\x12<\n" +
	"\n" +
	"call_tiles\x18\x02 \x03(\v2\x1d.pbmj.CallData.CallTilesEntryR\tcallTiles\x1aL\n" +
	"\x0eCallTilesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.pbmj.CallInfoR\x05value:\x028\x01\";\n" +
	"\bCallInfo\x12\x14\n" +
	"\x05multi\x18\x01 \x01(\x03R\x05multi\x12\x19\n" +
	"\bhu_types\x18\x02 \x03(\x05R\ahuTypesB\aZ\x05/pbmjb\x06proto3"

var (
	file_mj_proto_rawDescOnce sync.Once
	file_mj_proto_rawDescData []byte
)

func file_mj_proto_rawDescGZIP() []byte {
	file_mj_proto_rawDescOnce.Do(func() {
		file_mj_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mj_proto_rawDesc), len(file_mj_proto_rawDesc)))
	})
	return file_mj_proto_rawDescData
}

var file_mj_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_mj_proto_goTypes = []any{
	(*MJRequestReq)(nil),     // 0: pbmj.MJRequestReq
	(*MJTrustReq)(nil),       // 1: pbmj.MJTrustReq
	(*MJAnimationReq)(nil),   // 2: pbmj.MJAnimationReq
	(*MJGameStartAck)(nil),   // 3: pbmj.MJGameStartAck
	(*MJOpenDoorAck)(nil),    // 4: pbmj.MJOpenDoorAck
	(*MJRequestAck)(nil),     // 5: pbmj.MJRequestAck
	(*MJChowAck)(nil),        // 6: pbmj.MJChowAck
	(*MJPonAck)(nil),         // 7: pbmj.MJPonAck
	(*MJKonAck)(nil),         // 8: pbmj.MJKonAck
	(*MJHuAck)(nil),          // 9: pbmj.MJHuAck
	(*MJHuData)(nil),         // 10: pbmj.MJHuData
	(*MJDrawAck)(nil),        // 11: pbmj.MJDrawAck
	(*MJDiscardAck)(nil),     // 12: pbmj.MJDiscardAck
	(*MJTingAck)(nil),        // 13: pbmj.MJTingAck
	(*MJScoreChangeAck)(nil), // 14: pbmj.MJScoreChangeAck
	(*MJTrustAck)(nil),       // 15: pbmj.MJTrustAck
	(*MJAnimationAck)(nil),   // 16: pbmj.MJAnimationAck
	(*MJResultAck)(nil),      // 17: pbmj.MJResultAck
	(*MJPlayerResult)(nil),   // 18: pbmj.MJPlayerResult
	(*MJCallDataAck)(nil),    // 19: pbmj.MJCallDataAck
	(*CallData)(nil),         // 20: pbmj.CallData
	(*CallInfo)(nil),         // 21: pbmj.CallInfo
	nil,                      // 22: pbmj.MJChowAck.CallDataEntry
	nil,                      // 23: pbmj.MJPonAck.CallDataEntry
	nil,                      // 24: pbmj.MJDrawAck.CallDataEntry
	nil,                      // 25: pbmj.MJCallDataAck.CallDataEntry
	nil,                      // 26: pbmj.CallData.CallTilesEntry
}
var file_mj_proto_depIdxs = []int32{
	22, // 0: pbmj.MJChowAck.call_data:type_name -> pbmj.MJChowAck.CallDataEntry
	23, // 1: pbmj.MJPonAck.call_data:type_name -> pbmj.MJPonAck.CallDataEntry
	10, // 2: pbmj.MJHuAck.hu_data:type_name -> pbmj.MJHuData
	24, // 3: pbmj.MJDrawAck.call_data:type_name -> pbmj.MJDrawAck.CallDataEntry
	10, // 4: pbmj.MJScoreChangeAck.hu_data:type_name -> pbmj.MJHuData
	18, // 5: pbmj.MJResultAck.player_results:type_name -> pbmj.MJPlayerResult
	25, // 6: pbmj.MJCallDataAck.call_data:type_name -> pbmj.MJCallDataAck.CallDataEntry
	26, // 7: pbmj.CallData.call_tiles:type_name -> pbmj.CallData.CallTilesEntry
	20, // 8: pbmj.MJChowAck.CallDataEntry.value:type_name -> pbmj.CallData
	20, // 9: pbmj.MJPonAck.CallDataEntry.value:type_name -> pbmj.CallData
	20, // 10: pbmj.MJDrawAck.CallDataEntry.value:type_name -> pbmj.CallData
	20, // 11: pbmj.MJCallDataAck.CallDataEntry.value:type_name -> pbmj.CallData
	21, // 12: pbmj.CallData.CallTilesEntry.value:type_name -> pbmj.CallInfo
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_mj_proto_init() }
func file_mj_proto_init() {
	if File_mj_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mj_proto_rawDesc), len(file_mj_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mj_proto_goTypes,
		DependencyIndexes: file_mj_proto_depIdxs,
		MessageInfos:      file_mj_proto_msgTypes,
	}.Build()
	File_mj_proto = out.File
	file_mj_proto_goTypes = nil
	file_mj_proto_depIdxs = nil
}
