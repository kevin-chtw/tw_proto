// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: sc.proto

package scproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SCReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ScRequestReq   *SCRequestReq          `protobuf:"bytes,1,opt,name=sc_request_req,json=scRequestReq,proto3" json:"sc_request_req,omitempty"`
	ScTrustReq     *SCTrustReq            `protobuf:"bytes,2,opt,name=sc_trust_req,json=scTrustReq,proto3" json:"sc_trust_req,omitempty"`
	ScAnimationReq *SCAnimationReq        `protobuf:"bytes,3,opt,name=sc_animation_req,json=scAnimationReq,proto3" json:"sc_animation_req,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SCReq) Reset() {
	*x = SCReq{}
	mi := &file_sc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCReq) ProtoMessage() {}

func (x *SCReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCReq.ProtoReflect.Descriptor instead.
func (*SCReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{0}
}

func (x *SCReq) GetScRequestReq() *SCRequestReq {
	if x != nil {
		return x.ScRequestReq
	}
	return nil
}

func (x *SCReq) GetScTrustReq() *SCTrustReq {
	if x != nil {
		return x.ScTrustReq
	}
	return nil
}

func (x *SCReq) GetScAnimationReq() *SCAnimationReq {
	if x != nil {
		return x.ScAnimationReq
	}
	return nil
}

type SCAck struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ScGameStartAck   *SCGameStartAck        `protobuf:"bytes,1,opt,name=sc_game_start_ack,json=scGameStartAck,proto3" json:"sc_game_start_ack,omitempty"`
	ScOpenDoorAck    *SCOpenDoorAck         `protobuf:"bytes,2,opt,name=sc_open_door_ack,json=scOpenDoorAck,proto3" json:"sc_open_door_ack,omitempty"`
	ScRequestAck     *SCRequestAck          `protobuf:"bytes,3,opt,name=sc_request_ack,json=scRequestAck,proto3" json:"sc_request_ack,omitempty"`
	ScPonAck         *SCPonAck              `protobuf:"bytes,4,opt,name=sc_pon_ack,json=scPonAck,proto3" json:"sc_pon_ack,omitempty"`
	ScKonAck         *SCKonAck              `protobuf:"bytes,5,opt,name=sc_kon_ack,json=scKonAck,proto3" json:"sc_kon_ack,omitempty"`
	ScHuAck          *SCHuAck               `protobuf:"bytes,6,opt,name=sc_hu_ack,json=scHuAck,proto3" json:"sc_hu_ack,omitempty"`
	ScDrawAck        *SCDrawAck             `protobuf:"bytes,7,opt,name=sc_draw_ack,json=scDrawAck,proto3" json:"sc_draw_ack,omitempty"`
	ScDiscardAck     *SCDiscardAck          `protobuf:"bytes,8,opt,name=sc_discard_ack,json=scDiscardAck,proto3" json:"sc_discard_ack,omitempty"`
	ScScoreChangeAck *SCScoreChangeAck      `protobuf:"bytes,9,opt,name=sc_score_change_ack,json=scScoreChangeAck,proto3" json:"sc_score_change_ack,omitempty"`
	ScResultAck      *SCResultAck           `protobuf:"bytes,10,opt,name=sc_result_ack,json=scResultAck,proto3" json:"sc_result_ack,omitempty"`
	ScTrustAck       *SCTrustAck            `protobuf:"bytes,11,opt,name=sc_trust_ack,json=scTrustAck,proto3" json:"sc_trust_ack,omitempty"`
	ScAnimationAck   *SCAnimationAck        `protobuf:"bytes,12,opt,name=sc_animation_ack,json=scAnimationAck,proto3" json:"sc_animation_ack,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SCAck) Reset() {
	*x = SCAck{}
	mi := &file_sc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCAck) ProtoMessage() {}

func (x *SCAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCAck.ProtoReflect.Descriptor instead.
func (*SCAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{1}
}

func (x *SCAck) GetScGameStartAck() *SCGameStartAck {
	if x != nil {
		return x.ScGameStartAck
	}
	return nil
}

func (x *SCAck) GetScOpenDoorAck() *SCOpenDoorAck {
	if x != nil {
		return x.ScOpenDoorAck
	}
	return nil
}

func (x *SCAck) GetScRequestAck() *SCRequestAck {
	if x != nil {
		return x.ScRequestAck
	}
	return nil
}

func (x *SCAck) GetScPonAck() *SCPonAck {
	if x != nil {
		return x.ScPonAck
	}
	return nil
}

func (x *SCAck) GetScKonAck() *SCKonAck {
	if x != nil {
		return x.ScKonAck
	}
	return nil
}

func (x *SCAck) GetScHuAck() *SCHuAck {
	if x != nil {
		return x.ScHuAck
	}
	return nil
}

func (x *SCAck) GetScDrawAck() *SCDrawAck {
	if x != nil {
		return x.ScDrawAck
	}
	return nil
}

func (x *SCAck) GetScDiscardAck() *SCDiscardAck {
	if x != nil {
		return x.ScDiscardAck
	}
	return nil
}

func (x *SCAck) GetScScoreChangeAck() *SCScoreChangeAck {
	if x != nil {
		return x.ScScoreChangeAck
	}
	return nil
}

func (x *SCAck) GetScResultAck() *SCResultAck {
	if x != nil {
		return x.ScResultAck
	}
	return nil
}

func (x *SCAck) GetScTrustAck() *SCTrustAck {
	if x != nil {
		return x.ScTrustAck
	}
	return nil
}

func (x *SCAck) GetScAnimationAck() *SCAnimationAck {
	if x != nil {
		return x.ScAnimationAck
	}
	return nil
}

type SCRequestReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                  //座位号
	RequestType   int32                  `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"` // 动作类型
	Requestid     int32                  `protobuf:"varint,3,opt,name=requestid,proto3" json:"requestid,omitempty"`                        // 请求ID
	Tile          int32                  `protobuf:"varint,4,opt,name=tile,proto3" json:"tile,omitempty"`                                  // 牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCRequestReq) Reset() {
	*x = SCRequestReq{}
	mi := &file_sc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCRequestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRequestReq) ProtoMessage() {}

func (x *SCRequestReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRequestReq.ProtoReflect.Descriptor instead.
func (*SCRequestReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{2}
}

func (x *SCRequestReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCRequestReq) GetRequestType() int32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *SCRequestReq) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *SCRequestReq) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

type SCTrustReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`   //座位号
	Trust         bool                   `protobuf:"varint,2,opt,name=trust,proto3" json:"trust,omitempty"` // 是否托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCTrustReq) Reset() {
	*x = SCTrustReq{}
	mi := &file_sc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCTrustReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTrustReq) ProtoMessage() {}

func (x *SCTrustReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTrustReq.ProtoReflect.Descriptor instead.
func (*SCTrustReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{3}
}

func (x *SCTrustReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCTrustReq) GetTrust() bool {
	if x != nil {
		return x.Trust
	}
	return false
}

type SCAnimationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`           //座位号
	Requestid     int32                  `protobuf:"varint,2,opt,name=requestid,proto3" json:"requestid,omitempty"` // 请求ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCAnimationReq) Reset() {
	*x = SCAnimationReq{}
	mi := &file_sc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCAnimationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCAnimationReq) ProtoMessage() {}

func (x *SCAnimationReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCAnimationReq.ProtoReflect.Descriptor instead.
func (*SCAnimationReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{4}
}

func (x *SCAnimationReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCAnimationReq) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type SCGameStartAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Banker        int32                  `protobuf:"varint,1,opt,name=banker,proto3" json:"banker,omitempty"`                        //庄家
	TileCount     int32                  `protobuf:"varint,2,opt,name=tile_count,json=tileCount,proto3" json:"tile_count,omitempty"` //牌库总张数
	Scores        []int64                `protobuf:"varint,3,rep,packed,name=scores,proto3" json:"scores,omitempty"`                 //带入分
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCGameStartAck) Reset() {
	*x = SCGameStartAck{}
	mi := &file_sc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCGameStartAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGameStartAck) ProtoMessage() {}

func (x *SCGameStartAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGameStartAck.ProtoReflect.Descriptor instead.
func (*SCGameStartAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{5}
}

func (x *SCGameStartAck) GetBanker() int32 {
	if x != nil {
		return x.Banker
	}
	return 0
}

func (x *SCGameStartAck) GetTileCount() int32 {
	if x != nil {
		return x.TileCount
	}
	return 0
}

func (x *SCGameStartAck) GetScores() []int64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

type SCOpenDoorAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`          //座位号
	Tiles         []int32                `protobuf:"varint,2,rep,packed,name=tiles,proto3" json:"tiles,omitempty"` // 手牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCOpenDoorAck) Reset() {
	*x = SCOpenDoorAck{}
	mi := &file_sc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCOpenDoorAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCOpenDoorAck) ProtoMessage() {}

func (x *SCOpenDoorAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCOpenDoorAck.ProtoReflect.Descriptor instead.
func (*SCOpenDoorAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{6}
}

func (x *SCOpenDoorAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCOpenDoorAck) GetTiles() []int32 {
	if x != nil {
		return x.Tiles
	}
	return nil
}

type SCRequestAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                  // //座位号
	RequestType   int32                  `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"` // 动作类型
	Requestid     int32                  `protobuf:"varint,3,opt,name=requestid,proto3" json:"requestid,omitempty"`                        // 请求ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCRequestAck) Reset() {
	*x = SCRequestAck{}
	mi := &file_sc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRequestAck) ProtoMessage() {}

func (x *SCRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRequestAck.ProtoReflect.Descriptor instead.
func (*SCRequestAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{7}
}

func (x *SCRequestAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCRequestAck) GetRequestType() int32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *SCRequestAck) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type SCPonAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"` //座位号
	From          int32                  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"` //出牌座位号
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"` //碰的牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCPonAck) Reset() {
	*x = SCPonAck{}
	mi := &file_sc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCPonAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPonAck) ProtoMessage() {}

func (x *SCPonAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPonAck.ProtoReflect.Descriptor instead.
func (*SCPonAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{8}
}

func (x *SCPonAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCPonAck) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SCPonAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

type SCKonAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                      //座位号
	From          int32                  `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`                      //出牌座位号
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                      //碰的牌列表
	KonType       int32                  `protobuf:"varint,4,opt,name=kon_type,json=konType,proto3" json:"kon_type,omitempty"` //杠牌的类型(0:明杠 1： 暗杠 2：补杠)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCKonAck) Reset() {
	*x = SCKonAck{}
	mi := &file_sc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCKonAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCKonAck) ProtoMessage() {}

func (x *SCKonAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCKonAck.ProtoReflect.Descriptor instead.
func (*SCKonAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{9}
}

func (x *SCKonAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCKonAck) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *SCKonAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *SCKonAck) GetKonType() int32 {
	if x != nil {
		return x.KonType
	}
	return 0
}

type SCHuAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PaoSeat       int32                  `protobuf:"varint,1,opt,name=pao_seat,json=paoSeat,proto3" json:"pao_seat,omitempty"` //点炮玩家
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"`                      //胡的牌
	HuData        []*SCHuData            `protobuf:"bytes,3,rep,name=hu_data,json=huData,proto3" json:"hu_data,omitempty"`     // 胡的类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCHuAck) Reset() {
	*x = SCHuAck{}
	mi := &file_sc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCHuAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHuAck) ProtoMessage() {}

func (x *SCHuAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHuAck.ProtoReflect.Descriptor instead.
func (*SCHuAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{10}
}

func (x *SCHuAck) GetPaoSeat() int32 {
	if x != nil {
		return x.PaoSeat
	}
	return 0
}

func (x *SCHuAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *SCHuAck) GetHuData() []*SCHuData {
	if x != nil {
		return x.HuData
	}
	return nil
}

type SCHuData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                             //座位号
	HuTypes       []int32                `protobuf:"varint,2,rep,packed,name=hu_types,json=huTypes,proto3" json:"hu_types,omitempty"` // 胡的类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCHuData) Reset() {
	*x = SCHuData{}
	mi := &file_sc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCHuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHuData) ProtoMessage() {}

func (x *SCHuData) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHuData.ProtoReflect.Descriptor instead.
func (*SCHuData) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{11}
}

func (x *SCHuData) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCHuData) GetHuTypes() []int32 {
	if x != nil {
		return x.HuTypes
	}
	return nil
}

type SCDrawAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                         //座位号
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"`                         //胡的牌
	DrawType      int32                  `protobuf:"varint,3,opt,name=draw_type,json=drawType,proto3" json:"draw_type,omitempty"` //0-空，1-普通，2-杠后
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDrawAck) Reset() {
	*x = SCDrawAck{}
	mi := &file_sc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDrawAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDrawAck) ProtoMessage() {}

func (x *SCDrawAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDrawAck.ProtoReflect.Descriptor instead.
func (*SCDrawAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{12}
}

func (x *SCDrawAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCDrawAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *SCDrawAck) GetDrawType() int32 {
	if x != nil {
		return x.DrawType
	}
	return 0
}

type SCDiscardAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"` //座位号
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"` // 丢弃的牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDiscardAck) Reset() {
	*x = SCDiscardAck{}
	mi := &file_sc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDiscardAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDiscardAck) ProtoMessage() {}

func (x *SCDiscardAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDiscardAck.ProtoReflect.Descriptor instead.
func (*SCDiscardAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{13}
}

func (x *SCDiscardAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCDiscardAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

type SCScoreChangeAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scores        []int32                `protobuf:"varint,1,rep,packed,name=scores,proto3" json:"scores,omitempty"` //得分列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCScoreChangeAck) Reset() {
	*x = SCScoreChangeAck{}
	mi := &file_sc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCScoreChangeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCScoreChangeAck) ProtoMessage() {}

func (x *SCScoreChangeAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCScoreChangeAck.ProtoReflect.Descriptor instead.
func (*SCScoreChangeAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{14}
}

func (x *SCScoreChangeAck) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

type SCTrustAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`   // 玩家ID
	Trust         bool                   `protobuf:"varint,2,opt,name=trust,proto3" json:"trust,omitempty"` // 是否托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCTrustAck) Reset() {
	*x = SCTrustAck{}
	mi := &file_sc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCTrustAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTrustAck) ProtoMessage() {}

func (x *SCTrustAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTrustAck.ProtoReflect.Descriptor instead.
func (*SCTrustAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{15}
}

func (x *SCTrustAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCTrustAck) GetTrust() bool {
	if x != nil {
		return x.Trust
	}
	return false
}

type SCAnimationAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requestid     int32                  `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCAnimationAck) Reset() {
	*x = SCAnimationAck{}
	mi := &file_sc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCAnimationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCAnimationAck) ProtoMessage() {}

func (x *SCAnimationAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCAnimationAck.ProtoReflect.Descriptor instead.
func (*SCAnimationAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{16}
}

func (x *SCAnimationAck) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type SCResultAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerResults []*SCPlayerResult      `protobuf:"bytes,2,rep,name=player_results,json=playerResults,proto3" json:"player_results,omitempty"` // 玩家结果列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCResultAck) Reset() {
	*x = SCResultAck{}
	mi := &file_sc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCResultAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCResultAck) ProtoMessage() {}

func (x *SCResultAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCResultAck.ProtoReflect.Descriptor instead.
func (*SCResultAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{17}
}

func (x *SCResultAck) GetPlayerResults() []*SCPlayerResult {
	if x != nil {
		return x.PlayerResults
	}
	return nil
}

type SCPlayerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`          // 玩家ID
	Score         int32                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`        // 玩家得分
	Tiles         []int32                `protobuf:"varint,3,rep,packed,name=tiles,proto3" json:"tiles,omitempty"` // 玩家手牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCPlayerResult) Reset() {
	*x = SCPlayerResult{}
	mi := &file_sc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCPlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPlayerResult) ProtoMessage() {}

func (x *SCPlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPlayerResult.ProtoReflect.Descriptor instead.
func (*SCPlayerResult) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{18}
}

func (x *SCPlayerResult) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCPlayerResult) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SCPlayerResult) GetTiles() []int32 {
	if x != nil {
		return x.Tiles
	}
	return nil
}

var File_sc_proto protoreflect.FileDescriptor

const file_sc_proto_rawDesc = "" +
	"\n" +
	"\bsc.proto\x12\ascproto\"\xbe\x01\n" +
	"\x05SCReq\x12;\n" +
	"\x0esc_request_req\x18\x01 \x01(\v2\x15.scproto.SCRequestReqR\fscRequestReq\x125\n" +
	"\fsc_trust_req\x18\x02 \x01(\v2\x13.scproto.SCTrustReqR\n" +
	"scTrustReq\x12A\n" +
	"\x10sc_animation_req\x18\x03 \x01(\v2\x17.scproto.SCAnimationReqR\x0escAnimationReq\"\xc8\x05\n" +
	"\x05SCAck\x12B\n" +
	"\x11sc_game_start_ack\x18\x01 \x01(\v2\x17.scproto.SCGameStartAckR\x0escGameStartAck\x12?\n" +
	"\x10sc_open_door_ack\x18\x02 \x01(\v2\x16.scproto.SCOpenDoorAckR\rscOpenDoorAck\x12;\n" +
	"\x0esc_request_ack\x18\x03 \x01(\v2\x15.scproto.SCRequestAckR\fscRequestAck\x12/\n" +
	"\n" +
	"sc_pon_ack\x18\x04 \x01(\v2\x11.scproto.SCPonAckR\bscPonAck\x12/\n" +
	"\n" +
	"sc_kon_ack\x18\x05 \x01(\v2\x11.scproto.SCKonAckR\bscKonAck\x12,\n" +
	"\tsc_hu_ack\x18\x06 \x01(\v2\x10.scproto.SCHuAckR\ascHuAck\x122\n" +
	"\vsc_draw_ack\x18\a \x01(\v2\x12.scproto.SCDrawAckR\tscDrawAck\x12;\n" +
	"\x0esc_discard_ack\x18\b \x01(\v2\x15.scproto.SCDiscardAckR\fscDiscardAck\x12H\n" +
	"\x13sc_score_change_ack\x18\t \x01(\v2\x19.scproto.SCScoreChangeAckR\x10scScoreChangeAck\x128\n" +
	"\rsc_result_ack\x18\n" +
	" \x01(\v2\x14.scproto.SCResultAckR\vscResultAck\x125\n" +
	"\fsc_trust_ack\x18\v \x01(\v2\x13.scproto.SCTrustAckR\n" +
	"scTrustAck\x12A\n" +
	"\x10sc_animation_ack\x18\f \x01(\v2\x17.scproto.SCAnimationAckR\x0escAnimationAck\"w\n" +
	"\fSCRequestReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\frequest_type\x18\x02 \x01(\x05R\vrequestType\x12\x1c\n" +
	"\trequestid\x18\x03 \x01(\x05R\trequestid\x12\x12\n" +
	"\x04tile\x18\x04 \x01(\x05R\x04tile\"6\n" +
	"\n" +
	"SCTrustReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05trust\x18\x02 \x01(\bR\x05trust\"B\n" +
	"\x0eSCAnimationReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x1c\n" +
	"\trequestid\x18\x02 \x01(\x05R\trequestid\"_\n" +
	"\x0eSCGameStartAck\x12\x16\n" +
	"\x06banker\x18\x01 \x01(\x05R\x06banker\x12\x1d\n" +
	"\n" +
	"tile_count\x18\x02 \x01(\x05R\ttileCount\x12\x16\n" +
	"\x06scores\x18\x03 \x03(\x03R\x06scores\"9\n" +
	"\rSCOpenDoorAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05tiles\x18\x02 \x03(\x05R\x05tiles\"c\n" +
	"\fSCRequestAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\frequest_type\x18\x02 \x01(\x05R\vrequestType\x12\x1c\n" +
	"\trequestid\x18\x03 \x01(\x05R\trequestid\"F\n" +
	"\bSCPonAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04from\x18\x02 \x01(\x05R\x04from\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\"a\n" +
	"\bSCKonAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04from\x18\x02 \x01(\x05R\x04from\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\x12\x19\n" +
	"\bkon_type\x18\x04 \x01(\x05R\akonType\"d\n" +
	"\aSCHuAck\x12\x19\n" +
	"\bpao_seat\x18\x01 \x01(\x05R\apaoSeat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\x12*\n" +
	"\ahu_data\x18\x03 \x03(\v2\x11.scproto.SCHuDataR\x06huData\"9\n" +
	"\bSCHuData\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x19\n" +
	"\bhu_types\x18\x02 \x03(\x05R\ahuTypes\"P\n" +
	"\tSCDrawAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\x12\x1b\n" +
	"\tdraw_type\x18\x03 \x01(\x05R\bdrawType\"6\n" +
	"\fSCDiscardAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\"*\n" +
	"\x10SCScoreChangeAck\x12\x16\n" +
	"\x06scores\x18\x01 \x03(\x05R\x06scores\"6\n" +
	"\n" +
	"SCTrustAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05trust\x18\x02 \x01(\bR\x05trust\".\n" +
	"\x0eSCAnimationAck\x12\x1c\n" +
	"\trequestid\x18\x01 \x01(\x05R\trequestid\"M\n" +
	"\vSCResultAck\x12>\n" +
	"\x0eplayer_results\x18\x02 \x03(\v2\x17.scproto.SCPlayerResultR\rplayerResults\"P\n" +
	"\x0eSCPlayerResult\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x05R\x05score\x12\x14\n" +
	"\x05tiles\x18\x03 \x03(\x05R\x05tilesB\fZ\n" +
	"../scprotob\x06proto3"

var (
	file_sc_proto_rawDescOnce sync.Once
	file_sc_proto_rawDescData []byte
)

func file_sc_proto_rawDescGZIP() []byte {
	file_sc_proto_rawDescOnce.Do(func() {
		file_sc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sc_proto_rawDesc), len(file_sc_proto_rawDesc)))
	})
	return file_sc_proto_rawDescData
}

var file_sc_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_sc_proto_goTypes = []any{
	(*SCReq)(nil),            // 0: scproto.SCReq
	(*SCAck)(nil),            // 1: scproto.SCAck
	(*SCRequestReq)(nil),     // 2: scproto.SCRequestReq
	(*SCTrustReq)(nil),       // 3: scproto.SCTrustReq
	(*SCAnimationReq)(nil),   // 4: scproto.SCAnimationReq
	(*SCGameStartAck)(nil),   // 5: scproto.SCGameStartAck
	(*SCOpenDoorAck)(nil),    // 6: scproto.SCOpenDoorAck
	(*SCRequestAck)(nil),     // 7: scproto.SCRequestAck
	(*SCPonAck)(nil),         // 8: scproto.SCPonAck
	(*SCKonAck)(nil),         // 9: scproto.SCKonAck
	(*SCHuAck)(nil),          // 10: scproto.SCHuAck
	(*SCHuData)(nil),         // 11: scproto.SCHuData
	(*SCDrawAck)(nil),        // 12: scproto.SCDrawAck
	(*SCDiscardAck)(nil),     // 13: scproto.SCDiscardAck
	(*SCScoreChangeAck)(nil), // 14: scproto.SCScoreChangeAck
	(*SCTrustAck)(nil),       // 15: scproto.SCTrustAck
	(*SCAnimationAck)(nil),   // 16: scproto.SCAnimationAck
	(*SCResultAck)(nil),      // 17: scproto.SCResultAck
	(*SCPlayerResult)(nil),   // 18: scproto.SCPlayerResult
}
var file_sc_proto_depIdxs = []int32{
	2,  // 0: scproto.SCReq.sc_request_req:type_name -> scproto.SCRequestReq
	3,  // 1: scproto.SCReq.sc_trust_req:type_name -> scproto.SCTrustReq
	4,  // 2: scproto.SCReq.sc_animation_req:type_name -> scproto.SCAnimationReq
	5,  // 3: scproto.SCAck.sc_game_start_ack:type_name -> scproto.SCGameStartAck
	6,  // 4: scproto.SCAck.sc_open_door_ack:type_name -> scproto.SCOpenDoorAck
	7,  // 5: scproto.SCAck.sc_request_ack:type_name -> scproto.SCRequestAck
	8,  // 6: scproto.SCAck.sc_pon_ack:type_name -> scproto.SCPonAck
	9,  // 7: scproto.SCAck.sc_kon_ack:type_name -> scproto.SCKonAck
	10, // 8: scproto.SCAck.sc_hu_ack:type_name -> scproto.SCHuAck
	12, // 9: scproto.SCAck.sc_draw_ack:type_name -> scproto.SCDrawAck
	13, // 10: scproto.SCAck.sc_discard_ack:type_name -> scproto.SCDiscardAck
	14, // 11: scproto.SCAck.sc_score_change_ack:type_name -> scproto.SCScoreChangeAck
	17, // 12: scproto.SCAck.sc_result_ack:type_name -> scproto.SCResultAck
	15, // 13: scproto.SCAck.sc_trust_ack:type_name -> scproto.SCTrustAck
	16, // 14: scproto.SCAck.sc_animation_ack:type_name -> scproto.SCAnimationAck
	11, // 15: scproto.SCHuAck.hu_data:type_name -> scproto.SCHuData
	18, // 16: scproto.SCResultAck.player_results:type_name -> scproto.SCPlayerResult
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_sc_proto_init() }
func file_sc_proto_init() {
	if File_sc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sc_proto_rawDesc), len(file_sc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sc_proto_goTypes,
		DependencyIndexes: file_sc_proto_depIdxs,
		MessageInfos:      file_sc_proto_msgTypes,
	}.Build()
	File_sc_proto = out.File
	file_sc_proto_goTypes = nil
	file_sc_proto_depIdxs = nil
}
