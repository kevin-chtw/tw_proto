// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: sc.proto

package scproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SCReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Req:
	//
	//	*SCReq_ScRequestReq
	//	*SCReq_ScTrustReq
	//	*SCReq_ScAnimationReq
	Req           isSCReq_Req `protobuf_oneof:"req"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCReq) Reset() {
	*x = SCReq{}
	mi := &file_sc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCReq) ProtoMessage() {}

func (x *SCReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCReq.ProtoReflect.Descriptor instead.
func (*SCReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{0}
}

func (x *SCReq) GetReq() isSCReq_Req {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *SCReq) GetScRequestReq() *SCRequestReq {
	if x != nil {
		if x, ok := x.Req.(*SCReq_ScRequestReq); ok {
			return x.ScRequestReq
		}
	}
	return nil
}

func (x *SCReq) GetScTrustReq() *SCTrustReq {
	if x != nil {
		if x, ok := x.Req.(*SCReq_ScTrustReq); ok {
			return x.ScTrustReq
		}
	}
	return nil
}

func (x *SCReq) GetScAnimationReq() *SCAnimationReq {
	if x != nil {
		if x, ok := x.Req.(*SCReq_ScAnimationReq); ok {
			return x.ScAnimationReq
		}
	}
	return nil
}

type isSCReq_Req interface {
	isSCReq_Req()
}

type SCReq_ScRequestReq struct {
	ScRequestReq *SCRequestReq `protobuf:"bytes,1,opt,name=sc_request_req,json=scRequestReq,proto3,oneof"`
}

type SCReq_ScTrustReq struct {
	ScTrustReq *SCTrustReq `protobuf:"bytes,2,opt,name=sc_trust_req,json=scTrustReq,proto3,oneof"`
}

type SCReq_ScAnimationReq struct {
	ScAnimationReq *SCAnimationReq `protobuf:"bytes,3,opt,name=sc_animation_req,json=scAnimationReq,proto3,oneof"`
}

func (*SCReq_ScRequestReq) isSCReq_Req() {}

func (*SCReq_ScTrustReq) isSCReq_Req() {}

func (*SCReq_ScAnimationReq) isSCReq_Req() {}

type SCAck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Ack:
	//
	//	*SCAck_ScGameStartAck
	//	*SCAck_ScOpenDoorAck
	//	*SCAck_ScRequestAck
	//	*SCAck_ScPengAck
	//	*SCAck_ScGangAck
	//	*SCAck_ScWinAck
	//	*SCAck_ScDrawAck
	//	*SCAck_ScDiscardAck
	//	*SCAck_ScScoreChangeAck
	//	*SCAck_ScResultAck
	//	*SCAck_ScTrustAck
	//	*SCAck_ScAnimationAck
	Ack           isSCAck_Ack `protobuf_oneof:"ack"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCAck) Reset() {
	*x = SCAck{}
	mi := &file_sc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCAck) ProtoMessage() {}

func (x *SCAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCAck.ProtoReflect.Descriptor instead.
func (*SCAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{1}
}

func (x *SCAck) GetAck() isSCAck_Ack {
	if x != nil {
		return x.Ack
	}
	return nil
}

func (x *SCAck) GetScGameStartAck() *SCGameStartAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScGameStartAck); ok {
			return x.ScGameStartAck
		}
	}
	return nil
}

func (x *SCAck) GetScOpenDoorAck() *SCOpenDoorAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScOpenDoorAck); ok {
			return x.ScOpenDoorAck
		}
	}
	return nil
}

func (x *SCAck) GetScRequestAck() *SCRequestAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScRequestAck); ok {
			return x.ScRequestAck
		}
	}
	return nil
}

func (x *SCAck) GetScPengAck() *SCPengAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScPengAck); ok {
			return x.ScPengAck
		}
	}
	return nil
}

func (x *SCAck) GetScGangAck() *SCGangAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScGangAck); ok {
			return x.ScGangAck
		}
	}
	return nil
}

func (x *SCAck) GetScWinAck() *SCWinAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScWinAck); ok {
			return x.ScWinAck
		}
	}
	return nil
}

func (x *SCAck) GetScDrawAck() *SCDrawAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScDrawAck); ok {
			return x.ScDrawAck
		}
	}
	return nil
}

func (x *SCAck) GetScDiscardAck() *SCDiscardAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScDiscardAck); ok {
			return x.ScDiscardAck
		}
	}
	return nil
}

func (x *SCAck) GetScScoreChangeAck() *SCScoreChangeAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScScoreChangeAck); ok {
			return x.ScScoreChangeAck
		}
	}
	return nil
}

func (x *SCAck) GetScResultAck() *SCResultAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScResultAck); ok {
			return x.ScResultAck
		}
	}
	return nil
}

func (x *SCAck) GetScTrustAck() *SCTrustAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScTrustAck); ok {
			return x.ScTrustAck
		}
	}
	return nil
}

func (x *SCAck) GetScAnimationAck() *SCAnimationAck {
	if x != nil {
		if x, ok := x.Ack.(*SCAck_ScAnimationAck); ok {
			return x.ScAnimationAck
		}
	}
	return nil
}

type isSCAck_Ack interface {
	isSCAck_Ack()
}

type SCAck_ScGameStartAck struct {
	ScGameStartAck *SCGameStartAck `protobuf:"bytes,1,opt,name=sc_game_start_ack,json=scGameStartAck,proto3,oneof"`
}

type SCAck_ScOpenDoorAck struct {
	ScOpenDoorAck *SCOpenDoorAck `protobuf:"bytes,2,opt,name=sc_open_door_ack,json=scOpenDoorAck,proto3,oneof"`
}

type SCAck_ScRequestAck struct {
	ScRequestAck *SCRequestAck `protobuf:"bytes,3,opt,name=sc_request_ack,json=scRequestAck,proto3,oneof"`
}

type SCAck_ScPengAck struct {
	ScPengAck *SCPengAck `protobuf:"bytes,4,opt,name=sc_peng_ack,json=scPengAck,proto3,oneof"`
}

type SCAck_ScGangAck struct {
	ScGangAck *SCGangAck `protobuf:"bytes,5,opt,name=sc_gang_ack,json=scGangAck,proto3,oneof"`
}

type SCAck_ScWinAck struct {
	ScWinAck *SCWinAck `protobuf:"bytes,6,opt,name=sc_win_ack,json=scWinAck,proto3,oneof"`
}

type SCAck_ScDrawAck struct {
	ScDrawAck *SCDrawAck `protobuf:"bytes,7,opt,name=sc_draw_ack,json=scDrawAck,proto3,oneof"`
}

type SCAck_ScDiscardAck struct {
	ScDiscardAck *SCDiscardAck `protobuf:"bytes,8,opt,name=sc_discard_ack,json=scDiscardAck,proto3,oneof"`
}

type SCAck_ScScoreChangeAck struct {
	ScScoreChangeAck *SCScoreChangeAck `protobuf:"bytes,9,opt,name=sc_score_change_ack,json=scScoreChangeAck,proto3,oneof"`
}

type SCAck_ScResultAck struct {
	ScResultAck *SCResultAck `protobuf:"bytes,10,opt,name=sc_result_ack,json=scResultAck,proto3,oneof"`
}

type SCAck_ScTrustAck struct {
	ScTrustAck *SCTrustAck `protobuf:"bytes,11,opt,name=sc_trust_ack,json=scTrustAck,proto3,oneof"`
}

type SCAck_ScAnimationAck struct {
	ScAnimationAck *SCAnimationAck `protobuf:"bytes,12,opt,name=sc_animation_ack,json=scAnimationAck,proto3,oneof"`
}

func (*SCAck_ScGameStartAck) isSCAck_Ack() {}

func (*SCAck_ScOpenDoorAck) isSCAck_Ack() {}

func (*SCAck_ScRequestAck) isSCAck_Ack() {}

func (*SCAck_ScPengAck) isSCAck_Ack() {}

func (*SCAck_ScGangAck) isSCAck_Ack() {}

func (*SCAck_ScWinAck) isSCAck_Ack() {}

func (*SCAck_ScDrawAck) isSCAck_Ack() {}

func (*SCAck_ScDiscardAck) isSCAck_Ack() {}

func (*SCAck_ScScoreChangeAck) isSCAck_Ack() {}

func (*SCAck_ScResultAck) isSCAck_Ack() {}

func (*SCAck_ScTrustAck) isSCAck_Ack() {}

func (*SCAck_ScAnimationAck) isSCAck_Ack() {}

type SCRequestReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                  //座位号
	RequestType   int32                  `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"` // 动作类型
	Requestid     int32                  `protobuf:"varint,3,opt,name=requestid,proto3" json:"requestid,omitempty"`                        // 请求ID
	Tile          int32                  `protobuf:"varint,4,opt,name=tile,proto3" json:"tile,omitempty"`                                  // 牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCRequestReq) Reset() {
	*x = SCRequestReq{}
	mi := &file_sc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCRequestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRequestReq) ProtoMessage() {}

func (x *SCRequestReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRequestReq.ProtoReflect.Descriptor instead.
func (*SCRequestReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{2}
}

func (x *SCRequestReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCRequestReq) GetRequestType() int32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *SCRequestReq) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

func (x *SCRequestReq) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

type SCTrustReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`   //座位号
	Trust         bool                   `protobuf:"varint,2,opt,name=trust,proto3" json:"trust,omitempty"` // 是否托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCTrustReq) Reset() {
	*x = SCTrustReq{}
	mi := &file_sc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCTrustReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTrustReq) ProtoMessage() {}

func (x *SCTrustReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTrustReq.ProtoReflect.Descriptor instead.
func (*SCTrustReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{3}
}

func (x *SCTrustReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCTrustReq) GetTrust() bool {
	if x != nil {
		return x.Trust
	}
	return false
}

type SCAnimationReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`           //座位号
	Requestid     int32                  `protobuf:"varint,2,opt,name=requestid,proto3" json:"requestid,omitempty"` // 请求ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCAnimationReq) Reset() {
	*x = SCAnimationReq{}
	mi := &file_sc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCAnimationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCAnimationReq) ProtoMessage() {}

func (x *SCAnimationReq) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCAnimationReq.ProtoReflect.Descriptor instead.
func (*SCAnimationReq) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{4}
}

func (x *SCAnimationReq) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCAnimationReq) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type SCGameStartAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Banker        int32                  `protobuf:"varint,1,opt,name=banker,proto3" json:"banker,omitempty"`                        //庄家
	TileCount     int32                  `protobuf:"varint,2,opt,name=tile_count,json=tileCount,proto3" json:"tile_count,omitempty"` //牌库总张数
	Scores        []int64                `protobuf:"varint,3,rep,packed,name=scores,proto3" json:"scores,omitempty"`                 //带入分
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCGameStartAck) Reset() {
	*x = SCGameStartAck{}
	mi := &file_sc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCGameStartAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGameStartAck) ProtoMessage() {}

func (x *SCGameStartAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGameStartAck.ProtoReflect.Descriptor instead.
func (*SCGameStartAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{5}
}

func (x *SCGameStartAck) GetBanker() int32 {
	if x != nil {
		return x.Banker
	}
	return 0
}

func (x *SCGameStartAck) GetTileCount() int32 {
	if x != nil {
		return x.TileCount
	}
	return 0
}

func (x *SCGameStartAck) GetScores() []int64 {
	if x != nil {
		return x.Scores
	}
	return nil
}

type SCOpenDoorAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`          //座位号
	Tiles         []int32                `protobuf:"varint,2,rep,packed,name=tiles,proto3" json:"tiles,omitempty"` // 手牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCOpenDoorAck) Reset() {
	*x = SCOpenDoorAck{}
	mi := &file_sc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCOpenDoorAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCOpenDoorAck) ProtoMessage() {}

func (x *SCOpenDoorAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCOpenDoorAck.ProtoReflect.Descriptor instead.
func (*SCOpenDoorAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{6}
}

func (x *SCOpenDoorAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCOpenDoorAck) GetTiles() []int32 {
	if x != nil {
		return x.Tiles
	}
	return nil
}

type SCRequestAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                  // //座位号
	RequestType   int32                  `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"` // 动作类型
	Requestid     int32                  `protobuf:"varint,3,opt,name=requestid,proto3" json:"requestid,omitempty"`                        // 请求ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCRequestAck) Reset() {
	*x = SCRequestAck{}
	mi := &file_sc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRequestAck) ProtoMessage() {}

func (x *SCRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRequestAck.ProtoReflect.Descriptor instead.
func (*SCRequestAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{7}
}

func (x *SCRequestAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCRequestAck) GetRequestType() int32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

func (x *SCRequestAck) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type SCPengAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                  //座位号
	DiscardSeat   int32                  `protobuf:"varint,2,opt,name=discard_seat,json=discardSeat,proto3" json:"discard_seat,omitempty"` //出牌座位号
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                                  //碰的牌列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCPengAck) Reset() {
	*x = SCPengAck{}
	mi := &file_sc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCPengAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPengAck) ProtoMessage() {}

func (x *SCPengAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPengAck.ProtoReflect.Descriptor instead.
func (*SCPengAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{8}
}

func (x *SCPengAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCPengAck) GetDiscardSeat() int32 {
	if x != nil {
		return x.DiscardSeat
	}
	return 0
}

func (x *SCPengAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

type SCGangAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                                  //座位号
	DiscardSeat   int32                  `protobuf:"varint,2,opt,name=discard_seat,json=discardSeat,proto3" json:"discard_seat,omitempty"` //出牌座位号
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                                  //碰的牌列表
	GangType      int32                  `protobuf:"varint,4,opt,name=gang_type,json=gangType,proto3" json:"gang_type,omitempty"`          //杠牌的类型(0:明杠 1： 暗杠 2：补杠)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCGangAck) Reset() {
	*x = SCGangAck{}
	mi := &file_sc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCGangAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCGangAck) ProtoMessage() {}

func (x *SCGangAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCGangAck.ProtoReflect.Descriptor instead.
func (*SCGangAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{9}
}

func (x *SCGangAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCGangAck) GetDiscardSeat() int32 {
	if x != nil {
		return x.DiscardSeat
	}
	return 0
}

func (x *SCGangAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *SCGangAck) GetGangType() int32 {
	if x != nil {
		return x.GangType
	}
	return 0
}

type SCWinAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seats         []int32                `protobuf:"varint,1,rep,packed,name=seats,proto3" json:"seats,omitempty"`                 //座位号
	PaoSeat       int32                  `protobuf:"varint,2,opt,name=pao_seat,json=paoSeat,proto3" json:"pao_seat,omitempty"`     //点炮玩家
	Tile          int32                  `protobuf:"varint,3,opt,name=tile,proto3" json:"tile,omitempty"`                          //胡的牌
	HuType        []int32                `protobuf:"varint,4,rep,packed,name=hu_type,json=huType,proto3" json:"hu_type,omitempty"` // 胡的类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCWinAck) Reset() {
	*x = SCWinAck{}
	mi := &file_sc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCWinAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCWinAck) ProtoMessage() {}

func (x *SCWinAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCWinAck.ProtoReflect.Descriptor instead.
func (*SCWinAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{10}
}

func (x *SCWinAck) GetSeats() []int32 {
	if x != nil {
		return x.Seats
	}
	return nil
}

func (x *SCWinAck) GetPaoSeat() int32 {
	if x != nil {
		return x.PaoSeat
	}
	return 0
}

func (x *SCWinAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *SCWinAck) GetHuType() []int32 {
	if x != nil {
		return x.HuType
	}
	return nil
}

type SCDrawAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`                         //座位号
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"`                         //胡的牌
	DrawType      int32                  `protobuf:"varint,3,opt,name=draw_type,json=drawType,proto3" json:"draw_type,omitempty"` //0-空，1-普通，2-杠后
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDrawAck) Reset() {
	*x = SCDrawAck{}
	mi := &file_sc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDrawAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDrawAck) ProtoMessage() {}

func (x *SCDrawAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDrawAck.ProtoReflect.Descriptor instead.
func (*SCDrawAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{11}
}

func (x *SCDrawAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCDrawAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

func (x *SCDrawAck) GetDrawType() int32 {
	if x != nil {
		return x.DrawType
	}
	return 0
}

type SCDiscardAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"` //座位号
	Tile          int32                  `protobuf:"varint,2,opt,name=tile,proto3" json:"tile,omitempty"` // 丢弃的牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCDiscardAck) Reset() {
	*x = SCDiscardAck{}
	mi := &file_sc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCDiscardAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCDiscardAck) ProtoMessage() {}

func (x *SCDiscardAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCDiscardAck.ProtoReflect.Descriptor instead.
func (*SCDiscardAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{12}
}

func (x *SCDiscardAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCDiscardAck) GetTile() int32 {
	if x != nil {
		return x.Tile
	}
	return 0
}

type SCScoreChangeAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scores        []int32                `protobuf:"varint,1,rep,packed,name=scores,proto3" json:"scores,omitempty"` //得分列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCScoreChangeAck) Reset() {
	*x = SCScoreChangeAck{}
	mi := &file_sc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCScoreChangeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCScoreChangeAck) ProtoMessage() {}

func (x *SCScoreChangeAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCScoreChangeAck.ProtoReflect.Descriptor instead.
func (*SCScoreChangeAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{13}
}

func (x *SCScoreChangeAck) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

type SCTrustAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`   // 玩家ID
	Trust         bool                   `protobuf:"varint,2,opt,name=trust,proto3" json:"trust,omitempty"` // 是否托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCTrustAck) Reset() {
	*x = SCTrustAck{}
	mi := &file_sc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCTrustAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCTrustAck) ProtoMessage() {}

func (x *SCTrustAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCTrustAck.ProtoReflect.Descriptor instead.
func (*SCTrustAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{14}
}

func (x *SCTrustAck) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCTrustAck) GetTrust() bool {
	if x != nil {
		return x.Trust
	}
	return false
}

type SCAnimationAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requestid     int32                  `protobuf:"varint,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCAnimationAck) Reset() {
	*x = SCAnimationAck{}
	mi := &file_sc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCAnimationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCAnimationAck) ProtoMessage() {}

func (x *SCAnimationAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCAnimationAck.ProtoReflect.Descriptor instead.
func (*SCAnimationAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{15}
}

func (x *SCAnimationAck) GetRequestid() int32 {
	if x != nil {
		return x.Requestid
	}
	return 0
}

type SCResultAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerResults []*SCPlayerResult      `protobuf:"bytes,2,rep,name=player_results,json=playerResults,proto3" json:"player_results,omitempty"` // 玩家结果列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCResultAck) Reset() {
	*x = SCResultAck{}
	mi := &file_sc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCResultAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCResultAck) ProtoMessage() {}

func (x *SCResultAck) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCResultAck.ProtoReflect.Descriptor instead.
func (*SCResultAck) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{16}
}

func (x *SCResultAck) GetPlayerResults() []*SCPlayerResult {
	if x != nil {
		return x.PlayerResults
	}
	return nil
}

type SCPlayerResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seat          int32                  `protobuf:"varint,1,opt,name=seat,proto3" json:"seat,omitempty"`          // 玩家ID
	Score         int32                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`        // 玩家得分
	Tiles         []int32                `protobuf:"varint,3,rep,packed,name=tiles,proto3" json:"tiles,omitempty"` // 玩家手牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCPlayerResult) Reset() {
	*x = SCPlayerResult{}
	mi := &file_sc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCPlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCPlayerResult) ProtoMessage() {}

func (x *SCPlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_sc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCPlayerResult.ProtoReflect.Descriptor instead.
func (*SCPlayerResult) Descriptor() ([]byte, []int) {
	return file_sc_proto_rawDescGZIP(), []int{17}
}

func (x *SCPlayerResult) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SCPlayerResult) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SCPlayerResult) GetTiles() []int32 {
	if x != nil {
		return x.Tiles
	}
	return nil
}

var File_sc_proto protoreflect.FileDescriptor

const file_sc_proto_rawDesc = "" +
	"\n" +
	"\bsc.proto\x12\ascproto\"\xcb\x01\n" +
	"\x05SCReq\x12=\n" +
	"\x0esc_request_req\x18\x01 \x01(\v2\x15.scproto.SCRequestReqH\x00R\fscRequestReq\x127\n" +
	"\fsc_trust_req\x18\x02 \x01(\v2\x13.scproto.SCTrustReqH\x00R\n" +
	"scTrustReq\x12C\n" +
	"\x10sc_animation_req\x18\x03 \x01(\v2\x17.scproto.SCAnimationReqH\x00R\x0escAnimationReqB\x05\n" +
	"\x03req\"\xf0\x05\n" +
	"\x05SCAck\x12D\n" +
	"\x11sc_game_start_ack\x18\x01 \x01(\v2\x17.scproto.SCGameStartAckH\x00R\x0escGameStartAck\x12A\n" +
	"\x10sc_open_door_ack\x18\x02 \x01(\v2\x16.scproto.SCOpenDoorAckH\x00R\rscOpenDoorAck\x12=\n" +
	"\x0esc_request_ack\x18\x03 \x01(\v2\x15.scproto.SCRequestAckH\x00R\fscRequestAck\x124\n" +
	"\vsc_peng_ack\x18\x04 \x01(\v2\x12.scproto.SCPengAckH\x00R\tscPengAck\x124\n" +
	"\vsc_gang_ack\x18\x05 \x01(\v2\x12.scproto.SCGangAckH\x00R\tscGangAck\x121\n" +
	"\n" +
	"sc_win_ack\x18\x06 \x01(\v2\x11.scproto.SCWinAckH\x00R\bscWinAck\x124\n" +
	"\vsc_draw_ack\x18\a \x01(\v2\x12.scproto.SCDrawAckH\x00R\tscDrawAck\x12=\n" +
	"\x0esc_discard_ack\x18\b \x01(\v2\x15.scproto.SCDiscardAckH\x00R\fscDiscardAck\x12J\n" +
	"\x13sc_score_change_ack\x18\t \x01(\v2\x19.scproto.SCScoreChangeAckH\x00R\x10scScoreChangeAck\x12:\n" +
	"\rsc_result_ack\x18\n" +
	" \x01(\v2\x14.scproto.SCResultAckH\x00R\vscResultAck\x127\n" +
	"\fsc_trust_ack\x18\v \x01(\v2\x13.scproto.SCTrustAckH\x00R\n" +
	"scTrustAck\x12C\n" +
	"\x10sc_animation_ack\x18\f \x01(\v2\x17.scproto.SCAnimationAckH\x00R\x0escAnimationAckB\x05\n" +
	"\x03ack\"w\n" +
	"\fSCRequestReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\frequest_type\x18\x02 \x01(\x05R\vrequestType\x12\x1c\n" +
	"\trequestid\x18\x03 \x01(\x05R\trequestid\x12\x12\n" +
	"\x04tile\x18\x04 \x01(\x05R\x04tile\"6\n" +
	"\n" +
	"SCTrustReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05trust\x18\x02 \x01(\bR\x05trust\"B\n" +
	"\x0eSCAnimationReq\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x1c\n" +
	"\trequestid\x18\x02 \x01(\x05R\trequestid\"_\n" +
	"\x0eSCGameStartAck\x12\x16\n" +
	"\x06banker\x18\x01 \x01(\x05R\x06banker\x12\x1d\n" +
	"\n" +
	"tile_count\x18\x02 \x01(\x05R\ttileCount\x12\x16\n" +
	"\x06scores\x18\x03 \x03(\x03R\x06scores\"9\n" +
	"\rSCOpenDoorAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05tiles\x18\x02 \x03(\x05R\x05tiles\"c\n" +
	"\fSCRequestAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\frequest_type\x18\x02 \x01(\x05R\vrequestType\x12\x1c\n" +
	"\trequestid\x18\x03 \x01(\x05R\trequestid\"V\n" +
	"\tSCPengAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\fdiscard_seat\x18\x02 \x01(\x05R\vdiscardSeat\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\"s\n" +
	"\tSCGangAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12!\n" +
	"\fdiscard_seat\x18\x02 \x01(\x05R\vdiscardSeat\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\x12\x1b\n" +
	"\tgang_type\x18\x04 \x01(\x05R\bgangType\"h\n" +
	"\bSCWinAck\x12\x14\n" +
	"\x05seats\x18\x01 \x03(\x05R\x05seats\x12\x19\n" +
	"\bpao_seat\x18\x02 \x01(\x05R\apaoSeat\x12\x12\n" +
	"\x04tile\x18\x03 \x01(\x05R\x04tile\x12\x17\n" +
	"\ahu_type\x18\x04 \x03(\x05R\x06huType\"P\n" +
	"\tSCDrawAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\x12\x1b\n" +
	"\tdraw_type\x18\x03 \x01(\x05R\bdrawType\"6\n" +
	"\fSCDiscardAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04tile\x18\x02 \x01(\x05R\x04tile\"*\n" +
	"\x10SCScoreChangeAck\x12\x16\n" +
	"\x06scores\x18\x01 \x03(\x05R\x06scores\"6\n" +
	"\n" +
	"SCTrustAck\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05trust\x18\x02 \x01(\bR\x05trust\".\n" +
	"\x0eSCAnimationAck\x12\x1c\n" +
	"\trequestid\x18\x01 \x01(\x05R\trequestid\"M\n" +
	"\vSCResultAck\x12>\n" +
	"\x0eplayer_results\x18\x02 \x03(\v2\x17.scproto.SCPlayerResultR\rplayerResults\"P\n" +
	"\x0eSCPlayerResult\x12\x12\n" +
	"\x04seat\x18\x01 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x05R\x05score\x12\x14\n" +
	"\x05tiles\x18\x03 \x03(\x05R\x05tilesB\fZ\n" +
	"../scprotob\x06proto3"

var (
	file_sc_proto_rawDescOnce sync.Once
	file_sc_proto_rawDescData []byte
)

func file_sc_proto_rawDescGZIP() []byte {
	file_sc_proto_rawDescOnce.Do(func() {
		file_sc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sc_proto_rawDesc), len(file_sc_proto_rawDesc)))
	})
	return file_sc_proto_rawDescData
}

var file_sc_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_sc_proto_goTypes = []any{
	(*SCReq)(nil),            // 0: scproto.SCReq
	(*SCAck)(nil),            // 1: scproto.SCAck
	(*SCRequestReq)(nil),     // 2: scproto.SCRequestReq
	(*SCTrustReq)(nil),       // 3: scproto.SCTrustReq
	(*SCAnimationReq)(nil),   // 4: scproto.SCAnimationReq
	(*SCGameStartAck)(nil),   // 5: scproto.SCGameStartAck
	(*SCOpenDoorAck)(nil),    // 6: scproto.SCOpenDoorAck
	(*SCRequestAck)(nil),     // 7: scproto.SCRequestAck
	(*SCPengAck)(nil),        // 8: scproto.SCPengAck
	(*SCGangAck)(nil),        // 9: scproto.SCGangAck
	(*SCWinAck)(nil),         // 10: scproto.SCWinAck
	(*SCDrawAck)(nil),        // 11: scproto.SCDrawAck
	(*SCDiscardAck)(nil),     // 12: scproto.SCDiscardAck
	(*SCScoreChangeAck)(nil), // 13: scproto.SCScoreChangeAck
	(*SCTrustAck)(nil),       // 14: scproto.SCTrustAck
	(*SCAnimationAck)(nil),   // 15: scproto.SCAnimationAck
	(*SCResultAck)(nil),      // 16: scproto.SCResultAck
	(*SCPlayerResult)(nil),   // 17: scproto.SCPlayerResult
}
var file_sc_proto_depIdxs = []int32{
	2,  // 0: scproto.SCReq.sc_request_req:type_name -> scproto.SCRequestReq
	3,  // 1: scproto.SCReq.sc_trust_req:type_name -> scproto.SCTrustReq
	4,  // 2: scproto.SCReq.sc_animation_req:type_name -> scproto.SCAnimationReq
	5,  // 3: scproto.SCAck.sc_game_start_ack:type_name -> scproto.SCGameStartAck
	6,  // 4: scproto.SCAck.sc_open_door_ack:type_name -> scproto.SCOpenDoorAck
	7,  // 5: scproto.SCAck.sc_request_ack:type_name -> scproto.SCRequestAck
	8,  // 6: scproto.SCAck.sc_peng_ack:type_name -> scproto.SCPengAck
	9,  // 7: scproto.SCAck.sc_gang_ack:type_name -> scproto.SCGangAck
	10, // 8: scproto.SCAck.sc_win_ack:type_name -> scproto.SCWinAck
	11, // 9: scproto.SCAck.sc_draw_ack:type_name -> scproto.SCDrawAck
	12, // 10: scproto.SCAck.sc_discard_ack:type_name -> scproto.SCDiscardAck
	13, // 11: scproto.SCAck.sc_score_change_ack:type_name -> scproto.SCScoreChangeAck
	16, // 12: scproto.SCAck.sc_result_ack:type_name -> scproto.SCResultAck
	14, // 13: scproto.SCAck.sc_trust_ack:type_name -> scproto.SCTrustAck
	15, // 14: scproto.SCAck.sc_animation_ack:type_name -> scproto.SCAnimationAck
	17, // 15: scproto.SCResultAck.player_results:type_name -> scproto.SCPlayerResult
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_sc_proto_init() }
func file_sc_proto_init() {
	if File_sc_proto != nil {
		return
	}
	file_sc_proto_msgTypes[0].OneofWrappers = []any{
		(*SCReq_ScRequestReq)(nil),
		(*SCReq_ScTrustReq)(nil),
		(*SCReq_ScAnimationReq)(nil),
	}
	file_sc_proto_msgTypes[1].OneofWrappers = []any{
		(*SCAck_ScGameStartAck)(nil),
		(*SCAck_ScOpenDoorAck)(nil),
		(*SCAck_ScRequestAck)(nil),
		(*SCAck_ScPengAck)(nil),
		(*SCAck_ScGangAck)(nil),
		(*SCAck_ScWinAck)(nil),
		(*SCAck_ScDrawAck)(nil),
		(*SCAck_ScDiscardAck)(nil),
		(*SCAck_ScScoreChangeAck)(nil),
		(*SCAck_ScResultAck)(nil),
		(*SCAck_ScTrustAck)(nil),
		(*SCAck_ScAnimationAck)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sc_proto_rawDesc), len(file_sc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sc_proto_goTypes,
		DependencyIndexes: file_sc_proto_depIdxs,
		MessageInfos:      file_sc_proto_msgTypes,
	}.Build()
	File_sc_proto = out.File
	file_sc_proto_goTypes = nil
	file_sc_proto_depIdxs = nil
}
